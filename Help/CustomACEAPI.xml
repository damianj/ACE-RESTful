<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>CustomACEAPI</name>
  </assembly>
  <members>
    <member name="T:CustomACEAPI.AdeptAce">
      <summary>Class that wraps the Custom ACE API server and all of its associated classes and methods</summary>
    </member>
    <member name="M:CustomACEAPI.AdeptAce.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>CustomACEAPI.AdeptAce</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:CustomACEAPI.AdeptAce.AceRobot">
      <summary>Method that returns the class instance of IAdeptRobot</summary>
      <returns>
        <c>IAdeptRobot</c> the robot that is to be controlled</returns>
    </member>
    <member name="P:CustomACEAPI.AdeptAce.AceServer">
      <summary>Method that returns the class instance of IAceServer</summary>
      <returns>
        <c>IAceServer</c> the ace server used to communicate with ACE and the robot</returns>
    </member>
    <member name="P:CustomACEAPI.AdeptAce.Connected">
      <summary>Method that allows a user to check whether the connection to the ACE server has been started</summary>
      <returns>
        <c>bool</c> specifying whether the connection to the ACE server is active or not</returns>
    </member>
    <member name="M:CustomACEAPI.AdeptAce.ConnectToServer(System.String,System.Int32,System.String,System.Int32)">
      <summary>Method that connects to the Adept ACE server and gets all the available controllers and robots</summary>
      <param name="remotingHost">URL on which the Adept ACE server is hosted on.</param>
      <param name="remotingPort">Port on which the Adept ACE server is listening on.</param>
      <param name="remotingName">Name of the Adept ACE server (typically just "ace").</param>
      <param name="callbackPort">Callback port for the Adept ACE server.</param>
      <returns>
        <c>ObservableCollection&lt;string&gt;[]</c> an array of length 2 containing the controllers and robots that were found. Index 0 is the controllers and index 1 is the robots.</returns>
    </member>
    <member name="M:CustomACEAPI.AdeptAce.GetJointPositions">
      <summary>Method that get's the current robot's joint positions at the time of the method call.</summary>
      <returns>
        <c>double[]</c> An array containing the current joint positions of the robot.</returns>
    </member>
    <member name="M:CustomACEAPI.AdeptAce.LoadControllerAndRobot(System.String,System.String)">
      <summary>Method that loads the controller and robot specified in the GUI combo-boxes</summary>
      <param name="controllerPath">Specifies where the server should search for the controller, can be found by opening up a default workspace in Adept ACE and connecting to a desired robot.</param>
      <param name="robotPath">Specifies where the server should search for the robot, can be found by opening up a default workspace in Adept ACE and connecting to a desired robot.</param>
      <returns>
        <c>void</c>
      </returns>
    </member>
    <member name="T:CustomACEAPI.App">
      <summary>
            Interaction logic for App.xaml
            </summary>
    </member>
    <member name="M:CustomACEAPI.App.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>CustomACEAPI.App</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:CustomACEAPI.App.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="M:CustomACEAPI.App.Main">
      <summary>
            Application Entry Point.
            </summary>
    </member>
    <member name="T:CustomACEAPI.APPConfig">
      <summary>Class used to used to house the information parsed from config.json</summary>
    </member>
    <member name="M:CustomACEAPI.APPConfig.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>CustomACEAPI.APPConfig</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:CustomACEAPI.APPConfig.ACECallbackPort">
      <summary>Callback port for the ACE server.</summary>
    </member>
    <member name="P:CustomACEAPI.APPConfig.ACEName">
      <summary>Name of the ACE server.</summary>
    </member>
    <member name="P:CustomACEAPI.APPConfig.ACEPort">
      <summary>Port on which the ACE server is listening on.</summary>
    </member>
    <member name="P:CustomACEAPI.APPConfig.ACEServer">
      <summary>URL where the ACE server is hosted at.</summary>
    </member>
    <member name="P:CustomACEAPI.APPConfig.APIPort">
      <summary>Port on which the API server should listen on.</summary>
    </member>
    <member name="P:CustomACEAPI.APPConfig.APIServer">
      <summary>URL where the API server is to be hosted at.</summary>
    </member>
    <member name="P:CustomACEAPI.APPConfig.ThreadingEnabled">
      <summary>Determines whether threading protected threading is enabled for the endpoints that issue move commands to the robot.</summary>
    </member>
    <member name="T:CustomACEAPI.MainWindow">
      <summary>Class that handles creating and maintaining an instance of the GUI as well as setting up the application for use.</summary>
    </member>
    <member name="M:CustomACEAPI.MainWindow.#ctor">
      <summary>Initiates the GUI and preps everything needed to successfully start the NancyFX server and connect to the Adept ACE server </summary>
      <returns>
        <c>void</c>
      </returns>
    </member>
    <member name="M:CustomACEAPI.MainWindow.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="M:CustomACEAPI.MainWindow.UpdateStatusBar">
      <summary>Updates the application status bar with how many Cartesian Moves, Joint Moves, GET requests, and POST requests have been issued to the server. This only includes requests to the API endpoints.</summary>
      <returns>
        <c>void</c>
      </returns>
    </member>
    <member name="M:CustomACEAPI.MainWindow.WriteOutput(System.String)">
      <summary>Writes to the console and the GUI text-box. Necessary to re-route calls from different threads onto the thread the GUI is running on.</summary>
      <param name="output_text">String to be written to the console and GUI text-box</param>
      <returns>
        <c>void</c>
      </returns>
    </member>
    <member name="T:CustomACEAPI.MainWindow.CameraAPI">
      <summary>Class to handle Camera API calls</summary>
    </member>
    <member name="M:CustomACEAPI.MainWindow.CameraAPI.#ctor">
      <summary>API endpoint for the Camera commands</summary>
      <returns>
        <c>void</c>
      </returns>
    </member>
    <member name="T:CustomACEAPI.MainWindow.CartesianMoveAPI">
      <summary>Class to handle CartesianMove API calls</summary>
    </member>
    <member name="M:CustomACEAPI.MainWindow.CartesianMoveAPI.#ctor">
      <summary>API endpoint for the CartesianMove command</summary>
      <returns>
        <c>void</c>
      </returns>
    </member>
    <member name="T:CustomACEAPI.MainWindow.CartesianMoveCommand">
      <summary>Class to handle setting up and executing a CartesianMove from Ace.Adept.Server.Motion</summary>
    </member>
    <member name="M:CustomACEAPI.MainWindow.CartesianMoveCommand.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>CustomACEAPI.MainWindow.CartesianMoveCommand</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:CustomACEAPI.MainWindow.CartesianMoveCommand.Accel">
      <summary>Maximum acceleration of the robot when it moves.</summary>
    </member>
    <member name="P:CustomACEAPI.MainWindow.CartesianMoveCommand.Decel">
      <summary>Maximum deceleration of the robot when it moves.</summary>
    </member>
    <member name="M:CustomACEAPI.MainWindow.CartesianMoveCommand.Execute(Ace.Adept.Server.Motion.IAdeptRobot,Ace.Adept.Server.Motion.CartesianMove)">
      <summary>Method that executes a command for an instance of the CartesianMoveCommand class</summary>
      <param name="robot">The robot that is to be controlled via the API call</param>
      <param name="cartesianMove">Cartesian move object to handle calculating the motion of the robot</param>
      <returns>
        <c>void</c>
      </returns>
    </member>
    <member name="P:CustomACEAPI.MainWindow.CartesianMoveCommand.MotionEnd">
      <summary>Determines how the motion should finish (i.e., Blend, NoNull, SettleCoarse, or SettleFine)</summary>
    </member>
    <member name="F:CustomACEAPI.MainWindow.CartesianMoveCommand.Name">
      <summary>The name of this type of motion, derived from the ACE command name.</summary>
    </member>
    <member name="P:CustomACEAPI.MainWindow.CartesianMoveCommand.Pitch">
      <summary>Specifies the Pitch coordinate of the motion</summary>
    </member>
    <member name="P:CustomACEAPI.MainWindow.CartesianMoveCommand.Roll">
      <summary>Specifies the Roll coordinate of the motion</summary>
    </member>
    <member name="P:CustomACEAPI.MainWindow.CartesianMoveCommand.SCurveProfile">
      <summary>Specifies the S-curve trajectory profile, from 0 (for trapezoidal) to 8, or -1 to leave unchanged. An S-curve can smooth the trajectory into an "S" shape by limiting the rate of change of acceleration. Robots with flexible links or drive trains can benefit from S-curves to reduce oscillation.</summary>
    </member>
    <member name="P:CustomACEAPI.MainWindow.CartesianMoveCommand.Speed">
      <summary>Maximum speed of the robot when it moves.</summary>
    </member>
    <member name="P:CustomACEAPI.MainWindow.CartesianMoveCommand.StraightMotion">
      <summary>Determines whether the robot's motion should be straight or not (i.e., true: straight-line, false: motion will be joint-interpolated)</summary>
    </member>
    <member name="P:CustomACEAPI.MainWindow.CartesianMoveCommand.X">
      <summary>Specifies the X coordinate of the motion</summary>
    </member>
    <member name="P:CustomACEAPI.MainWindow.CartesianMoveCommand.Y">
      <summary>Specifies the Y coordinate of the motion</summary>
    </member>
    <member name="P:CustomACEAPI.MainWindow.CartesianMoveCommand.Yaw">
      <summary>Specifies the Yaw coordinate of the motion</summary>
    </member>
    <member name="P:CustomACEAPI.MainWindow.CartesianMoveCommand.Z">
      <summary>Specifies the Z coordinate of the motion</summary>
    </member>
    <member name="T:CustomACEAPI.MainWindow.IndexPage">
      <summary>Class to handle landing page of the application serer</summary>
    </member>
    <member name="M:CustomACEAPI.MainWindow.IndexPage.#ctor">
      <summary>Endpoint for the landing page</summary>
      <returns>
        <c>void</c>
      </returns>
    </member>
    <member name="T:CustomACEAPI.MainWindow.InfoAPI">
      <summary>Class to handle System info GET requests</summary>
    </member>
    <member name="M:CustomACEAPI.MainWindow.InfoAPI.#ctor">
      <summary>API endpoint to handle all GET requests aimed at getting information regarding the current status of the system.</summary>
      <returns>
        <c>void</c>
      </returns>
    </member>
    <member name="T:CustomACEAPI.MainWindow.JointMoveAPI">
      <summary>Class to handle JointMove API calls</summary>
    </member>
    <member name="M:CustomACEAPI.MainWindow.JointMoveAPI.#ctor">
      <summary>API endpoint for the JointMove command</summary>
      <returns>
        <c>void</c>
      </returns>
    </member>
    <member name="T:CustomACEAPI.MainWindow.JointMoveCommand">
      <summary>Class to handle setting up and executing a JointMove from Ace.Adept.Server.Motion</summary>
    </member>
    <member name="M:CustomACEAPI.MainWindow.JointMoveCommand.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>CustomACEAPI.MainWindow.JointMoveCommand</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:CustomACEAPI.MainWindow.JointMoveCommand.Accel">
      <summary>Maximum acceleration of the robot when it moves.</summary>
    </member>
    <member name="P:CustomACEAPI.MainWindow.JointMoveCommand.Decel">
      <summary>Maximum deceleration of the robot when it moves.</summary>
    </member>
    <member name="M:CustomACEAPI.MainWindow.JointMoveCommand.Execute(Ace.Adept.Server.Motion.IAdeptRobot,Ace.Adept.Server.Motion.JointMove)">
      <summary>Method that executes a command for an instance of the JointMoveCommand class</summary>
      <param name="robot">The robot that is to be controlled via the API call</param>
      <param name="jointMove">
        <c>JointMove</c> object to handle calculating the motion of the joints of the robot</param>
      <returns>
        <c>void</c>
      </returns>
    </member>
    <member name="P:CustomACEAPI.MainWindow.JointMoveCommand.JointPosition">
      <summary>Specifies the joint positions of the move that is to be executed.</summary>
    </member>
    <member name="P:CustomACEAPI.MainWindow.JointMoveCommand.MotionEnd">
      <summary>Determines how the motion should finish (i.e., Blend, NoNull, SettleCoarse, or SettleFine)</summary>
    </member>
    <member name="F:CustomACEAPI.MainWindow.JointMoveCommand.Name">
      <summary>The name of this type of motion, derived from the ACE command name.</summary>
    </member>
    <member name="P:CustomACEAPI.MainWindow.JointMoveCommand.SCurveProfile">
      <summary>Specifies the S-curve trajectory profile, from 0 (for trapezoidal) to 8, or -1 to leave unchanged. An S-curve can smooth the trajectory into an "S" shape by limiting the rate of change of acceleration. Robots with flexible links or drive trains can benefit from S-curves to reduce oscillation.</summary>
    </member>
    <member name="P:CustomACEAPI.MainWindow.JointMoveCommand.Speed">
      <summary>Maximum speed of the robot when it moves.</summary>
    </member>
    <member name="P:CustomACEAPI.MainWindow.JointMoveCommand.StraightMotion">
      <summary>Determines whether the robot's motion should be straight or not (i.e., true: straight-line, false: motion will be joint-interpolated)</summary>
    </member>
    <member name="T:CustomACEAPI.MultiTextWriter">
      <summary>Class to assist in re-routing <c>stdout</c> to multiple outputs. In our case to re-route it to the text-box that is displayed and also to the console as well.</summary>
    </member>
    <member name="M:CustomACEAPI.MultiTextWriter.#ctor(System.Collections.Generic.IEnumerable{System.IO.TextWriter})">
      <summary>Overload of the constructor method that takes an <c>IEnumerable</c> of type <c>TextWriter</c> to be converted to a list.</summary>
      <param name="writers">
        <c>IEnumerable</c> of <c>TextWriter</c> objects that are to be converted to a list, to be used to route <c>stdout</c> to.</param>
    </member>
    <member name="M:CustomACEAPI.MultiTextWriter.#ctor(System.IO.TextWriter[])">
      <summary>Overload of the constructor method that takes a list of <c>TextWriter</c> objects.</summary>
      <param name="writers">List of <c>TextWriter</c> objects that are to be used to route <c>stdout</c> to.</param>
    </member>
    <member name="M:CustomACEAPI.MultiTextWriter.Close">
      <summary>Override of the <c>Close</c> method, closes each <c>TextWriter</c> in the list of <c>TextWriter</c>s</summary>
      <returns>
        <c>void</c>
      </returns>
    </member>
    <member name="P:CustomACEAPI.MultiTextWriter.Encoding">
      <summary>Override of the <c>Encoding</c> method, returns the <c>Encoding</c> of the <c>TextWriter</c>s</summary>
      <returns>
        <c>Encoding.ASCII</c>
      </returns>
    </member>
    <member name="M:CustomACEAPI.MultiTextWriter.Flush">
      <summary>Override of the <c>Flush</c> method, flushes each <c>TextWriter</c> in the list of <c>TextWriter</c>s</summary>
      <returns>
        <c>void</c>
      </returns>
    </member>
    <member name="M:CustomACEAPI.MultiTextWriter.Write(System.Char)">
      <summary>Override of the <c>Write</c> method</summary>
      <param name="value">
        <c>char</c> to be written</param>
      <returns>
        <c>void</c>
      </returns>
    </member>
    <member name="M:CustomACEAPI.MultiTextWriter.Write(System.String)">
      <summary>Override of the <c>Write</c> method, writes to each <c>TextWriter</c> in the list of <c>TextWriter</c>s</summary>
      <param name="value">
        <c>string</c> to be written</param>
      <returns>
        <c>void</c>
      </returns>
    </member>
    <member name="T:CustomACEAPI.TextBoxWriter">
      <summary>Class to assist in re-routing <c>stdout</c> to the GUI text-box that is displayed</summary>
    </member>
    <member name="M:CustomACEAPI.TextBoxWriter.#ctor(System.Windows.Controls.TextBox)">
      <summary>Constructor method that instantiates the <c>TextBox</c> instance to the appropriate element in the GUI</summary>
      <param name="textbox">
        <c>TextBox</c> instance that is to be used to write to.</param>
    </member>
    <member name="P:CustomACEAPI.TextBoxWriter.Encoding">
      <summary>Override of the <c>Encoding</c> method, returns the <c>Encoding</c> of the <c>TextBox</c></summary>
      <returns>
        <c>Encoding.ASCII</c>
      </returns>
    </member>
    <member name="M:CustomACEAPI.TextBoxWriter.Write(System.Char)">
      <summary>Override of the <c>Write</c> method</summary>
      <param name="value">
        <c>char</c> to be written</param>
      <returns>
        <c>void</c>
      </returns>
    </member>
    <member name="M:CustomACEAPI.TextBoxWriter.Write(System.String)">
      <summary>Override of the <c>Write</c> method, writes to each <c>TextWriter</c> in the list of <c>TextWriter</c>s</summary>
      <param name="value">
        <c>string</c> to be written</param>
      <returns>
        <c>void</c>
      </returns>
    </member>
  </members>
</doc>
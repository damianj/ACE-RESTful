<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ace.Communication</name>
    </assembly>
    <members>
        <member name="T:Ace.Communication.EventBridge.EventsBridgeDecode">
            <summary>
            Decodes messages receieved from V+ iSight keywords.
            An event will be raised to notify subscriber of which iSight keyword
            was called with parameters.
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.EventsBridgeDecode.transactionLock">
            <summary>
            Locking object for transactions
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.EventsBridgeDecode.OnVRun">
            <summary>
            Handler for VRUN instruction
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.EventsBridgeDecode.OnVResult">
            <summary>
            Handler for VRESULT instruction
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.EventsBridgeDecode.OnVLocation">
            <summary>
            Handler for VLOCATION instruction
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.EventsBridgeDecode.OnVParameterWrite">
            <summary>
            Handler for VPARAMETER Write instruction
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.EventsBridgeDecode.OnVParameterRead">
            <summary>
            Handler for VPARAMETER Read instruction
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.EventsBridgeDecode.OnVState">
            <summary>
            Handler for VSTATE instruction
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.EventsBridgeDecode.OnVWaiti">
            <summary>
            Handler for VWAITI instruction
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.EventsBridgeDecode.OnComplete">
            <summary>
            Handler for completion of V+ iSight instruction 
            (byte) cookie and (byte[]) response
            </summary>
        </member>
        <member name="M:Ace.Communication.EventBridge.EventsBridgeDecode.OpenTransaction(System.Byte,System.Byte[],System.UInt32,System.UInt16)">
            <summary>
            Manages transaction status.
            Extracts the message and place it in the buffer of commands to track
            We should only deal with one transaction at a time
            </summary>
        </member>
        <member name="T:Ace.Communication.EventBridge.VisionKeyword">
            <summary>
            Defines for 'V' iSight (Vision) keywords commands
            </summary>
        </member>
        <member name="T:Ace.Communication.EventBridge.PacketTypes">
            <summary>
            Transaction Descriptor Packet Types
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.PacketTypes.PTYMIN">
            <summary>
            Minimum packet type
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.PacketTypes.PTYREQ">
            <summary>
            Request from V+ to ivserver
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.PacketTypes.PTYRSP">
            <summary>
            Response from ivserver to V+
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.PacketTypes.PTYACK">
            <summary>
            Acknowledge of request or response
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.PacketTypes.PTYNAK">
            <summary>
            Negative ACK
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.PacketTypes.PTYACR">
            <summary>
            Acknowledge of request, with response from
            ivserver to V+ piggy-backed (refer to as
            piggy packet for convenience)
            </summary>
        </member>
        <member name="T:Ace.Communication.EventBridge.Operations.VLocationOperation">
            <summary>
            VLOCATION Operation
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VLocationOperation.ToolID">
            <summary>
            Index of the tool in the vision sequence
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VLocationOperation.Instance">
            <summary>
            Index of the instance in the specified result frame
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VLocationOperation.ResultID">
            <summary>
            Identifier of the result
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VLocationOperation.ResultIndex">
            <summary>
            Index of the result
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VLocationOperation.FrameIndex">
            <summary>
            Index of the frame
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VLocationOperation.Tx">
            <summary>
            The translation X
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VLocationOperation.Ty">
            <summary>
            The translation Y
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VLocationOperation.Tz">
            <summary>
            The translation Z
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VLocationOperation.Yaw">
            <summary>
            The yaw
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VLocationOperation.Pitch">
            <summary>
            The pitch
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VLocationOperation.Roll">
            <summary>
            The roll
            </summary>
        </member>
        <member name="M:Ace.Communication.EventBridge.Operations.VLocationOperation.CompleteVLocation(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Send response that VLOCATION is complete
            </summary>
            <param name="errorCode">V+ error code</param>
            <param name="tx">The translation X.</param>
            <param name="ty">The translation Y.</param>
            <param name="tz">The translation Z.</param>
            <param name="yaw">The yaw.</param>
            <param name="pitch">The pitch.</param>
            <param name="roll">The roll.</param>
        </member>
        <member name="T:Ace.Communication.EventBridge.Operations.VOperation">
            <summary>
            An ACE Sight Keyword Operation
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VOperation.Cookie">
            <summary>
            An identifier for transactions.
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VOperation.IPAddress">
            <summary>
            Client IP Address
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VOperation.Port">
            <summary>
            Client UDP Port
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VOperation.Sequence">
            <summary>
            Sequence number of the packet
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.Operations.VOperation.error">
            <summary>
            The V+ Error Code
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VOperation.ErrorCode">
            <summary>
            Get the V+ Error Code 
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VOperation.VOperationComplete">
            <summary>
            Action for Operation complete 
            </summary>
        </member>
        <member name="T:Ace.Communication.EventBridge.Operations.VParameterReadOperation">
            <summary>
            VPARAMETER Read Operation
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VParameterReadOperation.ToolID">
            <summary>
            Index of the tool in the vision sequence
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VParameterReadOperation.ParameterID">
            <summary>
            Identifier of the parameter
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VParameterReadOperation.ParameterIndex">
            <summary>
            Index of the parameter
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VParameterReadOperation.ObjectIndex">
            <summary>
            Index of the object
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VParameterReadOperation.Value">
            <summary>
            Get the Value
            </summary>
        </member>
        <member name="M:Ace.Communication.EventBridge.Operations.VParameterReadOperation.CompleteVParameterRead(System.Int32,System.Single)">
            <summary>
            Send response that VPARAMETER Read is complete.
            </summary>
            <param name="errorCode">V+ error code.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Ace.Communication.EventBridge.Operations.VParameterWriteOperation">
            <summary>
            VPARAMETER Write Operation
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VParameterWriteOperation.ToolID">
            <summary>
            Index of the tool in the vision sequence
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VParameterWriteOperation.ParameterID">
            <summary>
            Identifier of the parameter
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VParameterWriteOperation.ParameterIndex">
            <summary>
            Index of the parameter
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VParameterWriteOperation.ObjectIndex">
            <summary>
            Index of the object
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VParameterWriteOperation.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:Ace.Communication.EventBridge.Operations.VParameterWriteOperation.CompleteVParameterWrite(System.Int32)">
            <summary>
            Send response that VPARAMETER Write is complete
            </summary>
            <param name="errorCode">V+ error code</param>
        </member>
        <member name="T:Ace.Communication.EventBridge.Operations.VResultOperation">
            <summary>
            VRESULT Operation
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VResultOperation.ToolID">
            <summary>
            Index of the tool in the vision sequence
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VResultOperation.Instance">
            <summary>
            Index of the instance in the specified result frame
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VResultOperation.ResultID">
            <summary>
            Identifier of the result
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VResultOperation.ResultIndex">
            <summary>
            Index of the result
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VResultOperation.FrameIndex">
            <summary>
            Index of the frame
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VResultOperation.Result">
            <summary>
            Get the result
            </summary>
        </member>
        <member name="M:Ace.Communication.EventBridge.Operations.VResultOperation.CompleteVResult(System.Int32,System.Single)">
            <summary>
            Send response that VRESULT is complete
            </summary>
            <param name="errorCode">V+ error code</param>
            <param name="result">Result of VRESULT event</param>
        </member>
        <member name="T:Ace.Communication.EventBridge.Operations.VRunOperation">
            <summary>
            VRUN Operation
            </summary>
        </member>
        <member name="M:Ace.Communication.EventBridge.Operations.VRunOperation.CompleteVRun(System.Int32)">
            <summary>
            Send response that VRUN is complete
            </summary>
            <param name="errorCode">V+ error code</param>
        </member>
        <member name="T:Ace.Communication.EventBridge.Operations.VStateOperation">
            <summary>
            VSTATE Operation
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VStateOperation.State">
            <summary>
            Get the state of the execution of a sequence
            </summary>
        </member>
        <member name="M:Ace.Communication.EventBridge.Operations.VStateOperation.CompleteVState(System.Int32,System.Int32)">
            <summary>
            Send response that VSTATE is complete.
            </summary>
            <param name="errorCode">V+ error code.</param>
            <param name="state">The state.</param>
        </member>
        <member name="T:Ace.Communication.EventBridge.Operations.VWaitiOperation">
            <summary>
            VWAITI Operation
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.Operations.VWaitiOperation.Mode">
            <summary>
            The mode
            0 - Wait for full completion
            1 - Wait until picture acquisition has completed
            </summary>
        </member>
        <member name="M:Ace.Communication.EventBridge.Operations.VWaitiOperation.CompleteVWaiti(System.Int32)">
            <summary>
            Send response that VWaiti is complete
            </summary>
            <param name="errorCode">V+ error code</param>
        </member>
        <member name="T:Ace.Communication.EventBridge.TransactionDescriptorType">
            <summary>
            Structures for Transaction Descriptor Types
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.TransactionDescriptorType.Active">
            <summary>
            TRUE if Tdesc is currently active
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.TransactionDescriptorType.VPlusIP">
            <summary>
            IP address of V+ controller stored in network order,
            not host order to avoid htonl
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.TransactionDescriptorType.VPlusPort">
            <summary>
            Port used by V+ controller stored in network order,
            not host order to avoid htonl
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.TransactionDescriptorType.VCookie">
            <summary>
            The V+ cookie used as identifier. Kept as a key lookup to
            be able to map the packet going back to V+ server to a specific task.
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.TransactionDescriptorType.VSequence">
            <summary>
            V+ Sequence number of the packet
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.TransactionDescriptorType.PCookie">
            <summary>
            The PC cookie used as identifier, similar to V+ side relationship
            to vcookie
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.TransactionDescriptorType.PSequence">
            <summary>
            The PC Sequence number of the packet, similar to V+ side relationship
            to vsequence
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.TransactionDescriptorType.OpaqueValid">
            <summary>
            True if OpaqueData is valid
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.TransactionDescriptorType.OpaqueData">
            <summary>
            Vision data
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.TransactionDescriptorType.TimeoutTimer">
            <summary>
            Timer for tracking time-outs.
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.TransactionDescriptorType.RetryCount">
            <summary>
            Number of retry attempts
            </summary>
        </member>
        <member name="T:Ace.Communication.EventBridge.PacketTypeHeader">
            <summary>
            PacketType structure.
            this struct is a head structure following with (PacketTypeNak or PacketTypePiggy) structure
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.PacketTypeHeader.version">
            <summary>
            Version of the packet
            A server will only response to a client with the same packet version
            number
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.PacketTypeHeader.type">
            <summary>
            Type of packet
            This is a descriptor of the packet information. It's describing the meaning
            of the packet. The supported formats are 4 for PTYNAK and 5 for PTYACR.
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.PacketTypeHeader.sequence">
            <summary>
            Sequence number of the packet
            A sequence number must be unique for each packet. The sequence number
            is send with a packet and the other side response the ACK or the NACK
            with the same sequence number.
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.PacketTypeHeader.cookie">
            <summary>
            The cookie is used an identifier of a complete transaction
            ( Request - ACK - Response - ACK ). This must be also a unique number.
            In the actual system, the cookie is kept as key of a lookup to be able to
            map the packet coming back to the server to a specific task.
            </summary>
        </member>
        <member name="T:Ace.Communication.EventBridge.PacketTypeNak">
            <summary>
            PacketTypeNak when type is 4 (PTYNAK).
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.PacketTypeNak.errcode">
            <summary>
            Error code
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.PacketTypeNak.msglen">
            <summary>
            Number of bytes in error message, or zero
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.PacketTypeNak.msg">
            <summary>
            First byte of error message
            </summary>
        </member>
        <member name="T:Ace.Communication.EventBridge.PacketTypePiggy">
            <summary>
            PacketTypePiggy when type is 5 (PTYACR).
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.PacketTypePiggy.version">
            <summary>
            Version of the packet
            A server will only response to a client with the same packet version
            number
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.PacketTypePiggy.type">
            <summary>
            Type of packet
            This is a descriptor of the packet information. It's describing the meaning
            of the packet. The supported formats are 4 for PTYNAK and 5 for PTYACR.
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.PacketTypePiggy.sequence">
            <summary>
            Sequence number of the packet
            A sequence number must be unique for each packet. The sequence number
            is send with a packet and the other side response the ACK or the NACK
            with the same sequence number.
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.PacketTypePiggy.cookie">
            <summary>
            The cookie is used an identifier of a complete transaction
            ( Request - ACK - Response - ACK ). This must be also a unique number.
            In the actual system, the cookie is kept as key of a lookup to be able to
            map the packet coming back to the server to a specific task.
            </summary>
        </member>
        <member name="T:Ace.Communication.EventBridge.SwappableFloat">
            <summary>
            Bug 7958
            When the swapped value is NaN, Windows changes some bits in it for some reason.
            The swapped value remains a NaN but the value is changed.
            Thus we must not swap float values if there is a risk to generate a NaN value.
            Using an union will prevent Windows to change the mantissa bits of the NaN float value.
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.SwappableFloat.longValue">
            <summary>
            Value as a long data type 
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.SwappableFloat.floatValue">
            <summary>
            Value as a float data type
            </summary>
        </member>
        <member name="T:Ace.Communication.EventBridge.TransactionDescriptorManager">
            <summary>
            Manages pool of active ACE Sight Transactions
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.TransactionDescriptorManager.udpServer">
            <summary>
            UDP Server listening for packets
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.TransactionDescriptorManager.processingLock">
            <summary>
            Locking object
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.TransactionDescriptorManager.CURVER">
            <summary>
            Current protocol version
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.TransactionDescriptorManager.BADVER">
            <summary>
            Bad Version
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.TransactionDescriptorManager.MAX_TRANSACTIONS">
            <summary>
            The maximum number of simultaneous Transactions
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.TransactionDescriptorManager.MAX_DATA_LENGTH">
            <summary>
            Max number of data bytes that can be posted in a TransactionDescriptor.
            Limited by byte length for count.
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.TransactionDescriptorManager.STD_TIMEOUT">
            <summary>
            Standard timeout(ms)
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.TransactionDescriptorManager.MAX_RETRY">
            <summary>
            Max allowed retry attempts
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.TransactionDescriptorManager.COOKIE_MASK">
            <summary>
            Mask for cookie value to correspond to
            ((log 2 of MAX_TRANSACTIONS) - 1) bits
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.TransactionDescriptorManager.Psequence">
            <summary>
            PC Sequence number
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.TransactionDescriptorManager.Pcookie">
            <summary>
            PC Cookie
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.TransactionDescriptorManager.OutputTransactions">
            <summary>
            List of Transactions that need to output a packet
            The Pcookie will serve as the key, and store 
            the transaction index for quick lookup
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.TransactionDescriptorManager.Transactions">
            <summary>
            The TransactionDescriptor pool
            Transactions are allocated from a circular buffer. The relationship
            to the PC cookies (pcookies) is similar to the V+-side transaction
            relationship to vcookies. See ivision.asm for details.
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.TransactionDescriptorManager.OnTransactionCreated">
            <summary>
            New Transaction Descriptor created.
            Handler will pass PCookie, Packet Body Request, IPAddress, Port
            The packet body request will need to be decoded to determine 
            which iSight (Vision) command to perform
            </summary>
        </member>
        <member name="M:Ace.Communication.EventBridge.TransactionDescriptorManager.#ctor(Ace.Communication.EventBridge.IUDPServer)">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Ace.Communication.EventBridge.TransactionDescriptorManager.Initialize">
            <summary>
            Initialize everything related to Transaction Descriptors
            </summary>
        </member>
        <member name="M:Ace.Communication.EventBridge.TransactionDescriptorManager.AllocateTransaction">
            <summary>
            Search for available Transaction element. Try to get next free one in circular buffer.
            Place in the active list. Try all Transactions once.
            </summary>
            <returns>Index of an available Transaction element or -1 if none found</returns>
        </member>
        <member name="M:Ace.Communication.EventBridge.TransactionDescriptorManager.FreeTransaction(Ace.Communication.EventBridge.TransactionDescriptorType@)">
            <summary>
            Remove Transaction from all lists and mark it free.
            </summary>
        </member>
        <member name="M:Ace.Communication.EventBridge.TransactionDescriptorManager.FindTransactionFromVCookie(System.Byte,System.Net.EndPoint)">
            <summary>
            Find an active transaction which matches a vcookie and IP address.
            This routine is inefficient because it must iterate
            thru every active transaction.  Can optimize in future.
            This routine is called frequently, so optimization will
            pay off.
            </summary>
            <param name="vcookie">vcookie value</param>
            <param name="ip">V+ IP Address</param>
            <returns>Index of an available Transaction or -1 if none found</returns>
        </member>
        <member name="M:Ace.Communication.EventBridge.TransactionDescriptorManager.FindTransactionFromPCookie(System.Byte)">
            <summary>
            Find an active transaction which matches a PCookie.
            Since PCookie is used as a key in the maps, this is
            simply a map lookup.
            </summary>
            <param name="pcookie">pcookie value</param>
            <returns>Index of an available Transaction or -1 if none found</returns>
        </member>
        <member name="M:Ace.Communication.EventBridge.TransactionDescriptorManager.PostOutputInTransaction(Ace.Communication.EventBridge.TransactionDescriptorType@,System.Byte[])">
            <summary>
            Post output data in Transaction.  Number of bytes
            posted will be limited to MAX_DATA_LEN.
            </summary>
            <param name="transaction">Reference to the transaction</param>
            <param name="data">Data to post</param>
        </member>
        <member name="M:Ace.Communication.EventBridge.TransactionDescriptorManager.QueueTransactionForOutput(System.Byte,System.Boolean)">
            <summary>
            Queue transaction in output list.
            </summary>
            <param name="pcookie">PCookie key for transaction look up</param>
            <param name="postEvent">True to post event</param>
        </member>
        <member name="M:Ace.Communication.EventBridge.TransactionDescriptorManager.ProcessOutputList">
            <summary>
            Generate output for all transactions on the output list.
            transactions with no posted output data will output an ACK packet.
            transactions with posted output data will output a piggy packet.
            </summary>
        </member>
        <member name="M:Ace.Communication.EventBridge.TransactionDescriptorManager.Respond(System.Byte,System.Byte[])">
            <summary>
            Called by client to respond to the V+ controller 
            and complete the transaction
            </summary>
            <param name="cookie"></param>
            <param name="data"></param>
        </member>
        <member name="M:Ace.Communication.EventBridge.TransactionDescriptorManager.OutputACK(Ace.Communication.EventBridge.TransactionDescriptorType)">
            <summary>
            Output ACK packet for specified transaction.
            </summary>
            <param name="transaction">Transaction to send</param>
        </member>
        <member name="M:Ace.Communication.EventBridge.TransactionDescriptorManager.OutputPiggy(Ace.Communication.EventBridge.TransactionDescriptorType@)">
            <summary>
            Create piggy packet for specified transaction
            </summary>
        </member>
        <member name="M:Ace.Communication.EventBridge.TransactionDescriptorManager.ACKPacket(Ace.Communication.EventBridge.PacketTypeHeader,System.Net.EndPoint)">
            <summary>
            Output ACK packet using parameters from an input packet.
            </summary>
            <param name="packetHeader">Header of packet to send</param>
            <param name="epSource">Source address of packet</param>
        </member>
        <member name="M:Ace.Communication.EventBridge.TransactionDescriptorManager.NakPacket(Ace.Communication.EventBridge.PacketTypeHeader,System.Net.EndPoint,System.Byte)">
            <summary>
            Create NAK packet using parameters from an input packet.
            </summary>
            <param name="packetHeader">Header of packet to send</param>
            <param name="epSource">Source address of packet</param>
            <param name="errorCode">Error code for NAK</param>
        </member>
        <member name="M:Ace.Communication.EventBridge.TransactionDescriptorManager.SetTransactionTimeout(System.Int32)">
            <summary>
            Initialize a timer for setting the transaction timeout
            </summary>
            <param name="milliseconds">Timer interval</param>
        </member>
        <member name="M:Ace.Communication.EventBridge.TransactionDescriptorManager.TimeoutTimer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            This routine handles any transaction that has timed out.
            This routine uses an inefficient linear search.  However,
            it is seldom called, and is not important to optimize.
            If any transaction exceeds the max retry count, it is
            deallocated, ending that transaction.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ace.Communication.EventBridge.TransactionDescriptorManager.ProcessInput(System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Read an input packet and process accordingly.
            </summary>
            <param name="epSource"></param>
            <param name="receivedByteData"></param>
        </member>
        <member name="T:Ace.Communication.EventBridge.IUDPServer">
            <summary>
            UDP Server that listens on a given port and notifies a single subscriber that
            data has been received.
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.IUDPServer.DataReceived">
            <summary>
            Event for when data is received
            </summary>
        </member>
        <member name="M:Ace.Communication.EventBridge.IUDPServer.Send(System.Byte[],System.Net.EndPoint)">
            <summary>
            Send a UDP message
            </summary>
            <param name="data">Array to send</param>
            <param name="epDestination">Destination IP Address</param>
        </member>
        <member name="M:Ace.Communication.EventBridge.IUDPServer.StartListening">
            <summary>
            Start listening for data
            </summary>
        </member>
        <member name="M:Ace.Communication.EventBridge.IUDPServer.Shutdown">
            <summary>
            Closes underlying socket.
            </summary>
        </member>
        <member name="T:Ace.Communication.EventBridge.UDPServer">
            <summary>
            UDP Server that listens on a given port and notifies a subscriber that
            data has been received.
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.UDPServer.IVISION_PORT">
            <summary>
            Port number used by the vision server
            </summary>
        </member>
        <member name="F:Ace.Communication.EventBridge.UDPServer.serverSocket">
            <summary>
            Main socket that the server listens to clients
            </summary>
        </member>
        <member name="P:Ace.Communication.EventBridge.UDPServer.DataReceived">
            <summary>
            Event for data received
            </summary>
        </member>
        <member name="M:Ace.Communication.EventBridge.UDPServer.#ctor(System.Int32)">
            <summary>
            Contstructor accepting port to listen on
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:Ace.Communication.EventBridge.UDPServer.Send(System.Byte[],System.Net.EndPoint)">
            <summary>
            Send a UDP message
            </summary>
            <param name="data">Array to send</param>
            <param name="epDestination">Destination IP Address</param>
        </member>
        <member name="M:Ace.Communication.EventBridge.UDPServer.StartListening">
            <summary>
            Start listening for data
            </summary>
        </member>
        <member name="M:Ace.Communication.EventBridge.UDPServer.Shutdown">
            <summary>
            Closes underlying socket.
            </summary>
        </member>
        <member name="T:Ace.Communication.ControllerModel">
            <summary>
            The model of the controller (returned by ID(1,1)).
            </summary>
        </member>
        <member name="F:Ace.Communication.ControllerModel.Unknown">
            <summary>
            The controller is unknown
            </summary>
        </member>
        <member name="F:Ace.Communication.ControllerModel.eMB40RController">
            <summary>
            eMB-40R Controller
            </summary>
        </member>
        <member name="F:Ace.Communication.ControllerModel.eMB40LController">
            <summary>
            eMB-40L Controller
            </summary>
        </member>
        <member name="F:Ace.Communication.ControllerModel.eMB40MController">
            <summary>
            eMB-40M Controller
            </summary>
        </member>
        <member name="F:Ace.Communication.ControllerModel.eMB60RController">
            <summary>
            eMB-60R Controller
            </summary>
        </member>
        <member name="F:Ace.Communication.ControllerModel.eMB60LController">
            <summary>
            eMB-60L Controller
            </summary>
        </member>
        <member name="F:Ace.Communication.ControllerModel.eAIBQuattro">
            <summary>
            e-Series Quattro
            </summary>
        </member>
        <member name="F:Ace.Communication.ControllerModel.eAIBHornet">
            <summary>
            e-Series Hornet
            </summary>
        </member>
        <member name="F:Ace.Communication.ControllerModel.eAIBCobra">
            <summary>
            e-Series Cobra
            </summary>
        </member>
        <member name="F:Ace.Communication.ControllerModel.SmartControllerEX">
            <summary>
            SmartController EX
            </summary>
        </member>
        <member name="F:Ace.Communication.ControllerModel.SmartControllerCS">
            <summary>
            Legacy SmartController CS
            </summary>		
        </member>
        <member name="F:Ace.Communication.ControllerModel.SmartControllerCX">
            <summary>
            Legacy SmartController CX
            </summary>
        </member>
        <member name="F:Ace.Communication.ControllerModel.SmartControllerCXAviVision">
            <summary>
            Legacy SmartController CX with AdeptVision sAVI
            </summary>
        </member>
        <member name="T:Ace.Communication.ControllerType">
            <summary>
            Supported controller types (returned by ID(5,4).
            </summary>
        </member>
        <member name="F:Ace.Communication.ControllerType.Invalid">
            <summary>
            Invalid controller type.
            </summary>
        </member>
        <member name="F:Ace.Communication.ControllerType.Heurikon68040">
            <summary>
            The heurikon 68040 (obsolete)
            </summary>
        </member>
        <member name="F:Ace.Communication.ControllerType.Adept68030">
            <summary>
            The adept 68030 controller (obsolete)
            </summary>
        </member>
        <member name="F:Ace.Communication.ControllerType.Motorola_68040">
            <summary>
            The Motorola 68040 controller (obsolete)
            </summary>
        </member>
        <member name="F:Ace.Communication.ControllerType.Motorola_68060">
            <summary>
            The Motorola 68060 controller (obsolete)
            </summary>
        </member>
        <member name="F:Ace.Communication.ControllerType.AdeptWindowsController_68040">
            <summary>
            The AdeptWindowsController 68040 series (obsolete)
            </summary>
        </member>
        <member name="F:Ace.Communication.ControllerType.AdeptWindowsController_68060">
            <summary>
            The AdeptWindowsController 68060 series (obsolete)
            </summary>
        </member>
        <member name="F:Ace.Communication.ControllerType.SmartControllerCS">
            <summary>
            SmartController CS.
            </summary>
        </member>
        <member name="F:Ace.Communication.ControllerType.SmartControllerCX">
            <summary>
            SmartController CX.
            </summary>
        </member>
        <member name="F:Ace.Communication.ControllerType.SmartControllerEX">
            <summary>
            SmartController EX.
            </summary>
        </member>
        <member name="T:Ace.Communication.Fcmnd">
            <summary>
            FCMDND Modes of operation
            </summary>
        </member>
        <member name="F:Ace.Communication.Fcmnd.DeleteFile">
            <summary>
            The delete file
            </summary>
        </member>
        <member name="F:Ace.Communication.Fcmnd.RenameFile">
            <summary>
            The rename file
            </summary>
        </member>
        <member name="F:Ace.Communication.Fcmnd.FormatDisk">
            <summary>
            The format disk
            </summary>
        </member>
        <member name="F:Ace.Communication.Fcmnd.CreateDirectory">
            <summary>
            The create directory
            </summary>
        </member>
        <member name="F:Ace.Communication.Fcmnd.DeleteDirectory">
            <summary>
            The delete directory
            </summary>
        </member>
        <member name="T:Ace.Communication.FirewireGadgetType">
            <summary>
            A list of Adept FireWire gadget types. A distributed node is composed of
            one or more gadgets.
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireGadgetType.Info">
            <summary>
            Information gadget (there is one of these in each distributed node).
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireGadgetType.Motor">
            <summary>
            A motor or encoder gadget. Configured by robot and motor numbers, and
            primary or secondary (used in dual-loop).
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireGadgetType.DigitalInput">
            <summary>
            A digital input gadget. Configured by block number.
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireGadgetType.DigitalOutput">
            <summary>
            A digital output gadget. Configured by block number.
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireGadgetType.Robot">
            <summary>
            An Adept robot gadget. Configured by robot number.
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireGadgetType.ForceSensor">
            <summary>
            Force Sensor introduced in eV+. Configured by block number.
            </summary>
        </member>
        <member name="T:Ace.Communication.FirewireLedFlashPattern">
            <summary>
            A list of Adept FireWire node LED flash patterns.
            On UL-rated amps, the amber LED is wired to the red LED.
            So, for example, the old green/red flash at config time now appears as slow amber flash.
            One exception:	fast green flash gets mapped to amber SOLID ON.
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireLedFlashPattern.Off">
            <summary>
            LED is off.
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireLedFlashPattern.RedSolid">
            <summary>
            LED is solid red.
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireLedFlashPattern.RedFast">
            <summary>
            LED flashes red at a high rate.
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireLedFlashPattern.RedMedium">
            <summary>
            LED flashes red at a medium rate.
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireLedFlashPattern.RedSlow">
            <summary>
            LED flashes red at a slow rate.
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireLedFlashPattern.GreenSolid">
            <summary>
            LED is solid green.
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireLedFlashPattern.GreenFast">
            <summary>
            LED flashes green at a high rate.
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireLedFlashPattern.GreenMedium">
            <summary>
            LED flashes green at a medium rate.
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireLedFlashPattern.GreenSlow">
            <summary>
            LED flashes green at a slow rate.
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireLedFlashPattern.RedGreenFast">
            <summary>
            LED flashes red and green at a high rate.
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireLedFlashPattern.RedGreenMedium">
            <summary>
            LED flashes red and green at a medium rate.
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireLedFlashPattern.RedGreenSlow">
            <summary>
            LED flashes red and green at a slow rate.
            </summary>
        </member>
        <member name="T:Ace.Communication.FirewireNodeType">
            <summary>
            A list of Adept FireWire node types.
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireNodeType.Undefined">
            <summary>
            Undefined node, such as Firewire hub.
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireNodeType.SmartAmp">
            <summary>
            SmartAmp amplifier
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireNodeType.Smi6">
            <summary>
            sMI6 generic motion interface.
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireNodeType.SmartController">
            <summary>
            Smart controller (CX, CS)
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireNodeType.Sdio">
            <summary>
            sDIO digital I/O expansion.
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireNodeType.Aib">
            <summary>
            Adept robot: Adept Viper, Adept Cobra, AdeptOne, etc.
            </summary>
        </member>
        <member name="F:Ace.Communication.FirewireNodeType.MotionBlox">
            <summary>
            MotionBlox interface and amplifier.
            </summary>
        </member>
        <member name="T:Ace.Communication.FpgaDeviceProcessorType">
            <summary>
            Represents different processor types for Fpga devices
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaDeviceProcessorType.Unknown">
            <summary>
            Unknown processor type
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaDeviceProcessorType.Processor_8241">
            <summary>
            8240 - Used on legacy devices like the MB60R
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaDeviceProcessorType.Processor_5200">
            <summary>
            5200 - Used on newer devices like the eMB60R
            </summary>
        </member>
        <member name="T:Ace.Communication.FpgaType">
            <summary>
            Servo node FPGA type.
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaType.None">
            <summary>
            Unspecified node type
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaType.SmartAmp">
            <summary>
            SmartAmp.
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaType.Smi6">
            <summary>
            SMI-6
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaType.Aib">
            <summary>
            AIB
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaType.Dap">
            <summary>
            Generic DAP
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaType.Smai">
            <summary>
            SMAI (AdeptSix)
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaType.MotionBloxL">
            <summary>
            MotionBlox-40L, MotionBlox-60L
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaType.Seji">
            <summary>
            sEJI (AdeptOne)
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaType.MotionBlox10">
            <summary>
            MotionBlox-10
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaType.Sdai">
            <summary>
            SDAI (AdeptViper 650, 850)
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaType.MotionBloxR">
            <summary>
            MotionBlox-40R, MotionBlox-60R
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaType.Viper1700">
            <summary>
            Viper 1700, Yaskawa HP-20
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaType.Quattro">
            <summary>
            Quattro
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaType.CobraEAib">
            <summary>
            Cobra eAIB.
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaType.EMotionBlox4060N">
            <summary>
            Nachi robot
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaType.EMotionBlox40M">
            <summary>
            Hirata robot
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaType.MotionBloxREAib">
            <summary>
            MotionBloxR eAIB.
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaType.SmartControllerEX">
            <summary>
            SmartController EX firmware
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaType.EMotionBlox40L">
            <summary>
            eMotionBlox 40L firmware
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaType.EMotionBloxR">
            <summary>
            eMotionBlox-60R
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaType.EPMAI">
            <summary>
            ePMAI
            </summary>
            <remarks>
            This is a new sDAI with a 5200 processor and safety. This is to use in a PA-4 chassis to drive the Viper 1300, 1700 and the large Nachi.
            </remarks>
        </member>
        <member name="F:Ace.Communication.FpgaType.QuattroEAib">
            <summary>
            Quattro eAIB
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaType.HornetEAib">
            <summary>
            The hornet eAIB
            </summary>
        </member>
        <member name="F:Ace.Communication.FpgaType.eMotionBlox60N">
            <summary>
            The eMotionBlox-60N
            </summary>
        </member>
        <member name="T:Ace.Communication.KinematicType">
            <summary>
            Adept robot kinematic identifiers. Returned by ID(5,8)
            </summary>
        </member>
        <member name="F:Ace.Communication.KinematicType.Invalid">
            <summary>
            Invalid kinematic type.
            </summary>
        </member>
        <member name="F:Ace.Communication.KinematicType.AdeptScara">
            <summary>
            Adept SCARA robot.
            </summary>
        </member>
        <member name="F:Ace.Communication.KinematicType.Gantry56">
            <summary>
            5- or 6-axis Gantry (GNT)
            </summary>
        </member>
        <member name="F:Ace.Communication.KinematicType.Cobra">
            <summary>
            Adept 600/800 TT Robot Module
            </summary>
        </member>
        <member name="F:Ace.Communication.KinematicType.ExternalEncoder">
            <summary>
            External Encoder Module (ENC)
            </summary>
        </member>
        <member name="F:Ace.Communication.KinematicType.XyzTheta">
            <summary>
            X/Y/Z/Theta Device Module (XYZ)
            </summary>
        </member>
        <member name="F:Ace.Communication.KinematicType.Puma">
            <summary>
            5/6-axes PUMA Robot Module (PUM)
            </summary>
        </member>
        <member name="F:Ace.Communication.KinematicType.CoordinatedJoints">
            <summary>
            Joints Device Module (JTS)
            </summary>
        </member>
        <member name="F:Ace.Communication.KinematicType.EnhancedXyzTheta">
            <summary>
            Enhanced XYZ-Theta Robot Module (EXY)
            </summary>
        </member>
        <member name="F:Ace.Communication.KinematicType.EnhancedGantry56">
            <summary>
            Enhanced 5/6-axis Gantry Robot Module (EGN)
            </summary>
        </member>
        <member name="F:Ace.Communication.KinematicType.CoupledCartesian">
            <summary>
            Coupled-Axis, XYZ-Theta Robot Module (CAR)
            </summary>
        </member>
        <member name="F:Ace.Communication.KinematicType.XZStacker">
            <summary>
            XZ Stacker robot (XZ)
            </summary>
        </member>
        <member name="F:Ace.Communication.KinematicType.Scara">
            <summary>
            4- or 5-axis general SCARA Robot Module (SCA)
            </summary>
        </member>
        <member name="F:Ace.Communication.KinematicType.Delta">
            <summary>
            Delta Robot Module (DLT)
            </summary>
        </member>
        <member name="F:Ace.Communication.KinematicType.EnhancedPuma">
            <summary>
            Enhanced 5/6-axis PUMA Robot Module (EPU)
            </summary>
        </member>
        <member name="F:Ace.Communication.KinematicType.LinearModule">
            <summary>
            Linear-Module Robot Module (LM)
            </summary>
        </member>
        <member name="F:Ace.Communication.KinematicType.EnhancedLinearModule">
            <summary>
            Enhanced LMMV XYZ-Theta Robot Module (ELM)
            </summary>
        </member>
        <member name="F:Ace.Communication.KinematicType.SixAxisArticulated">
            <summary>
            Adept 6-Axis Robot Module (A6X)
            </summary>
        </member>
        <member name="F:Ace.Communication.KinematicType.ViperArticulated">
            <summary>
            Adept Viper Robot Module (VIP)
            </summary>
        </member>
        <member name="F:Ace.Communication.KinematicType.Quattro">
            <summary>
            Adept "Quattro" Robot Module
            </summary>
        </member>
        <member name="F:Ace.Communication.KinematicType.AdeptDelta">
            <summary>
            Adept Delta Style Robot Module
            </summary>
        </member>
        <member name="T:Ace.Communication.ProductType">
            <summary>
            Product type codes for Adept robots. These are returned by the ID(9,8) V+ function.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.AdeptOne">
            <summary>
            AdeptOne robot.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.AdeptThree">
            <summary>
            AdeptThree robot.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.Generic">
            <summary>
            Generic (non-Adept) robot product type.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.AdeptOneXL">
            <summary>
            AdeptOne XL robot product type.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.AdeptThreeXL">
            <summary>
            AdeptThree XL robot product type.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.i4Robot650">
            <summary>
            OAT i4-650 robot product type
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.i4Robot750">
            <summary>
            OAT i4-750 robot product type
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.i4Robot850">
            <summary>
            OAT i4-850 robot product type
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.Cobra600">
            <summary>
            Adept Cobra 600-mm reach robot product type.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.Cobra800">
            <summary>
            Adept Cobra 800-mm reach robot product type.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.Cobra350">
            <summary>
            Adept Cobra 350-mm reach robot product type.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.Cobra850">
            <summary>
            Adept Cobra 850-mm reach robot product type.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.Cobra450">
            <summary>
            Adept Cobra 450-mm reach robot product type.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.Cobra500">
            <summary>
            Adept Cobra 500-mm reach robot product type.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.Cobra650">
            <summary>
            Adept Cobra 650-mm reach robot product type.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.Quattro650">
            <summary>
            Adept Quattro 650-mm reach quad-parallel robot product type.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.Quattro800">
            <summary>
            Adept Quattro 800-mm reach quad-parallel robot product type.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.Hornet565">
            <summary>
            Hornet Delta 565
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.Hornet565Fixed">
            <summary>
            Hornet Delta 565 - Fixed platform
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.AdeptSix300">
            <summary>
            AdeptSix 300-mm reach robot product type.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.AdeptSix600">
            <summary>
            AdeptSix 600-mm reach robot product type.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.Viper650">
            <summary>
            Adept Viper 650-mm reach robot product type.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.Viper850">
            <summary>
            Adept Viper 850-mm reach robot product type.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.Viper1300">
            <summary>
            Adept Viper 1300-mm reach robot product type.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.Viper1700">
            <summary>
            Adept Viper 1700-mm reach robot product type.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.Viper1700D">
            <summary>
            Adept Viper 1700-mm reach robot product type, new revision.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.Viper700">
            <summary>
            Adept Viper 700 Nachi robot product type.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.Viper900">
            <summary>
            Adept Viper 900 Nachi robot product type.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.Viper1100">
            <summary>
            Adept Viper 1100 Nachi robot product type.
            </summary>
        </member>
        <member name="F:Ace.Communication.ProductType.Viper500">
            <summary>
            Adept Viper 500 Nachi robot product type.
            </summary>
        </member>
        <member name="T:Ace.Communication.ProgramStatus">
            <summary>
            V+ program status. Result of executing STATUS("program")
            </summary>
        </member>
        <member name="F:Ace.Communication.ProgramStatus.Invalid">
            <summary>
            Invalid program status value
            </summary>
        </member>
        <member name="F:Ace.Communication.ProgramStatus.NotExecuting">
            <summary>
            The program is not executing
            </summary>
        </member>
        <member name="F:Ace.Communication.ProgramStatus.NotDefined">
            <summary>
            The program is not defined
            </summary>
        </member>
        <member name="F:Ace.Communication.ProgramStatus.WriteInterlock">
            <summary>
            The program is write interlocked
            </summary>
        </member>
        <member name="F:Ace.Communication.ProgramStatus.NotExecutable">
            <summary>
            The program is not executable
            </summary>
        </member>
        <member name="F:Ace.Communication.ProgramStatus.ReadInterlock">
            <summary>
            The program is read interlocked
            </summary>
        </member>
        <member name="T:Ace.Communication.ServoCommand">
            <summary>
            Servo commands
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.HighPower">
            <summary>
            The high power
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.AmpEnable">
            <summary>
            The amp enable
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.BrakeRelease">
            <summary>
            The brake release
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.Drive">
            <summary>
            The drive
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.Search">
            <summary>
            The search
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.SetCollect">
            <summary>
            The set collect
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.ListCollect">
            <summary>
            The list collect
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.GetCollect">
            <summary>
            The get collect
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.SetTrigger">
            <summary>
            The set trigger
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.ExternalTrigger">
            <summary>
            The external trigger
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.SetOutputLevel">
            <summary>
            The set output level
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.ServoVersion">
            <summary>
            The servo version
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.AdjustPosition">
            <summary>
            The adjust position
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.SetPosition">
            <summary>
            The set position
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.RscIO">
            <summary>
            The RSC io
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.StopMotor">
            <summary>
            The stop motor
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.ConfigureFilter">
            <summary>
            The configure filter
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.BlinkLed">
            <summary>
            The blink led
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.WaveDispatch">
            <summary>
            The wave dispatch
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.WaveConfig">
            <summary>
            The wave configuration
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.WaveEnable">
            <summary>
            The wave enable
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.AnalogRead">
            <summary>
            The analog read
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.Slew">
            <summary>
            The slew
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.SetCommutationReference">
            <summary>
            The set commutation reference
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.Twang">
            <summary>
            The twang
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.GetAbsoluteEncoder">
            <summary>
            The get absolute encoder
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.ReadAddress">
            <summary>
            The read address
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.WriteAddress">
            <summary>
            The write address
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.GetOpcodeAttributes">
            <summary>
            The get opcode attributes
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.EventLog">
            <summary>
            The event log
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.SerialNumber">
            <summary>
            The serial number
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.FpgaVersion">
            <summary>
            The fpga version
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.RscCommand">
            <summary>
            The RSC command
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.SetAbsoluteEncoder">
            <summary>
            The set absolute encoder
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.NodeOsVersion">
            <summary>
            The node os version
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoCommand.NodeTime">
            <summary>
            The node time
            </summary>
        </member>
        <member name="T:Ace.Communication.ServoData">
            <summary>
            An enumeration of collectible servo data items.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.MaxTorque">
            <summary>
            Max Torque
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.DutyCycleLimit">
            <summary>
            The duty cycle limit
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.HarmonicDriveTorqueLimitCube">
            <summary>
            Harmonic Drive limit for the average cube torque.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.UnlatchedErrors">
            <summary>
            Unlatched error bit mask. See MotorUnlatchedErrorBits enumeration.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.LatchedErrors">
            <summary>
            Latched error bit mask. See MotorLatchedErrorBits enumeration.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.ServoStatus">
            <summary>
            Servo status bit mask. See MotorStatusBits enumeration.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.OutputLevel">
            <summary>
            Output level, typically a torque command between -32768 and 32767.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.CommandedVelocity">
            <summary>
            Commanded velocity, in counts/ms.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.VelocityError">
            <summary>
            Velocity error (commanded minus encoder), in counts/ms.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.EncoderVelocity">
            <summary>
            Actual velocity, in counts/ms.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.CommandedPosition">
            <summary>
            Commanded position, in counts.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.PositionError">
            <summary>
            Position error (commanded minus encoder), in counts.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.EncoderPosition">
            <summary>
            Actual position, in counts.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.IndexDelta">
            <summary>
            Index delta (last index position minus previous index position), in counts.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.LastMotionSettlingTime">
            <summary>
            The motor settling time, in milliseconds, for the last motion completed.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.PeakPositionError">
            <summary>
            Peak Position Error.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.PeakDutyCycle">
            <summary>
            The peak duty cycle value. Used in conjunction with DutyCycleLevel (2243)
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.CommandedAcceleration">
            <summary>
            Commanded acceleration, in counts/ms^2.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.VPlusCommand">
            <summary>
            V+ command code.
            <remarks>Valid commands are:
            <list type="bullet">
            <item>0: Current mode.	Arg: DAC output.</item>
            <item>1: Free mode.		Arg: DAC output.</item>
            <item>2: Position mode.	Arg: Scaled position command.</item>
            <item>3: Set position.	Arg: Scaled position.</item>
            <item>4: Amp command.	Arg: 1 to enable, 0 to disable.</item>
            <item>5: Cal mode.		Arg: None.</item>
            <item>7: Adjust position.	Arg: Scaled position offset.</item>
            <item>8: Clear latched errors.	Arg: Bit mask to clear.</item>
            <item>9: Drive motor.	Arg: Scaled position.</item>
            <item>0xF: NOP.			Arg: None.</item>
            <item>0x10: High power.	Arg: 1 to turn on, 0 to turn off.</item>
            <item>0x11: Brake rel.	Arg: 1 to release, 0 to engage.</item>
            <item>0x12: Velocity mode Arg: Target velocity.</item>
            </list>
            </remarks>
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.VPlusCommandArgument">
            <summary>
            V+ command argument.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.PeakTorque">
            <summary>
            Peak torque.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.AmpBusVoltage">
            <summary>
            High-voltage DC bus.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.AmpTemperature">
            <summary>
            Amplifier temperature (degrees C).
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.AmpACInputRmsVoltage">
            <summary>
            RMS input voltage to amplifier (volts).
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.DutyCycleLevel">
            <summary>
            Filtered duty-cycle metric, used to trigger duty-cycle errors if this value exceeds the threshold.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.EncoderAlarm">
            <summary>
            Encoder alarm
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.EncoderCommunicationError">
            <summary>
            Encoder communication error
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.EncoderTemperature">
            <summary>
            Encoder temperature (degrees C).
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.EStopStatus">
            <summary>
            E-stop status register.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.DCInputVoltage">
            <summary>
            DC control voltage (volts).
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.BaseBoardTemperature">
            <summary>
            Amplifier base-board temperature (per-amp, not per-motor, degrees C).
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.CurrentLoopOutput">
            <summary>
            The output of the 'PI' current loop.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.CurrentLoopPeakToPeakOutput">
            <summary>
            The peak output of the 'PI' current loop.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.BusEnergyFilter">
            <summary>
            Bus Energy Filter.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.PeakVelocity">
            <summary>
            Peak Velocity (cts/ms).
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.DutyCycleLevel2">
            <summary>
            Filtered duty-cycle metric, used to trigger duty-cycle errors if this value exceeds the threshold.
            This is used for the eV+ 2.3 or later that has three duty-cycle limit
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.ForceSensorForces">
            <summary>
            The force sensor forces
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.ForceSensorMoments">
            <summary>
            The force sensor moments
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.HarmonicDriveAverageTorque">
            <summary>
            Harmonic Drive average torque.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoData.HarmonicDriveLife">
            <summary>
            Harmonic Drive life usage.
            </summary>
        </member>
        <member name="T:Ace.Communication.ServoDataType">
            <summary>
            An enumeration of possible data types communicating with servo code.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoDataType.Single">
            <summary>
            Single-precision (32-bit) floating point number.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoDataType.Int32">
            <summary>
            Signed 32-bit integer.
            </summary>
        </member>
        <member name="F:Ace.Communication.ServoDataType.UInt32">
            <summary>
            Unsigned 32-bit integer.
            </summary>
        </member>
        <member name="T:Ace.Communication.VPlusLicense">
            <summary>
            V+ license numbers. Each V+ controller has a set
            of license bits in non-volatile storage controlling
            access to special features. By entering a password
            unique to the license and controller, a user can enable
            or disable these features. Passwords may be ordered from
            Adept field service.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.VPlusVersion11">
            <summary>
            V+ Version 11: 7 user tasks, SEE editor/debugger
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.VPlusExtensions">
            <summary>
            V+ Extensions: 28 user tasks, belt tracking/external encoder, multiple mechanisms (except multiple Adepts)
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.OemOption">
            <summary>
            OEM Option: Allows OEM keywords to be recognized.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.KinematicModules">
            <summary>
            Kinematic Modules.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.IntegratedMotionAndVision">
            <summary>
            Integrated Motion and Vision (required for ADV_CAL.V2).
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.Vision">
            <summary>
            Vision option.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.EnhancedKinematicModules">
            <summary>
            Enhanced Kinematic Modules.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.Aim23Aim30">
            <summary>
            AIM Versions 2.3 and 3.0.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.AimExtensions">
            <summary>
            AIM Extensions.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.AdeptRobot">
            <summary>
            Adept Robot.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.GemSecs">
            <summary>
            GEM and SECS-I/II Applications.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.AimApplications">
            <summary>
            AIM Applications (e.g. Palletware).
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.EnhancedTrajectory">
            <summary>
            Enhanced Trajectory Control (ALTER, configurable trajectory rate).
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.AdeptTcp">
            <summary>
            AdeptTCP/IP Protocol Access (automatically enabled).
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.AdeptNfs">
            <summary>
            AdeptNFS Client.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.AdeptFtp">
            <summary>
            AdeptFTP Client/Server.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.MultipleAdeptRobots">
            <summary>
            Multiple Adept Robots.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.ThirdPartyBoardSupport">
            <summary>
            Third-Party Board Support (VME only).
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.TeachMode">
            <summary>
            Teach Mode (formerly EN954 Safety Category 1)
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.TeachModeCategory3">
            <summary>
            Teach Mode Category 3 (formerly EN954 Safety Category 3)
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.AlternateServo">
            <summary>
            Alternate Servo Allocation (VME only).
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.FlexFeeder1">
            <summary>
            FlexFeeder #1.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.FlexFeeder2">
            <summary>
            FlexFeeder #2.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.AdeptWindows">
            <summary>
            AdeptWindows.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.EviVision">
            <summary>
            EVI Vision.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.Aim31Aim32Aim33">
            <summary>
            AIM Versions 3.1, 3.2, 3.3.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.VPlus12">
            <summary>
            V+ Version 12.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.VPlus13">
            <summary>
            V+ Version 13.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.DigitalWorkcell">
            <summary>
            Digital Workcell Simulation Mode.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.VPlus14">
            <summary>
            V+ Version 14.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.Hps">
            <summary>
            HPS Application.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.Aim4">
            <summary>
            AIM Version 4.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.VPlus15">
            <summary>
             V+ Version 15.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.AimNanoWare">
            <summary>
            AIM NanoWare.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.AimLabView">
            <summary>
            AIM LabView Interface.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.AimLaserWeld">
            <summary>
            AIM LaserWeld Interface.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.ActiveV">
            <summary>
            ActiveV+ Software.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.MultiTurnJ6">
            <summary>
            Continuous-Turn J6.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.VPlus16">
            <summary>
            V+ Version 16.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.AdeptCertifiedDeveloperApplication">
            <summary>
            Adept certified developer application (not currently used).
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.PlcServerApplication">
            <summary>
            PLC server application.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.AdeptDesktop4">
            <summary>
            Adept Desktop 4.0.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.AdeptAceMotion">
            <summary>
            ACE motion license.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.VPlus17">
            <summary>
            V+ Version 17.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.TcpServer">
            <summary>
            TCP server application.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.ForceJog">
            <summary>
            Force jog capability.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.ThreeAdeptRobots">
            <summary>
            Three Adept Robots.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.ThreeOrMoreBelts">
            <summary>
            P/N 09970-049 - "Three Or More Belts" and activate the belt inputs #3 and #4 on a SmartController EX
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.FieldServiceUtilities">
            <summary>
            eV+ field services utility
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.eSeriesStandard">
            <summary>
            The e-Series standard license
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.eSeriesProfessional">
            <summary>
            The e-Series professional license
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusLicense.sSeries">
            <summary>
            The e-Series license
            </summary>
        </member>
        <member name="T:Ace.Communication.VScanError">
            <summary>
            Source of error
            </summary>
        </member>
        <member name="F:Ace.Communication.VScanError.None">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:Ace.Communication.VScanError.ScanNotComplete">
            <summary>
            The scan process has not completed yet
            </summary>
        </member>
        <member name="F:Ace.Communication.VScanError.ErrorUnknow">
            <summary>
            Unknow error
            </summary>
        </member>
        <member name="F:Ace.Communication.VScanError.PingTimedOut">
            <summary>
            Operation timed-out.
            </summary>
        </member>
        <member name="F:Ace.Communication.VScanError.PingFailed">
            <summary>
            Ping Failed.
            </summary>
        </member>
        <member name="F:Ace.Communication.VScanError.NetworkUnplugged">
            <summary>
            The local network connection is down.
            </summary>
        </member>
        <member name="T:Ace.Communication.GuiText">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.AdeptController_CannotConnectToLegacyController">
            <summary>
              Looks up a localized string similar to Connection to controller is not supported..
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.AdeptController_ConnectionCanceled">
            <summary>
              Looks up a localized string similar to The connection attempt has been stopped..
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.AdeptController_ConnectionTimeOut">
            <summary>
              Looks up a localized string similar to The connection with the controller has timed-out.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.AdeptController_NoTaskForServer">
            <summary>
              Looks up a localized string similar to No V+ task was available to launch the V+ server.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.AdeptController_NotCommunicating">
            <summary>
              Looks up a localized string similar to Not communicating.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.AdeptController_ResettingServo">
            <summary>
              Looks up a localized string similar to Resetting V+ servo nodes.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.AdeptController_StartCommunicationsMessage_CheckForServer">
            <summary>
              Looks up a localized string similar to Checking for ACE server on controller.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.AdeptController_StartCommunicationsMessage_CheckingAceFile">
            <summary>
              Looks up a localized string similar to Checking for ACE V+ file.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.AdeptController_StartCommunicationsMessage_CreatingSocket">
            <summary>
              Looks up a localized string similar to Creating network socket.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.AdeptController_StartCommunicationsMessage_InitializingRobotSystemVariables">
            <summary>
              Looks up a localized string similar to Reading system robot servo parameters.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.AdeptController_StartCommunicationsMessage_InitializingRobotVariables">
            <summary>
              Looks up a localized string similar to Reading servo parameters for robot &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.AdeptController_StartCommunicationsMessage_LoadingAce">
            <summary>
              Looks up a localized string similar to Loading ACE file on controller.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.AdeptController_StartCommunicationsMessage_PingingController">
            <summary>
              Looks up a localized string similar to Pinging controller address.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.AdeptController_StartCommunicationsMessage_StartAceOnTask">
            <summary>
              Looks up a localized string similar to Starting ACE on task {0}.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.AdeptController_StartCommunicationsMessage_UpdatingAce">
            <summary>
              Looks up a localized string similar to Updating ACE file on controller.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.AdeptController_StartupError">
            <summary>
              Looks up a localized string similar to V+ server startup error.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.AdeptController_VPlus_AlreadyConnected">
            <summary>
              Looks up a localized string similar to The controller is already connected to a server at {0}.{1}Only one connection is allowed at any given time..
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.AdeptControllerImpl_CannotChangeEncoderConnection">
            <summary>
              Looks up a localized string similar to eV+ encoder count must be changed by editing the configuration file.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.AxisGadget_Encoder_ToString">
            <summary>
              Looks up a localized string similar to Encoder {0}.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.AxisGadget_ToString">
            <summary>
              Looks up a localized string similar to Robot {0} Motor {1}.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.DigitalIOGadget_ToString">
            <summary>
              Looks up a localized string similar to Block:{0}.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.Exception_ControllerCat0AndManualMode">
            <summary>
              Looks up a localized string similar to Cannot start V+ server programs. Controller is in manual mode with safety category 0 license..
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.Exception_CouldNotFindNodeOnNetwork">
            <summary>
              Looks up a localized string similar to The servo node was not found on the FireWire network..
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.Exception_CouldNotFindNodeOnNetworkAfterReboot">
            <summary>
              Looks up a localized string similar to The servo node was not found on the FireWire network after being rebooted..
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.Firewire_Warning_DuplicateEncoderNumbersDetected">
            <summary>
              Looks up a localized string similar to Duplicate belt encoder nodes were detected on the Firewire network. Check the controller configuration..
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.Firewire_Warning_eAIB_MoreThanOneRobotGadgetDetected">
            <summary>
              Looks up a localized string similar to Multiple robot gadgets were detected on the e-Series Firewire node..
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.Firewire_Warning_eAIB_UnexpectedNodeType">
            <summary>
              Looks up a localized string similar to e-Series Firewire node type mismatch detected. An eAIB node type is expected..
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.Firewire_Warning_eAIB_UnexpectedRobotNodeNumber">
            <summary>
              Looks up a localized string similar to e-Series Firewire node number appears to be invalid. Robot number should be &apos;1&apos;. Check the controller configuration..
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.Firewire_Warning_SVEX_DuplicateRobotGadgetsDetected">
            <summary>
              Looks up a localized string similar to Multiple robot gadgets were detected on the SmartController Firewire network with the same robot number..
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FireWireGadget_NotConfigured">
            <summary>
              Looks up a localized string similar to Not configured ({0}).
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FirewireGadgetType_DigitalInput">
            <summary>
              Looks up a localized string similar to Digital Input.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FirewireGadgetType_DigitalOutput">
            <summary>
              Looks up a localized string similar to Digital Output.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FirewireGadgetType_ForceSensor">
            <summary>
              Looks up a localized string similar to Force Sensor.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FirewireGadgetType_Info">
            <summary>
              Looks up a localized string similar to Info.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FirewireGadgetType_Motor">
            <summary>
              Looks up a localized string similar to Motor.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FirewireGadgetType_Robot">
            <summary>
              Looks up a localized string similar to Robot.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.ForceSensorGadget_ToString">
            <summary>
              Looks up a localized string similar to :{0}.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FpgaType_Aib">
            <summary>
              Looks up a localized string similar to AIB-Cobra.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FpgaType_CobraEAib">
            <summary>
              Looks up a localized string similar to Cobra eAIB.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FpgaType_Dap">
            <summary>
              Looks up a localized string similar to Baseline &quot;Neutral&quot; - DAP-MPC Platforms).
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FpgaType_EMotionBlox4060N">
            <summary>
              Looks up a localized string similar to eMotionBlox-40/60N.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FpgaType_EMotionBlox40L">
            <summary>
              Looks up a localized string similar to eMotionBlox-40L.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FpgaType_eMotionBlox60N">
            <summary>
              Looks up a localized string similar to eMotionBlox-60N.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FpgaType_EMotionBloxR">
            <summary>
              Looks up a localized string similar to eMotionBlox-40/60R.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FpgaType_HornetEAib">
            <summary>
              Looks up a localized string similar to Hornet eAIB.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FpgaType_MotionBlox10">
            <summary>
              Looks up a localized string similar to MotionBlox-10.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FpgaType_MotionBloxL">
            <summary>
              Looks up a localized string similar to MotionBlox-40/60L.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FpgaType_MotionBloxR">
            <summary>
              Looks up a localized string similar to MotionBlox-40/60R.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FpgaType_MotionBloxREAib">
            <summary>
              Looks up a localized string similar to MotionBloxR eAIB.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FpgaType_None">
            <summary>
              Looks up a localized string similar to Unspecified node type.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FpgaType_Quattro">
            <summary>
              Looks up a localized string similar to Quattro AIB.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FpgaType_QuattroEAib">
            <summary>
              Looks up a localized string similar to Quattro eAIB.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FpgaType_Sdai">
            <summary>
              Looks up a localized string similar to Viper-sDAI.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FpgaType_Seji">
            <summary>
              Looks up a localized string similar to Legacy Robots - sEJI.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FpgaType_Smai">
            <summary>
              Looks up a localized string similar to SixAxis - sMAI.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FpgaType_SmartAmp">
            <summary>
              Looks up a localized string similar to SmartAmp.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FpgaType_SmartControllerEX">
            <summary>
              Looks up a localized string similar to SmartController EX.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FpgaType_Smi6">
            <summary>
              Looks up a localized string similar to Smart MI6.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.FpgaType_Viper1700">
            <summary>
              Looks up a localized string similar to Viper 1700(D)-sDAI.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.ProgramStackHeader">
            <summary>
              Looks up a localized string similar to V+ Program Stack for task {0}:.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.ProgramStackStep">
            <summary>
              Looks up a localized string similar to {0}, Step {1}.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.ServoNode_InvalidServoVersion_UpgradeVPlus">
            <summary>
              Looks up a localized string similar to V+ Version must be upgraded to 17.1 or later before the servo can be updated. Please upgrade then retry..
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.ServoNode_Unknown">
            <summary>
              Looks up a localized string similar to Unknown.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.TcpServer_CannotDetectAddress">
            <summary>
              Looks up a localized string similar to Cannot detect controller at &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.TcpServer_LinkNotConnected">
            <summary>
              Looks up a localized string similar to ActiveV connection not established.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.TextUtil_IncorrectFormat">
            <summary>
              Looks up a localized string similar to The text was not in the expected format.{0}The expected decimal separator is: &apos;{1}&apos;{0}The expected group separator is: &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.TextUtil_TooFewValues">
            <summary>
              Looks up a localized string similar to Too few values. Expected at least {0}.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.TextUtil_TooManyValues">
            <summary>
              Looks up a localized string similar to Too many values. Expected at most {0}.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.VpLinkErrorAsynch">
            <summary>
              Looks up a localized string similar to Error {0} at {1}.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.VpLinkErrorError">
            <summary>
              Looks up a localized string similar to Could not get error information ( {0} )..
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.VpLinkErrorIpAddress">
            <summary>
              Looks up a localized string similar to Invalid IP address.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.VpLinkErrorLock">
            <summary>
              Looks up a localized string similar to Cannot get access to communication channel..
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.VpLinkErrorTimeout">
            <summary>
              Looks up a localized string similar to Timeout waiting for controller.
            </summary>
        </member>
        <member name="P:Ace.Communication.GuiText.VpLinkErrorVariable">
            <summary>
              Looks up a localized string similar to Error retrieving variable.
            </summary>
        </member>
        <member name="T:Ace.Communication.Link.LogMessageEventArgs">
            <summary>
            Class used for the Log message events.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.LogMessageEventArgs.Error">
            <summary>
            The exception associated with the log event.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.LogMessageEventArgs.Message">
            <summary>
            Message associated with the log event.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.LogMessageEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.Link.LogMessageEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.LogMessageEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.Link.LogMessageEventArgs"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Ace.Communication.Link.LogMessageEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.Link.LogMessageEventArgs"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Ace.Communication.Link.AsynchronousEventArgs">
            <summary>
            Class used for the AsynchError, IOEvent and ProgramStatusChanged events.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.AsynchronousEventArgs.Board">
            <summary>
            Not used. Legacy from VME architecture.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.AsynchronousEventArgs.Task">
            <summary>
            Number of task that is sending the message.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.AsynchronousEventArgs.ErrorCode">
            <summary>
            Error code signaled (if applicable to message).
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.AsynchronousEventArgs.Message">
            <summary>
            The message associated with the event.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.AsynchronousEventArgs.Status">
            <summary>
            Alias to error code.
            </summary>
        </member>
        <member name="T:Ace.Communication.Link.COMExceptionEventArgs">
            <summary>
            Class used to report COM Exceptions detected by ActiveV
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.COMExceptionEventArgs.errorCode">
            <summary>
            The error code
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.COMExceptionEventArgs.ErrorCode">
            <summary>
            Gets the error code .
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.COMExceptionEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.Link.COMExceptionEventArgs"/> class.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="T:Ace.Communication.Link.FileEventArgs">
            <summary>
            Class to pass arguments for file related events.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.FileEventArgs.SourcePath">
            <summary>
            Path of file affected. Source file for messages that have source
            and destination (e.g.: fcopy). Source and Destination have the
            same value for messages with only 1 file (e.g.: fdelete).
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.FileEventArgs.DestinationPath">
            <summary>
            Path of file affected. Destination file for messages that have
            source and destination (e.g.: fcopy). Source and Destination have
            the same value for messages with only 1 file (e.g.: fdelete).
            </summary>
        </member>
        <member name="T:Ace.Communication.Link.ModuleAssignmentEventArgs">
            <summary>
            Class to pass arguments for module assignment operations.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.ModuleAssignmentEventArgs.ModuleName">
            <summary>
            The name of the module. 
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.ModuleAssignmentEventArgs.ProgramName">
            <summary>
            The name of the program affected. 
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.ModuleAssignmentEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.Link.ModuleAssignmentEventArgs"/> class.
            </summary>
            <param name="module">The module.</param>
            <param name="program">The program.</param>
        </member>
        <member name="T:Ace.Communication.Link.ProgramEventArgs">
            <summary>
            Class to pass arguments for program related events.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ProgramEventArgs.mProgramName">
            <summary>
            The name of the program affected
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.ProgramEventArgs.ProgramName">
            <summary>
            The name of the program affected. 
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ProgramEventArgs.mNewProgramName">
            <summary>
            The new program name
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.ProgramEventArgs.NewProgramName">
            <summary>
            The name of the program affected. 
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.ProgramEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.Link.ProgramEventArgs"/> class.
            </summary>
            <param name="program">The program.</param>
        </member>
        <member name="M:Ace.Communication.Link.ProgramEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.Link.ProgramEventArgs"/> class.
            </summary>
            <param name="program">The program.</param>
            <param name="newProgram">The new program.</param>
        </member>
        <member name="T:Ace.Communication.Link.VariableDefinition">
            <summary>
            Variable Definition class used to exchange a variable between multiple
            controls in ADT.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.VariableDefinition.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.VariableDefinition.#ctor(System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="type">Type of the variable</param>
            <param name="name">Name of the variable</param>
        </member>
        <member name="M:Ace.Communication.Link.VariableDefinition.#ctor(System.Int32,System.String,System.Int32,System.String,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="type">Type of the variable</param>
            <param name="name">Name of the variable</param>
            <param name="task">Task where the variable is used</param>
            <param name="program">Program using the variable</param>
            <param name="value">Data value as an object</param>
        </member>
        <member name="F:Ace.Communication.Link.VariableDefinition.NotSpecifiedTask">
            <summary>
            Specify the value of the Task not used
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VariableDefinition.Type">
            <summary>
            Get / Set the type of the variable. Use the type defined in Adept.Robot.VpLink
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VariableDefinition.Name">
            <summary>
            Get / Set the name of the variable
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VariableDefinition.Program">
            <summary>
            Get / Set the program using the variable. 
            For global, set this value to ""
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VariableDefinition.Task">
            <summary>
            Get / Set the task using this variable
            This can be set to mNotSpecifiedTask in case of not used
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VariableDefinition.ConnectionString">
            <summary>
            Gets or sets the connection string to the controller the variable belongs to
            </summary>
            <value>The link.</value>
        </member>
        <member name="P:Ace.Communication.Link.VariableDefinition.Value">
            <summary>
            Get / Set the value of the variable
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VariableDefinition.Description">
            <summary>
            Description of the variable
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VariableDefinition.UserDescription">
            <summary>
            Description of the variable
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VariableDefinition.ConnectionIdentifier">
            <summary>
            Unique string identifying the connection
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VariableDefinition.RobotName">
            <summary>
            Gets or sets the name of the robot associated with the variable (location or precision point)
            </summary>
            <value>
            The name of the robot.
            </value>
        </member>
        <member name="P:Ace.Communication.Link.VariableDefinition.DisplayMode">
            <summary>
            Gets or sets the display mode associated with the variable (location or precision point)
            </summary>
            <value>
            The name of the robot.
            </value>
        </member>
        <member name="P:Ace.Communication.Link.VariableDefinition.IsDefined">
            <summary>
            Gets or sets a value indicating whether the variable is defined.
            </summary>
            <value>
            <c>true</c> if this instance is defined; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Ace.Communication.Link.VariableDefinition.ToString">
            <summary>
            Format the object to a text readable element
            </summary>
            <returns>string who describe the object</returns>
        </member>
        <member name="T:Ace.Communication.Link.VPConnectionType">
            <summary>
            Type of connection.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPConnectionType.None">
            <summary>
            Not connected
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPConnectionType.Ethernet">
            <summary>
            Connected via Ethernet link.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPConnectionType.Serial">
            <summary>
            Connected via RS-232 serial link.
            </summary>
        </member>
        <member name="T:Ace.Communication.Link.VPExceptionType">
            <summary>
            Source of error
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPExceptionType.None">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPExceptionType.Com">
            <summary>
            Source is a COM exception.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPExceptionType.Status">
            <summary>
            Source is a negative status return code.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPExceptionType.Internal">
            <summary>
            Source is some validation before ActiveV call.
            </summary>
        </member>
        <member name="T:Ace.Communication.Link.VPException">
            <summary>
            New exception class that can be thrown by functions of this VpLink.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.WatchPoint">
            <summary>
            Watch point changed.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.Breakpoint">
            <summary>
            Breakpoint hit.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.NotCompleted">
            <summary>
            Operation did not complete.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.Success">
            <summary>
            Operation successfully completed.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.IllegalMonitorCommand">
            <summary>
            Command sent is not recognized.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.ProgramNotExecutable">
            <summary>
            An error in the program prevents its execution.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.ProgramInterlocked">
            <summary>
            Program cannot be modified because it is currently executing.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.ProgramAlreadyExists">
            <summary>
            Cannot create a new program with the same name as an existing program.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.InvalidWhenProgramTaskActive">
            <summary>
            Operation cannot be performed on a task that has an active program.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.ProgramTaskNotActive">
            <summary>
            Operation cannot be performed on a task with no program assigned.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.ProgramTaskNotInUse">
            <summary>
            Operation cannot be performed on a task with no program assigned.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.LineTooLong">
            <summary>
            Program line is longer than maximum allowed line.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.InvalidWhenProgramOnStack">
            <summary>
            Operation on program cannot be done while program is on stack.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.Aborted">
            <summary>
            Aborted.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.UndefinedValue">
            <summary>
            Undefined value.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.IllegalAssignment">
            <summary>
            Invalid syntax.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.IllegalArrayIndex">
            <summary>
            Illegal array index.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.UndefinedProgramOrVariableName">
            <summary>
            Request for a variable or program that does not exists.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.BranchingToUndefinedLabel">
            <summary>
            Goto to a label that cannot be found in program.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.StringVariableOverflow">
            <summary>
            The string variable overflow
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.UndefinedValueInThisContext">
            <summary>
            Trying to set an AUTO variable from SET?.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.CantInterpretLine">
            <summary>
            A syntax error prevents proper understanding of the line.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.UnexpectedTextAtEndOfLine">
            <summary>
            The line makes sense up to a point where unexpected characters are found.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.UnknownInstruction">
            <summary>
            Unknown instruction.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.AmbiguousName">
            <summary>
            Name can resolved to many different commands.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.MissingArgument">
            <summary>
            Trying to call an operation without all the required arguments.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.ReservedWordIllegal">
            <summary>
            The word used is reserved by V+.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.IllegalExpressionSyntax">
            <summary>
            Illegal expression syntax.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.MissingQuoteMark">
            <summary>
            A string is not closed.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.DuplicateStatementLabel">
            <summary>
            The duplicate statement label
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.VariableTypeMismatch">
            <summary>
            Trying to assign to a variable a value of a different type.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.AttemptToRedefineVariableType">
            <summary>
            Attempt to redefine variable type*: variable_name
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.MisplacedDeclarationStatement">
            <summary>
            Declarations can only be placed at beginning of a program.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.ControlStructureError">
            <summary>
            A loop or conditional is not closed by a corresponding end.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.AmbiguousAutoInvalid">
            <summary>
            Invalid AUTO usage.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.FileAlreadyExists">
            <summary>
            File already exists.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.NonexistentFile">
            <summary>
            Non-existent file.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.DeviceFull">
            <summary>
            No more space on device.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.SubdirectoryInUse">
            <summary>
            Subdirectory in use.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.CompModeDisabled">
            <summary>
            COMP mode is disabled (ex pendant not in COMP mode).
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.OptionNotInstalled">
            <summary>
            The option not installed.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.MissingValue">
            <summary>
            One value expected but none returned.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.TooManyValues">
            <summary>
            One value expected but 2 or more returned.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.InvalidArgument">
            <summary>
            An invalid argument was passed.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.TimedOut">
            <summary>
            Operation timed-out.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.NetworkUnplugged">
            <summary>
            The local network connection is down.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPException.CantLock">
            <summary>
            Could not get exclusive access. Mutex timed-out.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.VPException.#ctor(System.String,Ace.Communication.Link.VPExceptionType,System.Int32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Error message</param>
            <param name="type">Type of error</param>
            <param name="errorCode">Numeric error code.</param>
            <param name="closeRequested">Delayed close requested?</param>
        </member>
        <member name="M:Ace.Communication.Link.VPException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.VPException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Message passed to base Exception
            constructor.</param>
        </member>
        <member name="M:Ace.Communication.Link.VPException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Message passed to base Exception
            constructor.</param>
            <param name="innerException">Passed to Exception constructor.</param>
        </member>
        <member name="M:Ace.Communication.Link.VPException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Passed to Exception constructor.</param>
            <param name="context">Passed to Exception constructor.</param>
        </member>
        <member name="M:Ace.Communication.Link.VPException.#ctor(System.String,Ace.Communication.Link.VPExceptionType,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Error message</param>
            <param name="type">Type of error</param>
            <param name="errorCode">Numeric error code.</param>
        </member>
        <member name="M:Ace.Communication.Link.VPException.#ctor(System.Int32,Ace.Communication.Link.ActiveVLink)">
            <summary>
            Constructor for classes outside of VpLink.
            </summary>
            <param name="errorCode">Status code returned by a V+ command.</param>
            <param name="source">VpLink that is the source of this error (
            to get error string).</param>
        </member>
        <member name="M:Ace.Communication.Link.VPException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization writer.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Ace.Communication.Link.VPException.Type">
            <summary>
            The type of error.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPException.ErrorCode">
            <summary>
            Numeric error code (either an Adept status code or
            a COM error code).
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPException.CloseRequested">
            <summary>
            True if this is a COM error and a delayed close was queued.
            </summary>
        </member>
        <member name="T:Ace.Communication.Link.VPFileInfo">
            <summary>
            Simple class for the return of FDirectory.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.VPFileInfo.#ctor(System.String,System.Int32,System.Int32,System.DateTime)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPFileInfo.Name">
            <summary>
            Name of file.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPFileInfo.Attributes">
            <summary>
            Flags of file attributes.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPFileInfo.Size">
            <summary>
            File size (in blocks for V+, bytes for eV+).
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPFileInfo.Date">
            <summary>
            Date of last modification of file.
            </summary>
        </member>
        <member name="T:Ace.Communication.Link.VPFreeMemory">
            <summary>
            Simple class for the return of Free.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.VPFreeMemory.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPFreeMemory.Program">
            <summary>
            Percentage of free program memory.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPFreeMemory.Graphics">
            <summary>
            Percentage of free graphic memory.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPFreeMemory.Vision">
            <summary>
            Percentage of free vision memory.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPFreeMemory.Models">
            <summary>
            Percentage of free vision model memory.
            </summary>
        </member>
        <member name="T:Ace.Communication.Link.ActiveVLink">
            <summary>
            Wrapper class around ActiveV to make it easier to use.
            </summary>
        </member>
        <member name="E:Ace.Communication.Link.ActiveVLink.AsynchronousError">
            <summary>
            Event fired when the ActiveV2.Communication object fires a
            OnAsynchError event.
            </summary>
        </member>
        <member name="E:Ace.Communication.Link.ActiveVLink.ProgramOutput">
            <summary>
            Event fired when the ActiveV2.Communication object fires a
            OnProgramOutput event.
            </summary>
        </member>
        <member name="E:Ace.Communication.Link.ActiveVLink.ProgramStatusChange">
            <summary>
            Event fired when the ActiveV2.Communication object fires a
            OnProgramStatusChange event.
            </summary>
        </member>
        <member name="E:Ace.Communication.Link.ActiveVLink.ReadPosted">
            <summary>
            Event fired when the ActiveV2.Communication object fires a
            OnReadPosted event.
            </summary>
        </member>
        <member name="E:Ace.Communication.Link.ActiveVLink.ComExceptionDetected">
            <summary>
            Event indicating a COM exception was detected
            </summary>
        </member>
        <member name="E:Ace.Communication.Link.ActiveVLink.Closed">
            <summary>
            Event fired when the connection is closed.
            </summary>
        </member>
        <member name="E:Ace.Communication.Link.ActiveVLink.Closing">
            <summary>
            Event fired just before the connection is closed.
            Will only happen on a clean close, a close because of
            error will not fire this event.
            </summary>
        </member>
        <member name="E:Ace.Communication.Link.ActiveVLink.Opened">
            <summary>
            Event fired when the connection is successfully opened.
            </summary>
        </member>
        <member name="E:Ace.Communication.Link.ActiveVLink.Zeroed">
            <summary>
            Event fired when the Zero function is successfully executed.
            </summary>
        </member>
        <member name="E:Ace.Communication.Link.ActiveVLink.ZeroedWithStatus">
            <summary>
            Event fired when the Zero function is executed and provides Status.  
            Status will return 1 for success and error number for error.
            </summary>
        </member>
        <member name="E:Ace.Communication.Link.ActiveVLink.DirectoryCreated">
            <summary>
            Event fired when the FDirectoryC function is successfully
            executed. SourcePath and DestinationPath will both be the
            name of the new directory.
            </summary>
        </member>
        <member name="E:Ace.Communication.Link.ActiveVLink.DirectoryDeleted">
            <summary>
            Event fired when the FDirectoryD function is successfully
            executed. SourcePath and DestinationPath will both be the
            name of the delete directory.
            </summary>
        </member>
        <member name="E:Ace.Communication.Link.ActiveVLink.FileCopied">
            <summary>
            Event fired when the FCopy function is successfully executed.
            SourcePath will contain the path for the source file and
            DestinationPath the path for the destination file.
            </summary>
        </member>
        <member name="E:Ace.Communication.Link.ActiveVLink.FileRenamed">
            <summary>
            Event fired when the FRename function is successfully executed.
            SourcePath will contain the previous name of the file and
            DestinationPath the new name.
            </summary>
        </member>
        <member name="E:Ace.Communication.Link.ActiveVLink.FileDeleted">
            <summary>
            Event fired when the FDelete function is successfully executed.
            SourcePath and DestinationPath will both contain the name of
            the deleted file.
            </summary>
        </member>
        <member name="E:Ace.Communication.Link.ActiveVLink.FileCreated">
            <summary>
            Event fired when something creates a new file (e.g. the 
            Store* functions ). SourcePath and DestinationPath will both 
            contain the name of the new file.
            </summary>
        </member>
        <member name="E:Ace.Communication.Link.ActiveVLink.ProgramDeleted">
            <summary>
            Event fired when a program is deleted from memory.
            </summary>
        </member>
        <member name="E:Ace.Communication.Link.ActiveVLink.ProgramRenamed">
            <summary>
            Event fired when a program is renamed.
            </summary>
        </member>
        <member name="E:Ace.Communication.Link.ActiveVLink.ModuleAssigned">
            <summary>
            Event fired when a program is assigned to a module.
            </summary>
        </member>
        <member name="E:Ace.Communication.Link.ActiveVLink.LogMessage">
            <summary>
            Event fired when a program is assigned to a module.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.LookupErrorString">
            <summary>
            Gets or sets the method used to look up error strings.
            </summary>
            <value>
            The lookup method
            </value>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            <c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.#ctor">
            <summary>
            Constructor. Basic setup.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.#ctor(System.Boolean)">
            <summary>
            Constructor. Basic setup.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Dispose(System.Boolean)">
            <summary>
            Destructor.
            </summary>
            <param name="isDisposing">True if called by Dispose.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Initialize">
            <summary>
            Initializing the VpLink object
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.HandleActiveVException(ActiveV.ActiveVException)">
            <summary>
            Internal utility function to rethrow ActiveV exceptions with a
            specific type and the error message.
            </summary>
            <param name="pE">The source exception</param>
            <returns>The new exception to throw</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.HandleStatus(System.Int32)">
            <summary>
            Internal utility function to throw an exception in case of 
            error status return.
            </summary>
            <param name="pStatus">The status to verify</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.HandleStatus(System.Int32,System.Int32)">
            <summary>
            Internal utility function to throw an exception in case of
            error status return.
            </summary>
            <param name="pStatus">The status to verify</param>
            <param name="vCode">The variable portion of the error code.</param>
            <exception cref="T:Ace.Communication.Link.VPException"></exception>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.SetupOnConnection">
            <summary>
            Some setup to perform on connection. Not in Open because
            must also be in EraseBios.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.SyncWithController">
            <summary>
            Synchronizes with controller.
            We need to ensure the controller and the PC are in sync. The controller can sometimes
            take a long time to respond to an ID command and the responses can actually buffere up.
            This ensures we get a specific / unique response so we are not getting responses to previous
            requests.
            </summary>
            <exception cref="T:System.Runtime.InteropServices.COMException">Synchronization token not found</exception>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.SetupAbortThread">
            <summary>
            Setups the abort thread.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.MakeContext(System.Int32,System.String)">
            <summary>
            Automatically builds the context portion of a variable
            reference (@task:program).
            </summary>
            <param name="pTask">Task or -1 for no task</param>
            <param name="pProgram">program or empty string.</param>
            <returns>The context, which can be empty.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.WrapFileName(System.String)">
            <summary>
            If current os supports names with spaces, we must surround with
            quotes in case spaces in name. For others quotes not support so
            do not add them.
            </summary>
            <param name="name">Name to modify</param>
            <returns>Modified name</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.OnAsynchError(System.Int32,System.Int32,System.Int32)">
            <summary>
            Internal event-handler for the ActiveV2.Communication object
            OnAsynchError event. We re-direct to out equivalent event.
            </summary>
            <param name="pBoard">??</param>
            <param name="pTask">??</param>
            <param name="pErrorCode">Code for error that happened.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.OnProgramOutput(System.Int32,System.Int32)">
            <summary>
            Internal event-handler for the ActiveV2.Communication object
            OnProgramOutput event. We re-direct to our equivalent event.
            </summary>
            <param name="pBoard">To pass to GetStringEx</param>
            <param name="pTask">To pass to GetStringEx</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.OnProgramStatusChange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Internal event-handler for the ActiveV2.Communication object
            OnProgramStatusChange event. We re-direct to our equivalent event.
            </summary>
            <param name="pBoard">Board of origin of status change.</param>
            <param name="pTask">Task that changed status.</param>
            <param name="pStatus">New program status.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.OnReadPosted(System.Int32,System.Int32)">
            <summary>
            Internal event-handler for the ActiveV2.Communication object
            OnReadPosted event. We re-direct to our equivalent event.
            </summary>
            <param name="pBoard">To pass to SendStringEx</param>
            <param name="pTask">To pass to SendStringEx</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.OnCOMException(System.Int32)">
            <summary>
            Report that a COM exception has been detected.
            </summary>
            <param name="code">The exception code.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.OnClosed">
            <summary>
            Internal function to call to fire the Closed event.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.OnClosing">
            <summary>
            Internal function to call to fire the Closing event.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.OnOpened">
            <summary>
            Internal function to call to fire the Opened event.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.OnZeroed">
            <summary>
            Internal function to call to fire the Zeroed event.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.OnZeroedWithStatus(System.Int32)">
            <summary>
            Internal function to call to fire the Zeroed with Status event.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.OnDirectoryCreated(System.String)">
            <summary>
            Internal function to call to fire the DirectoryCreated event.
            </summary>
            <param name="pPath">Name of new directory.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.OnDirectoryDeleted(System.String)">
            <summary>
            Internal function to call to fire the DirectoryDeleted event.
            </summary>
            <param name="pPath">Name of new directory.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.OnFileCopied(System.String,System.String)">
            <summary>
            Internal function to call to fire the FileCopied event.
            </summary>
            <param name="pSourcePath">Source file name</param>
            <param name="pDestinationPath">Dest. file name</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.OnFileRenamed(System.String,System.String)">
            <summary>
            Internal function to call to fire the FileRenamed event.
            </summary>
            <param name="pOldName">Old file name</param>
            <param name="pNewName">New file name</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.OnFileDeleted(System.String)">
            <summary>
            Internal function to call to fire the FileDeleted event.
            </summary>
            <param name="pPath">Name of deleted file.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.OnFileCreated(System.String)">
            <summary>
            Internal function to call to fire the FileCreated event.
            </summary>
            <param name="pPath">Name of created file.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.OnProgramDeleted(System.String)">
            <summary>
            Called when a program is deleted.
            </summary>
            <param name="program">The program.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.OnProgramRenamed(System.String,System.String)">
            <summary>
            Called when a program is renamed.
            </summary>
            <param name="pOldName">The old name of the program.</param>
            <param name="pNewName">The new name of the program.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.OnModuleAssigned(System.String,System.String)">
            <summary>
            Called when a program is assigned to a module.
            </summary>
            <param name="module">The module program.</param>
            <param name="program">The program name.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.OnLogMessage(System.String)">
            <summary>
            Called when a message should be logged.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.OnLogMessage(System.String,System.Exception)">
            <summary>
            Called when a message should be logged.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.StringsSupported">
            <summary>
            Are string variables supported by the connected system?
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.LocationsSupported">
            <summary>
            Are location variables supported by the connected system?
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.ParametersSupported">
            <summary>
            Are program parameters supported by the connected system?
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.FileSizeInKilobytes">
            <summary>
            If true, file sizes are reported in kilobytes (eV+).
            If false they are in blocks (V+).
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.LongFileNamesSupported">
            <summary>
            Returns true for eV+, false for others (V+,MicroV+).
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.ESeriesSupport">
            <summary>
            Gets a value indicating whether the version of V+ supports eSeries robots
            </summary>
            <value>
              <c>true</c> if V+ supports eSeries robots; otherwise, <c>false</c>.
            </value>
            <remarks>
            Support was added in eV+ 2.2 A9 
            </remarks>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.IsOnline">
            <summary>
            Returns the connection status.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.NumberOfRobots">
            <summary>
            Returns the number of robots configured on the controller
            or 0 if not connected.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Abort(System.Int32)">
            <summary>
            Wrapper for Programs.Abort
            </summary>
            <param name="task">Number of task to abort</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Calibrate">
            <summary>
            Interface to the Calibrate command.
            </summary>
            <returns>Failure/Success return code.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.ChangeLine(System.Int32,System.String@)">
            <summary>
            Wrapper around Editor.ChangeLine to modify the text for a program line.
            </summary>
            <param name="lineNumber">Number of line to change.</param>
            <param name="lineText">New text for this line.</param>
            <returns>Status of the operation</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.ChangeLine(System.String,System.Int32,System.String@)">
            <summary>
            Wrapper around Editor.ChangeLine to modify the text for a program line.
            </summary>
            <param name="programName">Name of the program.</param>
            <param name="lineNumber">Number of line to change.</param>
            <param name="lineText">New text for this line.</param>
            <returns>Status of the operation</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.CheckProgram">
            <summary>
            Wrapper around Editor.CheckProgram. Verify the syntax for the
            currently edited program (edition stated with Edit).
            </summary>
            <returns>Status code.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.ClearBreakpoint(System.String,System.Int32)">
            <summary>
            Wrapper around Programs.ClearBreakpoint to clear a breakpoint.
            </summary>
            <param name="programName">Name of program where to clear the
            breakpoint.</param>
            <param name="lineNumber">Line number where to clear the bp,
            if 0, all breakpoints will be cleared.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Close">
            <summary>
            Close the communication link.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.ConnectionAddress">
            <summary>
            Return the IP address of the controller as a string. Only valid
            for Ethernet type connections.
            </summary>
            <returns>The IP address as a standard xxx.xxx.xxx.xxx string.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.DeleteL(System.String,System.Int32,System.String)">
            <summary>
            Delete one or more location variable(s). Not directly available 
            in ActiveV so use SendString.
            </summary>
            <param name="variableName">Name of the variable to delete,
            see V+/MicroV+ doc for name syntax.</param>
            <param name="task">Task number for context or -1 if no
            specific task.</param>
            <param name="program">Program name for context or empty
            string for no context.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.DeleteLine(System.Int32,System.Int32)">
            <summary>
            Wrapper for Editor.DeleteLine to remove a line in a program.
            </summary>
            <param name="lineNumber">Index of line to remove.</param>
            <param name="lineCount">Number of lines to remove.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.DeleteLine(System.String,System.Int32,System.Int32)">
            <summary>
            Wrapper for Editor.DeleteLine to remove a line in a program.
            </summary>
            <param name="programName">Name of the program.</param>
            <param name="lineNumber">Index of line to remove.</param>
            <param name="lineCount">Number of lines to remove.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.DeleteM(System.String)">
            <summary>
            Wrapper around Programs.Deletem to delete a module.
            </summary>
            <param name="moduleName">Name of module to delete.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.DeleteP(System.String)">
            <summary>
            Wrapper around Programs.Deletep. Deletes a program.
            No error if program does not exist.
            </summary>
            <param name="programName">Name of program</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.DeleteP(System.String,System.Boolean)">
            <summary>
            Wrapper around Programs.Deletep. Deletes a program.
            No error if program does not exist.
            </summary>
            <param name="programName">Name of program</param>
            <param name="reportProgramDeleted">if set to <c>true</c> an event is thrown to report the program has been deleted.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.DeleteR(System.String,System.Int32,System.String)">
            <summary>
            Delete one or more real variable(s). Not directly available 
            in ActiveV so use SendString.
            </summary>
            <param name="variableName">Name of the variable to delete,
            see V+/MicroV+ doc for name syntax.</param>
            <param name="task">Task number for context or -1 if no
            specific task.</param>
            <param name="program">Program name for context or empty
            string for no context.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.DeleteS(System.String,System.Int32,System.String)">
            <summary>
            Delete one or more string variable(s). Not directly available 
            in ActiveV so use SendString.
            </summary>
            <param name="variableName">Name of the variable to delete,
            see V+/MicroV+ doc for name syntax.</param>
            <param name="task">Task number for context or -1 if no
            specific task.</param>
            <param name="program">Program name for context or empty
            string for no context.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Directory(System.String)">
            <summary>
            Wrapper around Programs.Directory to get a list of programs.
            </summary>
            <param name="filter">Filter with * as the wildcard. Can be an
            empty string to get all programs.</param>
            <returns>List of program infos.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Edit(System.String)">
            <summary>
            Wrapper around Editor.Edit to start edition of a program.
            </summary>
            <param name="name">Name of program to edit.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.EraseBios(System.String)">
            <summary>
            Internal function. Not to be used in your programs.
            </summary>
            <param name="input">None of your business! :-)</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.EraseDisk">
            <summary>
            Internal function. Not to be used in your programs.
            </summary>
            <returns>None of your business! :-)</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Evaluate(System.String)">
            <summary>
            Simplified wrapper around Status.Evaluate (no task or program
            context, type of returned expression not provided).
            </summary>
            <param name="expression">Expression to evaluate</param>
            <returns>The string value returned. Can then be translated
            to an appropriate type depending on the expression type.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Evaluate(System.Int32,System.String,System.String)">
            <summary>
            Wrapper around Status.Evaluate.
            </summary>
            <param name="task">Task number for context, -1 if global</param>
            <param name="programName">Name of program for context, empty
            string for global.</param>
            <param name="expression">Expression to evaluate</param>
            <returns>A variable definition that gives the value of the
            expression and its data type.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Execute(System.String,System.Int32,System.Int32)">
            <summary>
            Execute a program on the controller. Wrapper for the 
            Programs.Execute function.
            </summary>
            <param name="programName">Full invocation line for program,
            including parenthesis and arguments.</param>
            <param name="task">Task number in which to run program</param>
            <param name="timeout">If higher than 0, will wait that maximum
            time for end of execution. If 0 or negative, does not wait. Value
            is in milliseconds.</param>
            <returns>The status</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.FCopy(System.String,System.String)">
            <summary>
            Wrapper around Files.FCopy, copies a file.
            </summary>
            <param name="sourceFile">Path for the source file.</param>
            <param name="destinationFile">Path for the destination file.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.FDelete(System.String)">
            <summary>
            Wrapper around Files.FDelete, deletes a file.
            </summary>
            <param name="fileName">Path for file to delete.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.FDirectory(System.String)">
            <summary>
            Wrapper around Files.FDirectory, returns the list of files
            and directory in a given path.
            </summary>
            <param name="path">Path to list</param>
            <returns>Array of information on files that match the path.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.FDirectoryC(System.String)">
            <summary>
            This is in this section even thought it is not a wrapper because 
            I intend to add it to ActiveV eventually. It creates a new
            directory.
            </summary>
            <param name="path">Name of new directory</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.FDirectoryD(System.String)">
            <summary>
            This is in this section even thought it is not a wrapper because 
            I intend to add it to ActiveV eventually. It deletes a directory.
            </summary>
            <param name="path">Name of directory to delete</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Free">
            <summary>
            Wrapper around Status.Free to get information about free memory.
            </summary>
            <returns>Free memory info.</returns> 
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.FRename(System.String,System.String)">
            <summary>
            Wrapper around Files.FRename to rename a file.
            </summary>
            <param name="oldName">Current name of file</param>
            <param name="newName">New name of file</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.FSet(System.String)">
            <summary>
            This is in this section even thought it is not a wrapper because 
            I intend to add it to ActiveV eventually. It just calls FSET.
            </summary>
            <param name="arguments">Arguments to pass to FSET. We must use this
            generic syntax because the syntax for FSET is variable depending
            on what we FSET.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.FSetProperties(System.String,System.String)">
            <summary>
            Wrapper around Files.FSetProperties, change the normal or
            system status of a file.
            </summary>
            <param name="fileName">Name of the file to modify.</param>
            <param name="property">New property to set. Use one of the
            FSP_* constants.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.GetErrorString(System.Int32)">
            <summary>
            Return the message associated with a given error code.
            </summary>
            <param name="code">The error code</param>
            <returns>The message</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.GetStringEx(System.Int32,System.Int32)">
            <summary>
            Wrapper around Communication.GetStringEx to get the output from
            the controller after having received an OnProgramOutput event.
            </summary>
            <param name="board">Board number.</param>
            <param name="channel">Channel number.</param>
            <returns>The controller output.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.InsertLine(System.Int32,System.String@)">
            <summary>
            Wrapper around Editor.InsertLine to insert a new line in a
            program.
            </summary>
            <param name="lineNumber">Number of line before which to insert.</param>
            <param name="lineText">Text for new line.</param>
            <returns>Status of the operation</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.InsertLine(System.String,System.Int32,System.String@)">
            <summary>
            Wrapper around Editor.InsertLine to insert a new line in a
            program.
            </summary>
            <param name="programName">Name of the program.</param>
            <param name="lineNumber">Number of line before which to insert.</param>
            <param name="lineText">Text for new line.</param>
            <returns>Status of the operation</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Install(System.String,System.Boolean)">
            <summary>
            This is in this section even thought it is not a wrapper because 
            I intend to add it to ActiveV eventually. It just calls INSTALL.
            </summary>
            <param name="password">Password for option to install/uninstall.</param>
            <param name="installing">If true install, false uninstall.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.IO(System.Int32)">
            <summary>
            Wrapper around Status.IO to know the state and validity of
            input and output signals.
            </summary>
            <param name="number">Specify which block to query. 0 is the output
            block. 1 is the input block. 2 is the soft signal block. 3 is the robot signal block.</param>
            <returns>Array of signal states.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.IsGetC">
            <summary>
            Wrapper around Communication.IsGetc to know if a Read is for
            a character only.
            </summary>
            <returns>True or false.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Jog(System.Int32,System.Int32,System.Int32,Ace.Communication.VpTransform@,Ace.Communication.VpPrecisionPoint@)">
            <summary>
            Wrapper for Misc.Jog, support of old style Jog command for older
            versions of V+.
            </summary>
            <param name="mode">Jogging mode, one of the JOG_MODE_* constants.</param>
            <param name="axis">Axis to jog.</param>
            <param name="speed">Speed at which to jog.</param>
            <param name="world">Returns the current world coordinates.</param>
            <param name="joints">Returns the current joints coordinates.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.JogTo(System.Int32,System.Int32,Ace.Communication.VpTransform@,Ace.Communication.VpPrecisionPoint@,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Wrapper for Misc.Jog2, jogs the robot.
            </summary>
            <param name="mode">Jogging mode, one of the JOG_MODE_* constants.</param>
            <param name="speed">Speed at which to jog.</param>
            <param name="world">Returns the current world coordinates.</param>
            <param name="joints">Returns the current joints coordinates.</param>
            <param name="robot">Number of robot to jog (for V+, for MicroV+
            should always be 1).</param>
            <param name="joint">Axis to jog. Doesn't matter in JogTo mode,
            in joint, number of joint, in world or tool, 1 is X, 2 is Y
            and so on.</param>
            <param name="task">Task for context for the destination variable.
            Only relevant in JOG_TO mode. Can be -1 for no specific task.</param>
            <param name="program">Program for context. Same comments as pTask</param>
            <param name="variable">Name of location variable to jog to in JOG_TO
            mode.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Kill(System.Int32)">
            <summary>
            Wrapper for Programs.Kill.
            </summary>
            <param name="task">Number of task to kill</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.ListBreakpoints(System.String)">
            <summary>
            Wrapper around Programs.ListBreakpoints to get all line numbers
            where there is a breakpoint in a program.
            </summary>
            <param name="programName">Name of program to get the breakpoints
            for.</param>
            <returns>List of line numbers</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.ListL(System.String,System.Int32,System.String)">
            <summary>
            Complete wrapper around ListL to retrieve the name
            and value of one location variables.
            </summary>
            <param name="name">Name of variable to read.</param>
            <param name="task">Task number for context, can be -1 for no
            specific task.</param>
            <param name="programName">Program name for context, can be
            empty string for no specific program.</param>
            <returns>The location variable as a Transform</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.ListL(System.String)">
            <summary>
            Simple wrapper around ListL to get one value.
            </summary>
            <param name="name">Name of variable to read.</param>
            <returns>The location variable as a Transform</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.ListP(System.String)">
            <summary>
            Wrapper around Programs.ListP to get the lines of a program.
            </summary>
            <param name="name">Name of program to list.</param>
            <returns>All the lines of the program.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.ListP(System.String,System.Int32)">
            <summary>
            Wrapper around Programs.ListP to get the lines of a program.
            </summary>
            <param name="name">Name of program to list.</param>
            <param name="lineCount">The number of lines to extract.</param>
            <returns>The extracted lines of the program.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.ListR(System.String,System.Int32,System.String,System.String[]@,System.Double[]@)">
            <summary>
            Complete wrapper around ListR to retrieve the name
            and value of one or more real variables.
            </summary>
            <param name="name">Name filter</param>
            <param name="task">Task number for context, can be -1 for no
            specific task.</param>
            <param name="programName">Program name for context, can be
            empty string for no specific program.</param>
            <param name="names">On output list of names of variables.</param>
            <param name="values">On output list of variable values.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.ListR(System.String)">
            <summary>
            Simple wrapper around ListR to get one value at a time.
            </summary>
            <param name="name">Name of variable to retrieve. Can be name of
            a function also or expression, anything that returns a numerical
            result.</param>
            <returns>The value requested</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.ListS(System.String,System.Int32,System.String,System.String[]@,System.String[]@)">
            <summary>
            Complete wrapper around ListS to retrieve the name
            and value of one or more string variables.
            </summary>
            <param name="name">Name filter</param>
            <param name="task">Task number for context, can be -1 for no
            specific task.</param>
            <param name="programName">Program name for context, can be
            empty string for no specific program.</param>
            <param name="names">On output list of names of variables.</param>
            <param name="values">On output list of variable values.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.ListS(System.String)">
            <summary>
            Simple wrapper around ListS to get one value at a time.
            </summary>
            <param name="name">Name of variable to retrieve. Can be name of
            a function also or expression, anything that returns a string
            result.</param>
            <returns>The value requested</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Load(System.String)">
            <summary>
            Execute the V+ LOAD monitor command.
            </summary>
            <param name="fileName">Name of file to load.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.LVariables(System.String,System.Int32,System.String)">
            <summary>
            Wrapper around Status.Lvariables to get a list of location
            variable names.
            </summary>
            <param name="name">Name filter</param>
            <param name="task">Task number for context or -1 for
            no specific task.</param>
            <param name="programName">Program name for context or empty
            string for no specific program.</param>
            <returns>List of names</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.MDirectory(System.String)">
            <summary>
            Wrapper around Programs.MDirectory to get a list of modules
            or the list of programs in a module.
            </summary>
            <param name="name">Name of module. If a name is specified all
            programs in that module will be listed. If name is empty then
            all modules will be listed.</param>
            <returns>Array of infos of programs or modules.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Module(System.String,System.String)">
            <summary>
            Wrapper around Programs.Module to move a program into a specific module.
            </summary>
            <param name="moduleName">Name of module to move the program into.</param>
            <param name="programName">Name of program to move.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.ModuleFile(System.String,System.String)">
            <summary>
            Wrapper around Programs.ModuleFile to associate a file name to a
            module.
            </summary>
            <param name="moduleName">Module name</param>
            <param name="fileName">File name to associate to given module.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.NfsMounts">
            <summary>
            Wrapper around Files.NFSMounts which lists the active NFS mounts.
            </summary>
            <returns>List of NFS mounts</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Open(System.String,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Try to connect to the controller using the given connection info.
            </summary>
            <param name="device">The name of the physical device to use to connect.  The recognized names are: UDP, TCP, and COM1 - COM16</param>
            <param name="unit">unit number of device, if necessary</param>
            <param name="name">name of V+ system to which to connect. This can be an IP address, for instance.</param>
            <param name="mode1">For serial communications this is flow control: 0=none, 1=XonXoff, 2=RTS/CTS, 3=Both. 
            For a TCP connection, this is a port offset added to the default ports.</param>
            <param name="mode2">For serial comm this is the serial line settings in format "BBBB,P,D,S" (baud rate, parity, data bits, stop bits) if empty, the default is "9600,N,8,1".</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Parameter(System.String)">
            <summary>
            Wrapper around Status.Parameter to get information about
            V+ PARAMETERs.
            </summary>
            <param name="name">Name of parameter to query or empty string
            for all parameters.</param>
            <returns>Array of parameter info.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Parameter(System.String,System.Single)">
            <summary>
            Wrapper around Misc.Parameter to change the value of a PARAMETER.
            </summary>
            <param name="name">Name of parameter to modify.</param>
            <param name="value">New value for parameter.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.PCopy(System.String,System.String)">
            <summary>
            Wrapper around Programs.PCopy to copy a program to another one.
            </summary>
            <param name="sourceName">Program to copy.</param>
            <param name="destinationName">Name to give to new program.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Prime(System.Int32,System.String)">
            <summary>
            Wrapper around Programs.Prime that will prepare a program in a
            given task.
            </summary>
            <param name="task">Number of task in which to prime the program.</param>
            <param name="programName">Name of program to prime.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Proceed(System.Int32)">
            <summary>
            Wrapper around Programs.Proceed to continue a program after
            an error.
            </summary>
            <param name="task">Number of task in which to proceed.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Rename(System.String,System.String)">
            <summary>
            Wrapper around Programs.Rename to change the name of a program.
            </summary>
            <param name="sourceName">Original name of program.</param>
            <param name="destinationName">New name of program.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.QueryReadRequest(System.Int32)">
            <summary>
            Wrapper for Communications.QueryReadRequest which tells us if a
            read request is pending on the controller.
            </summary>
            <param name="task">Task number to query.</param>
            <returns>True if a read is pending, false otherwise.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.RequestEvents(System.Int32)">
             <summary>
             Wrapper for the Communications.RequestEvents function to ask
             to receive or not asynchronous events.
             </summary>
             <param name="request">Requested level of event</param>
             <remarks>
             The value of 'request' is as follows: 
             2 if V+ is to send async output to us always
             1 if V+ is to send async output to us if no one
            		else has already requested events
            	0 if V+ is to stop sending async output to us
            </remarks>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Retry(System.Int32)">
            <summary>
            Wrapper around Programs.Retry to retry the last executed line.
            </summary>
            <param name="task">Number of task in which to retry.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.SendString(System.String,System.String@)">
            <summary>
            Internal.
            </summary>
            <param name="command">N/A</param>
            <param name="result">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.SendStringEx(System.Int32,System.Int32,System.String)">
            <summary>
            Wrapper around Communication.SendStringEx to send a string
            in response to a ReadPosted event.
            </summary>
            <param name="board">Board number.</param>
            <param name="task">Task number.</param>
            <param name="text">String to send.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.SetBreakpoint(System.String,System.Int32)">
            <summary>
            Wrapper around Programs.SetBreakpoint to set a breakpoint
            in a program.
            </summary>
            <param name="programName">Name of program.</param>
            <param name="lineNumber">Number of line in program where
            to set the breakpoint.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.SetL(System.String,Ace.Communication.VpTransform)">
            <summary>
            Wrapper around Misc.SetL.
            </summary>
            <param name="name">Name of variable to set.</param>
            <param name="value">Transform value to set.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.SetL(System.String,System.Int32,System.String,Ace.Communication.VpTransform)">
            <summary>
            More general SetL to set variables that are not global.
            Not supported directly in ActiveV so use SendString.
            </summary>
            <param name="name">Name of variable to set.</param>
            <param name="task">Task number for context or -1 if no
            specific task.</param>
            <param name="program">Program name for context or empty
            string for no context.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.SetPP(System.String,Ace.Communication.VpPrecisionPoint)">
            <summary>
            Wrapper around Misc.SetPP to set a precision point.
            </summary>
            <param name="name">Name of variable, should start with a #.</param>
            <param name="value">Joint values stored in a PrecisionPoint. You
            need only set as many values as there are motors.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.SetPP(System.String,System.Int32,System.String,Ace.Communication.VpPrecisionPoint)">
            <summary>
            More general SetPP to set variables that are not global.
            Not supported directly in ActiveV so use SendString.
            </summary>
            <param name="name">Name of variable to set.</param>
            <param name="task">Task number for context or -1 if no
            specific task.</param>
            <param name="program">Program name for context or empty
            string for no context.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.SetR(System.String,System.Double)">
            <summary>
            Wrapper for the MiscControl.SetR function. Sets the value
            of a real variable.
            </summary>
            <param name="name">Variable name</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.SetR(System.String,System.Int32,System.String,System.Double)">
            <summary>
            More general SetR to set variables that are not global.
            Not supported directly in ActiveV so use SendString.
            </summary>
            <param name="name">Name of variable to set.</param>
            <param name="task">Task number for context or -1 if no
            specific task.</param>
            <param name="program">Program name for context or empty
            string for no context.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.SetS(System.String,System.String)">
            <summary>
            Wrapper around Misc.SetS function to set the value of a string
            variable.
            </summary>
            <param name="name">Name of the variable to set.</param>
            <param name="value">New value for the variable.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.SetS(System.String,System.Int32,System.String,System.String)">
            <summary>
            More general SetS to set variables that are not global.
            Not supported directly in ActiveV so use SendString.
            </summary>
            <param name="name">Name of variable to set.</param>
            <param name="task">Task number for context or -1 if no
            specific task.</param>
            <param name="program">Program name for context or empty
            string for no context.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Signal(System.Int32,System.Boolean)">
            <summary>
            Wrapper around Misc.SignalOn and MiscSignalOff.
            </summary>
            <param name="number">Number of signal to change</param>
            <param name="state">New state</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Speed(System.Single)">
            <summary>
            Interface to the SPEED command.
            </summary>
            <param name="value">The new speed to set.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.SStep(System.Int32)">
            <summary>
            Wrapper for Programs.SStep to single step (step over so does not
            go into a subroutine).
            </summary>
            <param name="task">Task number in which to single step.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.StackContent(System.Int32)">
            <summary>
            Wrapper around Status.StackContents to know the complete state
            of the stack for a given task.
            </summary>
            <param name="task">Number of task to query.</param>
            <returns>Task state.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Status">
            <summary>
            Wrapper around Status.Status to know the complete state of all
            active tasks.
            </summary>
            <returns>The statuses.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Store(System.String,System.String)">
            <summary>
            Wrapper around Programs.Store to store a program all its
            dependencies and variables to a file on the controller.
            </summary>
            <param name="programName">Name of program to save.</param>
            <param name="fileName">Name of file to save to.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.StoreL(System.String,System.String)">
            <summary>
            Execute the STOREL monitor command to store global location
            variables into a file.
            </summary>
            <param name="fileName">Name of the file to save to.</param>
            <param name="programName">If specified only variables used by the
            specified program and the programs it calls will be saves.
            If empty all variables will be saved.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.StoreM(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Wrapper around Programs.Storem to save a module to a file on the
            controller.
            </summary>
            <param name="moduleName">Name of module to save.</param>
            <param name="fileName">Name of file to save to.</param>
            <param name="storeReal">If true, real variables are stored in the file.</param>
            <param name="storeLocations">If true, location variables are stored.</param>
            <param name="storeStrings">If true, string variables are store. </param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.StoreP(System.String,System.String)">
            <summary>
            Wrapper around Programs.Storep to save a program and its dependencies
            to a file on the controller. Variables are not saved.
            </summary>
            <param name="programName">Name of program to save.</param>
            <param name="fileName">Name of file to save to.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.StoreR(System.String,System.String)">
            <summary>
            Execute the STORER monitor command to store global real
            variables into a file.
            </summary>
            <param name="fileName">Name of the file to save to.</param>
            <param name="programName">If specified only variables used by the
            specified program and the programs it calls will be saves.
            If empty all variables will be saved.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.StoreS(System.String,System.String)">
            <summary>
            Execute the STORES monitor command to store global string
            variables into a file.
            </summary>
            <param name="fileName">Name of the file to save to.</param>
            <param name="programName">If specified only variables used by the
            specified program and the programs it calls will be saves.
            If empty all variables will be saved.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Switch(System.String)">
            <summary>
            Wrapper around Status.Switch to get information about
            switches.
            </summary>
            <param name="name">Name of switch to query or empty
            string for all switches.</param>
            <returns>Information of matching switch(es).</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.SwitchOff(System.String)">
            <summary>
            Wrapper around Misc.SwitchOff.
            </summary>
            <param name="name">Name of switch to turn off</param>
            <returns>Status</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.SwitchOn(System.String)">
            <summary>
            Wrapper around Misc.SwitchOn.
            </summary>
            <param name="name">Name of switch to turn on</param>
            <returns>Status</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Where(System.Int32,Ace.Communication.VpTransform@,Ace.Communication.VpPrecisionPoint@)">
            <summary>
            Interface to the Where command. We convert the result to transforms.
            </summary>
            <param name="robotNumber">Number of robot for which the position
            is requested.</param>
            <param name="world">World coordinates will be written to this
            transform. Can be null if world not wanted.</param>
            <param name="joints">Joint coordinates will be written to this.
            Can be null if joints not wanted</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.XStep(System.Int32)">
            <summary>
            Wrapper around Programs.XStep to single step (step into subroutine).
            </summary>
            <param name="task">Task number in which to step.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.XStep2(System.Int32,System.Int32)">
            <summary>
            Wrapper around Programs.XStep2 to move execution to a specific line.
            </summary>
            <param name="task">Task number in which to step.</param>
            <param name="lineNumber">Line number to "jump" to.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Zero">
            <summary>
            Wrapper around Programs.ZERO to clear all programs and variables
            in memory.  It will call subscribers to Zeroed and ZeroredWithStatus events
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Zero(System.Int32@)">
            <summary>
            Wrapper around Programs.ZERO to clear all programs and variables in memory and returns Status.
            
            </summary>
            <param name="lStatus">Status will return 1 for success and error number for error..</param>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.ConnectionIdentifier">
            <summary>
            Gets a string uniquely identifying the connection.
            </summary>
            <value>The connection identifier.</value>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.ConnectionType">
            <summary>
            Property that returns the current connection type.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.OSType">
            <summary>
            Property that returns the current OS type.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.Mode1">
            <summary>
            Gets the first mode setting associated with the connection
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.Mode2">
            <summary>
            Gets the second mode setting associated with the connection
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.CompatibilityVersionNumber">
            <summary>
            Gets the major V+ version number.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.VersionNumber">
            <summary>
            Major version number (e.g. 16 in 16.2 B4).
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.RevisionNumber">
            <summary>
            Minor version number (e.g. 2 in 16.2 B4).
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.EditNumber">
            <summary>
            Build number (e.g. B4 in 16.2 B4).
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.VersionString">
            <summary>
            Full version string with all 3 components.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.NumericVersion">
            <summary>
            Version built as one number for comparisons.
            The formula is: VersionNumber*10000000 + Revision*10000
            EditLetter*100 + EditNumber.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.ControllerPort">
            <summary>
            Return the Com port of the controller as a string. Only valid
            for Serial type connections.
            </summary>
            <returns>The Communication port as a standard COMX string.</returns>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.ControllerId">
            <summary>
            Compose a Id unique for each controller made up of the product
            type followed by the serial number.
            Typically used to save controller specific settings in the
            preference file.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.PingTimeout">
            <summary>
            Timeout used to wait for response on PING done before connection
            to check availability of controller for Ethernet connections.
            This is value is in milliseconds. If 0 or negative, no PING
            is performed.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.ActiveVLink.TaskCount">
            <summary>
            Return the number of tasks on the system.
            </summary>
            <returns>The number or -1 if not connected</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.ContainsAdeptSightKeyword(System.String)">
            <summary>
            AdeptSight keywords cannot be evaluated from ActiveV because it
            creates a deadlock condition. This function tries to evaluate if
            an expression contains a AdeptSight keyword returning results.
            </summary>
            <param name="expression">Expression to analyze.</param>
            <returns>True if contains AdeptSight keywords, false otherwise.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.DeleteL(System.String)">
            <summary>
            Easy variant of DeleteL for global variables.
            </summary>
            <param name="variableName">Name of variable(s) to delete.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.DeleteR(System.String)">
            <summary>
            Easy variant of DeleteR for global variables.
            </summary>
            <param name="variableName">Name of variable(s) to delete.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.DeleteS(System.String)">
            <summary>
            Easy variant of DeleteS for global variables.
            </summary>
            <param name="variableName">Name of variable(s) to delete.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Error(System.Int32,System.Int32)">
            <summary>
            Wrapper around ERROR V+ real-valued function to get 
            information about last error that occurred.
            </summary>
            <param name="source">Source of error (for example task number)</param>
            <param name="select">Select information returned see V+ doc.</param>
            <returns>Result of ERROR function.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.EvaluateL(System.String)">
            <summary>
            Specialized version of Evaluate that expects only Location
            type expression and will throw an error if expression is
            invalid or not of Location type.
            </summary>
            <param name="expression">Expression to evaluate.</param>
            <returns>The transform or null if invalid or not a
            location expression.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Frame(Ace.Communication.VpTransform,Ace.Communication.VpTransform,Ace.Communication.VpTransform)">
            <summary>
            Call to the FRAME transform function.
            </summary>
            <param name="origin">Origin of frame</param>
            <param name="pointX">Point that lies on the X axis</param>
            <param name="pointY">Point that lies in the X-Y plane,
            ideally on the Y axis.</param>
            <returns>The resulting transform.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.GetAsynchronousErrorString(System.Int32)">
            <summary>
            Return the complete error string for a asynchronous error.
            </summary>
            <param name="errorCode">Error code received from the event.</param>
            <returns>The message</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.GetCompleteErrorString(System.Int32,System.Int32)">
            <summary>
            Return a more complete error message including the variable part.
            </summary>
            <param name="code">Error code to get string for.</param>
            <param name="task">Task or select number for Error function.</param>
            <returns>The message.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.GetFileNames(System.String)">
            <summary>
            Wrapper around Files.FDirectory that returns only the file names.
            </summary>
            <param name="path">Path to list</param>
            <returns>Array of the all the names.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.IsInRange(System.Int32)">
            <summary>
            Return a bitmask indicating if the joints of the specified robot are INRANGE.
            </summary>
            <param name="robot">Number of robot.</param>
            <returns>Bitmask indicating which joints are not inrange.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.GetBase(System.Int32)">
            <summary>
            Return the current BASE transform for the specified robot.
            </summary>
            <param name="robot">Number of robot.</param>
            <returns>The base transform.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.GetTool(System.Int32)">
            <summary>
            Return the current tool transform for the specified robot.
            </summary>
            <param name="robot">Number of robot.</param>
            <returns>The tool transform.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.GetRobotSpecificTransform(System.Int32,System.String)">
            <summary>
            Return the specified transformation for the specified robot 
            </summary>
            <param name="robot">Number of robot.</param>
            <param name="transName">Name of transformation:{BASE, TOOL}</param>
            <returns>The robot specific transformation</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Id(System.Int32,System.Int32)">
            <summary>
            Uses ListR to get access to the ID function.
            </summary>
            <param name="device">Device parameter for ID</param>
            <param name="component">Component parameter for ID</param>
            <returns>The requested information</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.IdCommand">
            <summary>
            Get the raw string returned by the ID monitor command.
            </summary>
            <returns>The ID string.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.IsValidFileName(System.String)">
            <summary>
            Verifies that a file name is valid for the current os.
            </summary>
            <param name="name">Name to validate</param>
            <returns>True if valid</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.IsValidFolderName(System.String)">
            <summary>
            Verifies that a folder name is valid for the current os.
            </summary>
            <param name="name">Name to validate</param>
            <returns>True if valid</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.JMove(Ace.Communication.VpPrecisionPoint)">
            <summary>
            Use the SendString command to do a JMOVE. Should be eventually
            improved because currently we cannot detect errors that prevent
            the move.
            </summary>
            <param name="joints">Joint values</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Move(Ace.Communication.VpTransform)">
            <summary>
            Use the SendString command to do a MOVE. Should be eventually
            improved because currently we cannot detect errors that prevent
            the move.
            </summary>
            <param name="location">The destination location</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Moves(Ace.Communication.VpTransform)">
            <summary>
            Use the SendString command to do a MOVE. Should be eventually
            improved because currently we cannot detect errors that prevent
            the move.
            </summary>
            <param name="location">The destination location</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.ListPP(System.String,System.Int32,System.String)">
            <summary>
            Simple wrapper around Listl but for a value that we know
            is a precision point.
            </summary>
            <param name="name">Name of variable to read.</param>
            <param name="task">Optional task number for local variables (-1 for global).</param>
            <param name="program">Optional program name for local variables ("" for global).</param>
            <returns>The joint values as a PrecisionPoint.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.ListPP(System.String)">
            <summary>
            Simple wrapper around ListPP to get a global value (added by RegisP).
            </summary>
            <param name="name">Name of variable to read.</param>
            <returns>The joint values as a PrecisionPoint.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.MountNfsDrive(System.String,System.String,System.String)">
            <summary>
            Perform the necessary FSET commands to mount an NFS drive.
            </summary>
            <param name="mountName">The name you want the new drive to have.</param>
            <param name="ipAddress">IP address of the NFS server.</param>
            <param name="directory">Path of directory to mount on server.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Open(System.String)">
            <summary>
            Special simpler version of Open to connect via Ethernet.
            </summary>
            <param name="ipAddress">IP address to connect to.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.OpenEthernet(System.String,System.Int32)">
            <summary>
            Special simpler version of Open to connect via Ethernet specifying a port offset
            </summary>
            <param name="ipAddress">IP address to connect to.</param>
            <param name="portOffset">This is a port offset added to the default ports.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.OpenEthernet(System.String,System.Int32,System.String)">
            <summary>
            Special simpler version of Open to connect via Ethernet specifying a port offset
            </summary>
            <param name="ipAddress">IP address to connect to.</param>
            <param name="portOffset">This is a port offset added to the default ports.</param>
            <param name="ipAddressLocalNIC">This is local NIC.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Open(System.String,System.Int32)">
            <summary>
            Special simpler version of Open to connect via serial port.
            </summary>
            <param name="port">Com Port device name (COM1,COM2,...)</param>
            <param name="speed">Baud rate</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.ResetServos">
            <summary>
            Use SendString to ask for a SRV.RESET. Eventually this command
            should be added directly to ActiveV.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.RobotCalibrated(System.Int32)">
            <summary>
            Simple wrapper function to know if a robot is calibrated.
            </summary>
            <param name="robotIndex">Index of robot to query (1-based).</param>
            <returns>True if calibrated, false otherwise.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.SendProgram(System.String,System.String[])">
            <summary>
            Send a program to the controller.
            </summary>
            <param name="programName">Name of the program</param>
            <param name="lines">array of strings containing the lines
            of the program</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.SetTool(System.Int32,Ace.Communication.VpTransform)">
            <summary>
            Set the tool transform for the specified robot to the given value.
            </summary>
            <param name="robot">Robot number</param>
            <param name="value">New tool value.</param>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.State(System.Int32)">
            <summary>
            Uses ListR to get access to the STATE function.
            </summary>
            <param name="select">Select parameter of STATE</param>
            <returns>The requested state</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.Task(System.Int32,System.Int32)">
            <summary>
            Wrapper around the TASK real-valued function to get information
            about a task.
            </summary>
            <param name="taskNumber">Number of task to query.</param>
            <param name="select">Select which information to retrieve. See
            V+/MicroV+ documentation.</param>
            <returns>The result of the Task function.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.WhereJoint(System.Int32)">
            <summary>
            Interface to the Where command. We convert the result to a PrecisionPoint.
            </summary>
            <param name="robotNumber">Number of robot for which the position
            is requested.</param>
            <returns>Current joint values.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.WhereWorld(System.Int32)">
            <summary>
            Interface to the Where command. We convert the result to a transform.
            </summary>
            <param name="robotNumber">Number of robot for which the position
            is requested.</param>
            <returns>Current world transform.</returns>
        </member>
        <member name="M:Ace.Communication.Link.ActiveVLink.CompareVersion(System.Int32,System.Int32,System.String)">
            <summary>
            Compares the specified version with the version of the connection
            </summary>
            <param name="major">The major version.</param>
            <param name="minor">The minor version.</param>
            <param name="edit">The edit (ex. "B50").</param>
            <returns>0 means the versions are identical. 
            1 means the Link is a newer version of V+. 
            -1 means the specified version is newer than the V+ version.</returns>
        </member>
        <member name="T:Ace.Communication.Link.ActiveVLinkConstants">
            <summary>
            Defines common constants used by the VpLink Class
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.eVPlusMajor">
            <summary>
            System Major version number that identifies eV+ (eVplus >17 normally)
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.vPlusMaxVersion">
            <summary>
            Numeric comparison for the maximum V+ version
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.eVplusMinimumVersion">
            <summary>
            Numeric comparison representing eV+ 2.0 and later.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.eVplus21MinimumVersion">
            <summary>
            Numeric comparison representing eV+ 2.1 and later.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.eVplus22MinimumVersion">
            <summary>
            Numeric comparison representing eV+ 2.2 and later.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.eVplus23MinimumVersion">
            <summary>
            Numeric comparison representing eV+ 2.3 and later.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.eVplus25MinimumVersion">
            <summary>
            Numeric comparison representing eV+ 2.5 and later.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.DeviceRobot">
            <summary>
            The device robot
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.IdNMotors">
            <summary>
            The identifier for numebr of motors
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.SwitchPower">
            <summary>
            String constant for the name of the POWER V+ system switch.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.TftpPrefix">
            <summary>
            Prefix to put in front of a TFTP transfer file.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.JogSpeedNone">
            <summary>
            Speed to set in the speed array of Jog for axis that should not be jogged
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.JogModeContinue">
            <summary>
            Mode to pass to Jog to continue an already started jog.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.JogModeDisabled">
            <summary>
            Value returned by STATE(3) when jogging is not possible (e.g. power is disabled or robot not calibrated).
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.JogModeJoint">
            <summary>
            Jog mode to move in joint mode.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.JogModeWorld">
            <summary>
            Jog mode to move in world (cartesian) mode.
            </summary>		
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.JogModeTool">
            <summary>
            Jog mode to move in tool mode.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.JogModeComp">
            <summary>
            Jog mode for no jog, robot under program control.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.JogModeJogTo">
            <summary>
            Jog mode to jog to a location variable instead of jogging just an axis a given speed.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.JogModeTimeout">
            <summary>
            Special jog mode to set the jog timeout.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.DiskPrefix">
            <summary>
            Prefix to put in front of a path on a disk (i.e. not NFS or TFTP).
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.NfsPrefix">
            <summary>
            Prefix to put in front of a path on an NFS device
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.CompactFlash">
            <summary>
            Base path for files on CompactFlash card.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.CompactFlashRoot">
            <summary>
            Root dir on CompactFlash card.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.TftpSeparator">
            <summary>
            Character that separate the IP address and the file name in a TFTP transfer.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.ProgramAttributeModified">
            <summary>
            Bit mask for the PROTECTED attribute of a program returned from the Directory function.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.ProgramAttributeInvalid">
            <summary>
            Bit mask for the PROTECTED attribute of a program returned from the Directory function.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.ProgramAttributeProtected">
            <summary>
            Bit mask for the PROTECTED attribute of a program returned from the Directory function.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.TypeInvalid">
            <summary>
            The type invalidFor type of expression returned by Evaluate.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.TypeReal">
            <summary>
            The type invalidFor type of expression returned by Evaluate.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.TypeString">
            <summary>
            The type invalidFor type of expression returned by Evaluate.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.TypeLocation">
            <summary>
            The type invalidFor type of expression returned by Evaluate.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.TypePrecisionPoint">
            <summary>
            The type invalidFor type of expression returned by Evaluate.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.TypeBelt">
            <summary>
            The type invalidFor type of expression returned by Evaluate.
            </summary>
            <remarks>
            Evaluate will not return this type. It will 
            return a REAL for a belt variable. But the application layer 
            will differentiate between a REAL and Belt variable.
            </remarks>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.PrecisionPointPrefix">
            <summary>
            Prefix for every precision point variables.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.StringPrefix">
            <summary>
            Prefix for every string variables
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.ActiveVLinkConstants.ComErrorSendError">
            <summary>
            COM Send Error Code: 0x800A03E8
            </summary>
        </member>
        <member name="T:Ace.Communication.Link.VPMount">
            <summary>
            Simple class for the return of NFSMounts.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.VPMount.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPMount.MountName">
            <summary>
            Mount (drive) name (for example if
            you access it with "NFS>X:\blabla" then this is 'X').
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPMount.Node">
            <summary>
            Target node name.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPMount.PathName">
            <summary>
            Path on target.
            </summary>
        </member>
        <member name="T:Ace.Communication.Link.VPParameter">
            <summary>
            Simple class for the return of Parameter.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.VPParameter.#ctor(System.String,System.Int32,System.Single)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPParameter.Name">
            <summary>
            Name of switch.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPParameter.Index">
            <summary>
            Index for switches with multiple indexes (0 for singles).
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPParameter.Value">
            <summary>
            Value of the parameter.
            </summary>
        </member>
        <member name="T:Ace.Communication.Link.VPProgramInfo">
            <summary>
            Simple class for the return of Directory.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.VPProgramInfo.#ctor(System.String,System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPProgramInfo.Name">
            <summary>
            Program name.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPProgramInfo.Attributes">
            <summary>
            Attributes of the program.
            </summary>
        </member>
        <member name="T:Ace.Communication.Link.VPSignal">
            <summary>
            Simple class for the return of IO.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.VPSignal.#ctor(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPSignal.Number">
            <summary>
            Signal number.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPSignal.Valid">
            <summary>
            validity, false means the signal does not exists.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPSignal.State">
            <summary>
            State, true for on, false for off.
            </summary>
        </member>
        <member name="T:Ace.Communication.Link.VPStackContent">
            <summary>
            Simple class for the return of StackContent.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.VPStackContent.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.VPStackContent.AddProgram(System.Int32,System.String,System.Int32)">
            <summary>
            Add a program in the stack trace.
            </summary>
            <param name="index">Index in array.</param>
            <param name="name">Name of program</param>
            <param name="step">Current step of program.</param>
        </member>
        <member name="P:Ace.Communication.Link.VPStackContent.Task">
            <summary>
            Number of the task that this class describes.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPStackContent.StackDepth">
            <summary>
            Number of entries in mCurrentProgram.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPStackContent.CurrentStack">
            <summary>
            Current stack size (in bytes).
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPStackContent.MaxStack">
            <summary>
            Maximum size that the stack reached (in bytes).
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPStackContent.StackLimit">
            <summary>
            Current limit of the stack size (in bytes).
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPStackContent.Running">
            <summary>
            True if task is running, false if paused or stopped.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.VPStackContent.GetProgramName(System.Int32)">
            <summary>
            Return the name of the program at the requested level in the stack.
            </summary>
            <param name="level">Level in the stack.</param>
            <returns>Name of program.</returns>
        </member>
        <member name="M:Ace.Communication.Link.VPStackContent.GetStepNumber(System.Int32)">
            <summary>
            Return the current step number for the given stack level.
            </summary>
            <param name="level">Level in the stack.</param>
            <returns>The step.</returns>
        </member>
        <member name="T:Ace.Communication.Link.VPStatus">
            <summary>
            Simple class for the return of Status. It contains information
            on an active task.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.VPStatus.#ctor(System.Int32,System.Boolean,System.String,System.String,System.Int32,System.Single)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPStatus.Task">
            <summary>
            Number of the task described by the other properties.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPStatus.Running">
            <summary>
            Current running state of the task. True if running!
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPStatus.MainProgram">
            <summary>
            Name of the main program ( the one at top of stack ).
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPStatus.CurrentProgram">
            <summary>
            Name of the program that is currently executing.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPStatus.CurrentStep">
            <summary>
            Number of the current step in the current program (1 based).
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPStatus.StackSize">
            <summary>
            Size of the stack in bytes.
            </summary>
        </member>
        <member name="T:Ace.Communication.Link.VPSwitch">
            <summary>
            Simple class for the return of Switch.
            </summary>
        </member>
        <member name="M:Ace.Communication.Link.VPSwitch.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Ace.Communication.Link.VPSwitch.State">
            <summary>
            Current state of switch (true for on, false for off).
            </summary>
        </member>
        <member name="T:Ace.Communication.Link.VPType">
            <summary>
            Type of OS on currently connected system.
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPType.None">
            <summary>
            Not connected
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPType.VPlus">
            <summary>
            V+ system (e.g. SmartController)
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPType.SmartAxis">
            <summary>
            MicroV+ 1 for SmartAxis
            </summary>
        </member>
        <member name="F:Ace.Communication.Link.VPType.MicroVPlus">
            <summary>
            MicroV+ 2.0 and above (AIB)
            </summary>
        </member>
        <member name="T:Ace.Communication.Scan.VScan">
            <summary>
            A .NET implementation of ActiveVScan, which scans for controllers on the local network.
            </summary>
        </member>
        <member name="P:Ace.Communication.Scan.VScan.Format">
            <summary>
            Gets the Format code associated with the scan response
            </summary>
        </member>
        <member name="P:Ace.Communication.Scan.VScan.Address">
            <summary>
            Gets the IP address of a controller that responded to the broadcast request.
            </summary>
        </member>
        <member name="P:Ace.Communication.Scan.VScan.AddressLocalNIC">
            <summary>
            Gets the IP address of a controller that responded to the broadcast request.
            </summary>
        </member>
        <member name="P:Ace.Communication.Scan.VScan.SubNet">
            <summary>
            Gets the subnet of the controller
            </summary>
        </member>
        <member name="P:Ace.Communication.Scan.VScan.Name">
            <summary>
            Gets the text name of the controller that responded to the broadcast request.
            In eV+, this name can be set with a DEVICE instruction.
            </summary>
        </member>
        <member name="P:Ace.Communication.Scan.VScan.ControllerType">
            <summary>
            Gets the type of the controller.
            </summary>
        </member>
        <member name="P:Ace.Communication.Scan.VScan.SerialNumber">
            <summary>
            Gets the serial number of the controller.
            </summary>
        </member>
        <member name="P:Ace.Communication.Scan.VScan.Version">
            <summary>
            Gets the V+ version associated with the controller
            </summary>		
        </member>
        <member name="P:Ace.Communication.Scan.VScan.IsEmulator">
            <summary>
            Gets a value indicating whether the controller is an emulator or a real system
            </summary>
            <value>
            <c>true</c> if this instance is emulator; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ace.Communication.Scan.VScan.Robots">
            <summary>
            Gets the robots configured on the controller
            </summary>
        </member>
        <member name="P:Ace.Communication.Scan.VScan.IsConnected">
            <summary>
            Gets if the controller appears to be connected to ACE PC
            </summary>
            <value>
            Is the controller already connected.
            </value>
        </member>
        <member name="P:Ace.Communication.Scan.VScan.ErrorCode">
            <summary>
            Gets the error code
            </summary>
        </member>
        <member name="P:Ace.Communication.Scan.VScan.RespHeaderMsg">
            <summary>
            the header message responded from the controller boardcasting
            </summary>
        </member>
        <member name="P:Ace.Communication.Scan.VScan.RespBodyMsg">
            <summary>
            the body message responded from the controller boardcasting
            </summary>
        </member>
        <member name="E:Ace.Communication.Scan.VScan.ErrorDetected">
            <summary>
            Occurs when a error message is logged by the scan operation.
            </summary>
        </member>
        <member name="M:Ace.Communication.Scan.VScan.#ctor(System.Net.IPAddress,Ace.Communication.Scan.VScanResponse.ControllerConfigType,Ace.Communication.Scan.VScanResponse.ControllerConfigDataType1,System.Collections.Generic.List{Ace.Communication.Scan.VScanRobotDetails})">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.Scan.VScan" /> class.
            </summary>		
            <param name="addressLocalNIC">IP Address of Local NIC</param>
            <param name="respHeaderMsg">The controller respond header message information.</param>
            <param name="respBodyMsg">The controller respond body message information.</param>
            <param name="robotInfos">The robot information.</param>
        </member>
        <member name="M:Ace.Communication.Scan.VScan.OnErrorDetected(System.String,System.Exception)">
            <summary>
            Called when an error is detected.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Ace.Communication.Scan.VScan.Complete">
            <summary>
            Completes the scan operation for this instance.
            </summary>
        </member>
        <member name="M:Ace.Communication.Scan.VScan.ExtractDetails">
            <summary>
            Extracts the extra information about the controller
            </summary>
        </member>
        <member name="M:Ace.Communication.Scan.VScan.Equals(System.Object)">
            <summary>
            Returns true if the specified object is the same as this one.
            </summary>
        </member>
        <member name="M:Ace.Communication.Scan.VScan.GetHashCode">
            <summary>
            Returns an IP-address based hashcode.
            </summary>
        </member>
        <member name="M:Ace.Communication.Scan.VScan.ToString">
            <summary>
            Returns the IP address of the located controller.
            </summary>
        </member>
        <member name="T:Ace.Communication.Scan.VScanCompletedEventArgs">
            <summary>
            Indicates a controller has been detected over the VScan protocol.
            </summary>
        </member>
        <member name="M:Ace.Communication.Scan.VScanCompletedEventArgs.#ctor(Ace.Communication.Scan.VScan)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.Scan.VScanCompletedEventArgs"/> class.
            </summary>
            <param name="scanDetails">The scan details.</param>
        </member>
        <member name="P:Ace.Communication.Scan.VScanCompletedEventArgs.ScanDetails">
            <summary>
            The current progress percentage between 0 and 100.
            </summary>
        </member>
        <member name="T:Ace.Communication.Scan.VScanEngineMulticast">
            <summary>
            Represents a multicast scan operation where we explicitly bind to the network adaptors
            </summary>
        </member>
        <member name="M:Ace.Communication.Scan.VScanEngineMulticast.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.Scan.VScanEngineMulticast"/> class.
            </summary>
        </member>
        <member name="M:Ace.Communication.Scan.VScanEngineMulticast.PerformScan(System.Int32)">
            <summary>
            Performs a network scan.
            </summary>
            <param name="waitTime">The length of time for performing the scan.</param>
        </member>
        <member name="M:Ace.Communication.Scan.VScanEngineMulticast.GetListLocalNICsIPAddress">
            <summary>
            Get the list of local available enabled network adapters (NICs) IPs
            </summary>		
        </member>
        <member name="M:Ace.Communication.Scan.VScanEngineMulticast.ResetReceiverSockets">
            <summary>
            Close all receiver sockets and clear the list.
            </summary>		
        </member>
        <member name="M:Ace.Communication.Scan.VScanEngineMulticast.CreateReceiverSockets(System.Int32,System.Net.IPAddress,System.Collections.Generic.IEnumerable{System.Net.IPAddress})">
            <summary>
            Create receiver sockets with UdpClient and setup the receive callback to process the messages.
            </summary>
            <param name="receiverPort">receiving port.</param>
            <param name="multicastAddress">multi cast address.</param>
            <param name="listLocalNICsIP">list of IPs of the local NICs.</param>
        </member>
        <member name="M:Ace.Communication.Scan.VScanEngineMulticast.CreateSenderSocketsAndSendBroadcast(System.Int32,System.Net.IPAddress,System.Collections.Generic.IEnumerable{System.Net.IPAddress})">
            <summary>
            create sender sockets and send a broad casting message out.
            </summary>
            <param name="senderPort">sending port.</param>
            <param name="multicastAddress">multi cast address.</param>
            <param name="listLocalNICsIP">list of IPs of the local NICs.</param>
        </member>
        <member name="M:Ace.Communication.Scan.VScanEngineMulticast.ResetSenderSockets">
            <summary>
            close all senders sockets and clear the list.
            </summary>		
        </member>
        <member name="M:Ace.Communication.Scan.VScanEngineMulticast.ReceiveCallback(System.IAsyncResult)">
            <summary>
            Callback when a controller is detected on the port
            </summary>
            <param name="ar">The async results.</param>
        </member>
        <member name="T:Ace.Communication.Scan.VScanEngineSimple">
            <summary>
            Represents a simple scan operation letting the OS handling the binding of the network devices.
            </summary>
        </member>
        <member name="M:Ace.Communication.Scan.VScanEngineSimple.PerformScan(System.Int32)">
            <summary>
            Performs a network scan.
            </summary>
            <param name="waitTime">The length of time for performing the scan.</param>
        </member>
        <member name="M:Ace.Communication.Scan.VScanEngineSimple.ReceiveCallback(System.IAsyncResult)">
            <summary>
            Callback when a controller is detected on the port
            </summary>
            <param name="ar">The async results.</param>
        </member>
        <member name="T:Ace.Communication.Scan.VScanEngine">
            <summary>
            Represents a generic engine capable of finding controllers on the PC network
            </summary>
        </member>
        <member name="E:Ace.Communication.Scan.VScanEngine.ControllerDetected">
            <summary>
            Occurs when a controller is detected.
            </summary>
        </member>
        <member name="E:Ace.Communication.Scan.VScanEngine.ErrorDetected">
            <summary>
            Occurs when a error message is logged by the scan operation.
            </summary>
        </member>
        <member name="P:Ace.Communication.Scan.VScanEngine.IsStopping">
            <summary>
            Gets a value indicating whether the scan operation has been commanded to stop.
            </summary>
            <value>
            <c>true</c> if this instance is stopping; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Ace.Communication.Scan.VScanEngine.PerformScan(System.Int32)">
            <summary>
            Performs a network scan.
            </summary>
            <param name="waitTime">The length of time for performing the scan.</param>
        </member>
        <member name="M:Ace.Communication.Scan.VScanEngine.Stop">
            <summary>
            Issues a request to stop the scan operation.
            </summary>
        </member>
        <member name="M:Ace.Communication.Scan.VScanEngine.OnControllerDetected(Ace.Communication.Scan.VScan)">
            <summary>
            Called when a controller is detected.
            </summary>
            <param name="scan">The scan.</param>
        </member>
        <member name="M:Ace.Communication.Scan.VScanEngine.OnErrorDetected(System.String,System.Exception)">
            <summary>
            Called when an error is detected.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Ace.Communication.Scan.VScanEngine.SendBroadcast(System.Byte[],System.Int32,System.Net.IPAddress,System.Net.IPAddress,System.Int32)">
            <summary>
            send broad cast to controller, and return the created socket.
            </summary>
            <param name="data">data to send</param>
            <param name="dataLen">len of data to send</param>
            <param name="locaNICIP">IP Address of the local NIC</param>
            <param name="multicastAddress">IP Address of multi cast</param>
            <param name="senderPort">sender port</param>
            <returns>created socket</returns>
        </member>
        <member name="M:Ace.Communication.Scan.VScanEngine.CreateSendBroadcastSocket(System.Net.IPAddress,System.Net.IPAddress,System.Int32)">
            <summary>
            Create send broad cast socket, and return the created socket.
            </summary>		
            <param name="locaNICIP">IP Address of the local NIC</param>
            <param name="multicastAddress">IP Address of multi cast</param>
            <param name="senderPort">sender port</param>
            <returns>created socket</returns>
        </member>
        <member name="M:Ace.Communication.Scan.VScanEngine.DecodeScanResults(System.Byte[],System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Decodes the scan results and convert to a VSCAN object
            </summary>
            <param name="data">The data.</param>
            <param name="respondingEndPoint">The responding end point.</param>
            <param name="localNICEndPoint">The local nic end point.</param>
            <returns>The VSCAN representing the results</returns>
        </member>
        <member name="M:Ace.Communication.Scan.VScanEngine.ProcessResponding(System.Byte[],System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            process the responding from the scanning
            </summary>		
            <param name="data">data received from the responding server.</param>
            <param name="respondingEndPoint">the responding end point.</param>
            <param name="localNICEndPoint">the local NIC end point.</param>
        </member>
        <member name="T:Ace.Communication.Scan.VScanException">
            <summary>
            New exception class that can be thrown by functions of this VScan.
            </summary>	
        </member>
        <member name="P:Ace.Communication.Scan.VScanException.ErrorCode">
            <summary>
            Error code of the Scan process
            </summary>		
        </member>
        <member name="M:Ace.Communication.Scan.VScanException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ace.Communication.Scan.VScanException.#ctor(System.String,Ace.Communication.VScanError)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Error message</param>		
            <param name="errorCode">enum error code.</param>		
        </member>
        <member name="M:Ace.Communication.Scan.VScanException.#ctor(System.String,Ace.Communication.VScanError,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Error message</param>		
            <param name="errorCode">enum error code.</param>
            <param name="ex">original exception.</param>		
        </member>
        <member name="M:Ace.Communication.Scan.VScanException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.Scan.VScanException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Ace.Communication.Scan.VScanException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes data from this object, so that it can be restored later.
            </summary>
            <param name="info">Holds all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of the serialized stream.</param>
        </member>
        <member name="T:Ace.Communication.Scan.VScanErrorEventArgs">
            <summary>
            Event arguments for a VScan / VScanManager event log
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Ace.Communication.Scan.VScanErrorEventArgs.Error">
            <summary>
            Gets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="P:Ace.Communication.Scan.VScanErrorEventArgs.Message">
            <summary>
            Gets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="M:Ace.Communication.Scan.VScanErrorEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.Scan.VScanErrorEventArgs"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The exception</param>
        </member>
        <member name="T:Ace.Communication.Scan.VScanManager">
            <summary>
            A .NET implementation of ActiveVScan, which scans for controllers on the local network.
            </summary>
        </member>
        <member name="P:Ace.Communication.Scan.VScanManager.ScannedControllers">
            <summary>
            Gets the scanned controllers.
            </summary>
            <value>
            The scanned controllers.
            </value>
        </member>
        <member name="P:Ace.Communication.Scan.VScanManager.IsScanning">
            <summary>
            Gets a value indicating whether the scan manager is actively scanning.
            </summary>
            <value>
              <c>true</c> if the scan  manager is scanning; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Ace.Communication.Scan.VScanManager.ControllerDetected">
            <summary>
            Occurs when a controller is detected.
            </summary>
        </member>
        <member name="E:Ace.Communication.Scan.VScanManager.ControllerScanCompleted">
            <summary>
            Occurs when a controller scan has completed.
            </summary>
        </member>
        <member name="E:Ace.Communication.Scan.VScanManager.ScanCompleted">
            <summary>
            Occurs when the scan operation has completed.
            </summary>
        </member>
        <member name="E:Ace.Communication.Scan.VScanManager.ErrorDetected">
            <summary>
            Occurs when a error message is logged by the scan operation.
            </summary>
        </member>
        <member name="M:Ace.Communication.Scan.VScanManager.#ctor">
            <summary>
            Constructor.
            </summary>				
        </member>
        <member name="M:Ace.Communication.Scan.VScanManager.StartScan(System.Int32,System.Boolean)">
            <summary>
            Scans the available controller IP addresses
            </summary>
            <param name="waitTimeMillis">Response wait time</param>
            <param name="extractDetails">Extracting the controller details</param>
        </member>
        <member name="M:Ace.Communication.Scan.VScanManager.StopScan">
            <summary>
            stop the scanning process
            </summary>		
        </member>
        <member name="M:Ace.Communication.Scan.VScanManager.WaitScan">
            <summary>
            Wait for scan operations to complete
            </summary>
        </member>
        <member name="M:Ace.Communication.Scan.VScanManager.ChangeAddress(Ace.Communication.Scan.VScan,System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Change the IPAddress on the controller
            </summary>
            <param name="scanData">Scan responded</param>
            <param name="newAddress">new address</param>
            <param name="newSubnet">new subnet</param>
        </member>
        <member name="M:Ace.Communication.Scan.VScanManager.UpdateControllerConfig(Ace.Communication.Scan.VScan,System.Net.IPAddress,System.Net.IPAddress,System.String,System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
            Update address, name, autostart, ePLCAutoStart on the controller
            </summary>
            <param name="scanData">Scan responded</param>
            <param name="newAddress">new address</param>
            <param name="newSubnet">new subnet</param>
            <param name="newName">new name</param>
            <param name="autoStart">autoStart</param>
            <param name="ePLCAutoStart">ePLC autoStart</param>
        </member>
        <member name="M:Ace.Communication.Scan.VScanManager.ScanMain">
            <summary>
            Main routine performing the scan operation
            </summary>
        </member>
        <member name="M:Ace.Communication.Scan.VScanManager.LockScan">
            <summary>
            Lock Scan Main		
            </summary>	
        </member>
        <member name="M:Ace.Communication.Scan.VScanManager.UnlockScan">
            <summary>
            UnLock Scan Main		
            </summary>	
        </member>
        <member name="M:Ace.Communication.Scan.VScanManager.ExtractDetailsAndShowOnUI(Ace.Communication.Scan.VScan)">
            <summary>
            Extracts the details of a scan operation and indicate when the controller
            scan is done.
            </summary>
            <param name="par">The par.</param>
        </member>
        <member name="M:Ace.Communication.Scan.VScanManager.scanEngine_ControllerDetected(System.Object,Ace.Communication.Scan.VScanCompletedEventArgs)">
            <summary>
            Handles the ControllerDetected event of the scanEngine control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Ace.Communication.Scan.VScanCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ace.Communication.Scan.VScanManager.scanEngine_ErrorDetected(System.Object,Ace.Communication.Scan.VScanErrorEventArgs)">
            <summary>
            Handles the ErrorDetected event of the scanEngine control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Ace.Communication.Scan.VScanErrorEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ace.Communication.Scan.VScanManager.scanDetails_ErrorDetected(System.Object,Ace.Communication.Scan.VScanErrorEventArgs)">
            <summary>
            Handles the ErrorDetected event of the scanDetails control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Ace.Communication.Scan.VScanErrorEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ace.Communication.Scan.VScanManager.OnControllerDetected(Ace.Communication.Scan.VScan)">
            <summary>
            Called when a controller is detected.
            </summary>
            <param name="scan">The scan.</param>
        </member>
        <member name="M:Ace.Communication.Scan.VScanManager.OnControllerScanCompleted(Ace.Communication.Scan.VScan)">
            <summary>
            Called when a controller scan has completed.
            </summary>
            <param name="scan">The scan.</param>
        </member>
        <member name="M:Ace.Communication.Scan.VScanManager.OnScanCompleted">
            <summary>
            Called when the scan operation has completed.
            </summary>
        </member>
        <member name="M:Ace.Communication.Scan.VScanManager.OnErrorDetected(System.String,System.Exception)">
            <summary>
            Called when an error is detected.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:Ace.Communication.Scan.VScanResponse">
            <summary>
            VScan response that is used to communicate with a controller with broadcasting scanning
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.AutoStart_Reset">
            <summary>
            AutoStart reset - Bit0 and Bit1 are OFF
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.AutoStart_Enable">
            <summary>
            AutoStart enabled - Bit0 is ON
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.AutoStart_Disable">
            <summary>
            AutoStart disabled - Bit1 is ON
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ePLC_AutoStart_Reset">
            <summary>
            ePLCAutoStart reset - Bit2 and Bit3 are OFF
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ePLC_AutoStart_Enable">
            <summary>
            ePLC AutoStart enabled - Bit2 is ON
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ePLC_AutoStart_Disable">
            <summary>
            ePLC AutoStart enabled - Bit3 is ON
            </summary>
        </member>
        <member name="T:Ace.Communication.Scan.VScanResponse.ControllerConfigType">
            <summary>
            ControllerConfigType structure.
            this struct is a head structure following with (ControllerConfigDataType0 or ControllerConfigDataType1) structure
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ControllerConfigType.oldipa">
            <summary>
            Current IP address (input / output)
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ControllerConfigType.subnet">
            <summary>
            Current subnet mask (input / output)
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ControllerConfigType.newipa">
            <summary>
            New IP address (input only)
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ControllerConfigType.reserved1">
            <summary>
            Reserved. Not in use
            </summary>
            <remarks>
            Used to be "Enable AdeptWindows" for AWC.
            </remarks>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ControllerConfigType.autov2">
            <summary>
            Auto.v2 autostart enabled (input / output)
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ControllerConfigType.nfssvr">
            <summary>
            Set address of default controlling PC (input only)
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ControllerConfigType.restrt">
            <summary>
            Restart AWC controller (input only)
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ControllerConfigType.format">
            <summary>
            Message format code (output only)
            </summary>
            <remarks>
            This format code will dictate which ControllerConfigDataType is used. 
            The supported formats are 0 and 1.
            </remarks>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ControllerConfigDataType0_Name_Length">
            <summary>
            The Length of the name field for the  controller configuration data type0 structure
            </summary>
        </member>
        <member name="T:Ace.Communication.Scan.VScanResponse.ControllerConfigDataType0">
            <summary>
            ControllerConfigDataType0 when format code is 0.
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ControllerConfigDataType0.name">
            <summary>
            Null terminated controller name (input / output)
            </summary>			
        </member>
        <member name="T:Ace.Communication.Scan.VScanResponse.ControllerConfigDataType1">
            <summary>
            ControllerConfigDataType1 when format code is 1.
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ControllerConfigDataType1.name">
            <summary>
            Null terminated controller name (input / output)
            </summary>			
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ControllerConfigDataType1.controllerType">
            <summary>
            Controller type (ID device = 4 component = 5) (output)
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ControllerConfigDataType1.controllerSerialNumber">
            <summary>
            Controller serial number (output)
            </summary>                 
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ControllerConfigDataType1.softwareVersionMajor">
            <summary>
            V+ major version number (output)
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ControllerConfigDataType1.softwareVersionMinor">
            <summary>
            V+ Minor version number (output)
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ControllerConfigDataType1.softwareVersionEdit">
            <summary>
            V+ version edit letter. ex: 'B' (output)
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ControllerConfigDataType1.softwareVersionRevision">
            <summary>
            V+ revision number. ex: 10 in 'B10' (output)
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ControllerConfigDataType1.isEmulator">
            <summary>
            Is the instance of eV+ an emulator (output)
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ControllerConfigDataType1.ACETaskState">
            <summary>
            The state of the last task (ACE task) TASK(1,sv.max_task) (output)
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ControllerConfigDataType1.robotCount">
            <summary>
            The number of robots (output)
            </summary>
        </member>
        <member name="T:Ace.Communication.Scan.VScanResponse.ControllerConfigDataType1Robot">
            <summary>
            ControllerConfigDataType1Robot robot data type
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ControllerConfigDataType1Robot.robotNumber">
            <summary>
            The robot number
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ControllerConfigDataType1Robot.kinematicType">
            <summary>
            The robot kinematicType
            </summary>
        </member>
        <member name="F:Ace.Communication.Scan.VScanResponse.ControllerConfigDataType1Robot.productType">
            <summary>
            The robot productType
            </summary>
        </member>
        <member name="T:Ace.Communication.Scan.VScanRobotDetails">
            <summary>
            Describes a robot detected in a VSCAN operation
            </summary>
        </member>
        <member name="P:Ace.Communication.Scan.VScanRobotDetails.RobotNumber">
            <summary>
            Gets the robot number.
            </summary>
            <value>
            The robot number.
            </value>
        </member>
        <member name="P:Ace.Communication.Scan.VScanRobotDetails.Kinematic">
            <summary>
            Gets the kinematic type
            </summary>
            <value>
            The kinematic.
            </value>
        </member>
        <member name="P:Ace.Communication.Scan.VScanRobotDetails.Product">
            <summary>
            Gets the product type
            </summary>
            <value>
            The product.
            </value>
        </member>
        <member name="M:Ace.Communication.Scan.VScanRobotDetails.#ctor(System.Int32,Ace.Communication.KinematicType,Ace.Communication.ProductType)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.Scan.VScanRobotDetails"/> class.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="kinematicType">Type of the kinematic.</param>
            <param name="productType">Type of the product.</param>
        </member>
        <member name="T:Ace.Communication.Tftp.DummyTftpUser">
            <summary>
            Fallback class used if the tftp server is not available. This should never be used.
            </summary>
        </member>
        <member name="T:Ace.Communication.Tftp.TftpError">
            <summary>
            Different kinds of TFTP Errors
            </summary>
        </member>
        <member name="T:Ace.Communication.Tftp.TftpOpcode">
            <summary>
            Operation request codes for the TFTP protocol
            </summary>
        </member>
        <member name="T:Ace.Communication.Tftp.TftpClient">
            <summary>
            Generic TFTP client / base class
            </summary>
        </member>
        <member name="E:Ace.Communication.Tftp.TftpClient.LogMessage">
            <summary>
            Occurs when a log message is generated.
            </summary>
        </member>
        <member name="T:Ace.Communication.Tftp.TftpConstants">
            <summary>
            General constants used by the TFTP subsystem
            </summary>
        </member>
        <member name="T:Ace.Communication.Tftp.TftpLogEventArgs">
            <summary>
            Event arguments detailing a log message generated by the TFTP server
            </summary>
        </member>
        <member name="P:Ace.Communication.Tftp.TftpLogEventArgs.IsError">
            <summary>
            Gets if the log message represents an error.
            </summary>
            <value>
              <c>true</c> if this instance is error; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ace.Communication.Tftp.TftpLogEventArgs.Message">
            <summary>
            Gets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="M:Ace.Communication.Tftp.TftpLogEventArgs.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.Tftp.TftpLogEventArgs" /> class.
            </summary>
            <param name="isError">if set to <c>true</c> the message represents an error.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:Ace.Communication.Tftp.TftpReadClient">
            <summary>
            TFTP Read client used to process read requests
            </summary>
        </member>
        <member name="T:Ace.Communication.Tftp.TftpServer">
            <summary>
            Simple TFTP Server. Supports multiple concurrent clients.
            </summary>		
            <remarks>
            Booting a SmartController from TFTP:
            <list type="bullet">
            <item>Disable autoboot with the hardware or software DIP switches.</item>
            <item>At the prompt for the boot device, enter "X" and either Enter (load and go), ^J (verbose load and go), or ^L (verbose load and not go).</item>
            <item>Enter the IP address of the TFTP host (in "dotted-decimal" format).</item>
            <item>Enter the path to the V+ system on the TFTP host.  For example: C:\Adept\Disks\Disk_C\V1603\</item>
            </list>
            SW1 Settings:
            <code>
            SW 1 SW 2 SW 3 SW 4 Interpretation
            ON   ON   ON   ON   No auto boot, all other settings per CompactFlash
            OFF  ON   ON   ON   No auto boot, user interface via serial port
            ON   ON   OFF  ON   No auto boot, user interface via Ethernet AdeptWindows (use IP address in CompactFlash)
            OFF  ON   OFF  ON   No auto boot, user interface via Ethernet AdeptWindows (use default IP address)
            OFF  OFF  OFF  OFF  Operation per CompactFlash and NVRAM settings
            </code>
            </remarks>
        </member>
        <member name="M:Ace.Communication.Tftp.TftpServer.StartServer(System.String)">
            <summary>
            Starts a TFTP server in its own thread.
            </summary>
            <param name="endPoint">The expected end-point for the TFTP operation.</param>
            <returns>
            An object that should be disposed when use of the server is complete.
            </returns>
        </member>
        <member name="M:Ace.Communication.Tftp.TftpServer.StartServer(System.String,System.Int32)">
            <summary>
            Starts a TFTP server in its own thread and use the given port
            </summary>
            <param name="endPoint">The expected end-point for the TFTP operation.</param>
            <param name="TftpPort">The TFTP port.</param>
            <returns>
            An object that should be disposed when use of the server is complete.
            </returns>
        </member>
        <member name="M:Ace.Communication.Tftp.TftpServer.StartServer">
            <summary>
            Starts a TFTP server in its own thread.
            </summary>
            <returns>
            An object that should be disposed when use of the server is complete.
            </returns>
        </member>
        <member name="M:Ace.Communication.Tftp.TftpServer.GetEndPointKey(System.String)">
            <summary>
            Gets the key associated with the specified end point.
            </summary>
            <param name="endPoint">The end point.</param>
            <returns>The key used to identify the end point</returns>
        </member>
        <member name="E:Ace.Communication.Tftp.TftpServer.LogMessage">
            <summary>
            Occurs when a log message is generated.
            </summary>
        </member>
        <member name="M:Ace.Communication.Tftp.TftpServer.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Ace.Communication.Tftp.TftpServer"/> class from being created.
            </summary>
        </member>
        <member name="M:Ace.Communication.Tftp.TftpServer.#ctor(System.Int32)">
            <summary>
            Use a port other than default 69.
            </summary>
            <param name="TftpPort">The TFTP port.</param>
        </member>
        <member name="M:Ace.Communication.Tftp.TftpServer.AddUser(Ace.Communication.Tftp.TftpUser)">
            <summary>
            Adds the user to the list of active users
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:Ace.Communication.Tftp.TftpServer.RemoveUser(Ace.Communication.Tftp.TftpUser)">
            <summary>
            Removes the user from the list of active users.
            If no users remain, the server will dispose of itself.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:Ace.Communication.Tftp.TftpServer.Start">
            <summary>
            Start server
            </summary>
        </member>
        <member name="M:Ace.Communication.Tftp.TftpServer.Dispose">
            <summary>
            Stop server
            </summary>
        </member>
        <member name="M:Ace.Communication.Tftp.TftpServer.Listen">
            <summary>
            Main listener thread loop
            </summary>
        </member>
        <member name="M:Ace.Communication.Tftp.TftpServer.client_LogMessage(System.Object,Ace.Communication.Tftp.TftpLogEventArgs)">
            <summary>
            Handles the LogMessage event of the client control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Ace.Communication.Tftp.TftpLogEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ace.Communication.Tftp.TftpServer.OnLog(System.Boolean,System.String)">
            <summary>
            Called when a message should be logged.
            </summary>
            <param name="error">if set to <c>true</c> the message represents an error.</param>
            <param name="logString">The log string.</param>
        </member>
        <member name="T:Ace.Communication.Tftp.TftpUser">
            <summary>
            Helper class representing an individual TFTP user
            </summary>
        </member>
        <member name="M:Ace.Communication.Tftp.TftpUser.#ctor(Ace.Communication.Tftp.TftpServer,System.Threading.Mutex)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.Tftp.TftpUser"/> class.
            </summary>
            <param name="server">The server.</param>
            <param name="mutex">The mutex.</param>
        </member>
        <member name="M:Ace.Communication.Tftp.TftpUser.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Ace.Communication.Tftp.TftpWriteClient">
            <summary>
            TFTP Write client used to process write requests
            </summary>
        </member>
        <member name="M:Ace.Communication.Tftp.TftpWriteClient.#ctor(Ace.Communication.Tftp.TftpServer,System.Net.IPEndPoint,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.Tftp.TftpWriteClient"/> class.
            </summary>
            <param name="server">The server.</param>
            <param name="endpoint">The endpoint.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="T:Ace.Communication.Util.BitConverterInverter">
            <summary>
            Implements BitConverter style functionality, except that it assumes that the
            endian-ness of the bit conversion needs to be swapped.
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.BitConverterInverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Gets a 32-bit integer from the array of bytes starting at the given index.
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.BitConverterInverter.FromInt32(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies a 32-bit integer into the byte array at the specified index.
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.BitConverterInverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Gets a 16-bit integer from the array of bytes starting at the given index.
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.BitConverterInverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Gets a 16-bit unsigned integer from the array of bytes starting at the given index.
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.BitConverterInverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Gets a 32-bit unsigned integer from the array of bytes starting at the given index.
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.BitConverterInverter.FromInt16(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies a 16-bit integer into the byte array at the specified index.
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.BitConverterInverter.FromUInt32(System.Double,System.Byte[],System.Int32)">
            <summary>
            Copies a 32-bit unsigned integer into the byte array at the specified index.
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.BitConverterInverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
            Gets a 32-bit float from the array of bytes starting at the given index.
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.BitConverterInverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
            Gets a 64-bit double from the array of bytes starting at the given index.
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.BitConverterInverter.FromSingle(System.Single,System.Byte[],System.Int32)">
            <summary>
            Copies a 32-bit float into the byte array at the specified index.
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.BitConverterInverter.FromDouble(System.Double,System.Byte[],System.Int32)">
            <summary>
            Copies a 64-bit double into the byte array at the specified index.
            </summary>
        </member>
        <member name="T:Ace.Communication.Util.EndianUtil">
            <summary>
            Endian swap functions
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.EndianUtil.EndianSwap(System.Int32)">
            <summary>
            Endian swap function : required because data coming from 68000 / PowerPC
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.EndianUtil.EndianSwap(System.Single)">
            <summary>
            Use this function only when there is no risk to have NaN for pValue
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.EndianUtil.EndianSwap(Ace.Communication.EventBridge.vgeneric)">
            <summary>
            Perfrom Endian Swap on a vrun struct
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.EndianUtil.EndianSwap(Ace.Communication.EventBridge.vrun)">
            <summary>
            Perfrom Endian Swap on a vrun struct
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.EndianUtil.EndianSwap(Ace.Communication.EventBridge.vresult)">
            <summary>
            Perfrom Endian Swap on a vresult struct
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.EndianUtil.EndianSwap(Ace.Communication.EventBridge.vlocation)">
            <summary>
            Perfrom Endian Swap on a vloaction struct
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.EndianUtil.EndianSwap(Ace.Communication.EventBridge.vparameter,System.Boolean)">
            <summary>
            Perfrom Endian Swap on vparameter struct
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.EndianUtil.EndianSwap(Ace.Communication.EventBridge.vstate)">
            <summary>
            Perfrom Endian Swap on vstate struct
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.EndianUtil.EndianSwap(Ace.Communication.EventBridge.vwaiti)">
            <summary>
            Perfrom Endian Swap on vwait struct
            </summary>
        </member>
        <member name="T:Ace.Communication.Util.IOUtil">
            <summary>
            IO utility functions
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.IOUtil.GetClosestIPAddress(System.Net.IPAddress)">
            <summary>
            Gets the closest IP address to a specified address
            </summary>
            <param name="addressToCompare">The address to compare.</param>
            <returns>The closest address</returns>
        </member>
        <member name="M:Ace.Communication.Util.IOUtil.GetTempFileName">
            <summary>
            Gets the name of a temporary file.
            </summary>
            <returns>The file name</returns>
        </member>
        <member name="M:Ace.Communication.Util.IOUtil.WriteStreamToFile(System.IO.Stream,System.String)">
            <summary>
            Writes the specified stream to the given file.
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.IOUtil.DeleteFile(System.String)">
            <summary>
            Deletes and confirms the deletion of the specified file.
            </summary>
            <param name="file">The file to delete.</param>
            <exception cref="T:System.IO.IOException"></exception>
            <remarks>
            There is a 20 second timeout for the file to be deleted
            </remarks>
        </member>
        <member name="M:Ace.Communication.Util.NativeMethods.GetLastError">
            <summary>
            This seems to work better than Marshal.GetLastWin32Error(), by giving a better code. Please verify
            that GetLastWin32Error() works well if you intend to use it instead.
            </summary>
        </member>
        <member name="T:Ace.Communication.Util.VScanUtil">
            <summary>
            Utility methods used in the scanning operation
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.VScanUtil.Ping(System.String,System.Int32)">
            <summary>
            Ping the specific IP (Controller), and return True or False
            </summary>
            <param name="sAddress">IP Address</param>
            <param name="pingTimeout">Ping timeout</param>
            <returns>ping success true or false</returns>
        </member>
        <member name="M:Ace.Communication.Util.VScanUtil.Ping(System.Net.IPAddress,System.Int32)">
            <summary>
            Ping the specific IP (Controller), and return True or False
            </summary>
            <param name="lIPAddress">IP Address</param>
            <param name="pingTimeout">Ping timeout</param>
            <returns>ping success true or false</returns>
        </member>
        <member name="M:Ace.Communication.Util.VScanUtil.ResetSocket(System.Net.Sockets.Socket)">
            <summary>
            reset the socket.
            </summary>
            <param name="socket">socket to reset</param>
        </member>
        <member name="M:Ace.Communication.Util.VScanUtil.ResetSocket(System.Net.Sockets.UdpClient)">
            <summary>
            reset the socket.
            </summary>
            <param name="udpClient">The UDP client.</param>
        </member>
        <member name="T:Ace.Communication.Util.PingUtil">
            <summary>
            Utility class for ping operations
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.PingUtil.Ping(System.String,System.Int32)">
            <summary>
            Ping the specific IP (Controller), and return True or False
            </summary>
            <param name="sAddress">IP Address</param>
            <param name="pingTimeout">Ping timeout</param>
            <returns>ping success true or false</returns>
        </member>
        <member name="M:Ace.Communication.Util.PingUtil.Ping(System.Net.IPAddress,System.Int32)">
            <summary>
            Ping the specific IP (Controller), and return True or False
            </summary>
            <param name="lIPAddress">IP Address</param>
            <param name="pingTimeout">Ping timeout</param>
            <returns>ping success true or false</returns>
        </member>
        <member name="T:Ace.Communication.Util.StructUtil">
            <summary>
            Implement a utility to handle converting between struct and byte array
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.StructUtil.BytesToStruct``1(System.Byte[],System.Int32)">
            <summary>
            this function will convert byte array to struct
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bytesToConvert"></param>
            <param name="startIndex">the starting index base is zero</param>
            <returns>converted struct</returns>
        </member>
        <member name="M:Ace.Communication.Util.StructUtil.BytesToStruct``1(System.Byte[])">
            <summary>
            this function will convert byte array to struct
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bytesToConvert"></param>		
            <returns>converted struct</returns>
        </member>
        <member name="M:Ace.Communication.Util.StructUtil.BytesToString(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            this function will convert byte array to string
            </summary>		
            <param name="bytesToConvert">byte array to convert</param>		
            <param name="startIndex">the starting converting index base is zero</param>
            <param name="trimTrailingNulls">trim ending nulls</param>	
            <returns>converted string</returns>
        </member>
        <member name="M:Ace.Communication.Util.StructUtil.BytesToString(System.Byte[],System.Boolean)">
            <summary>
            this function will convert byte array to string
            </summary>		
            <param name="bytesToConvert">byte array to convert</param>		
            <param name="trimTrailingNulls">trim ending nulls</param>	
            <returns>converted string</returns>
        </member>
        <member name="M:Ace.Communication.Util.StructUtil.StringToBytes(System.String,System.Int32,System.Char)">
            <summary>
            this function will convert string to byte array
            </summary>		
            <param name="stringToConvert">string to convert</param>		
            <param name="totalWidthOfConvertedBytes">total width of the converted bytes(chars + padding char)</param>	
            <param name="rightPaddingChar">right padding char</param>	
            <returns>converted byte array</returns>
        </member>
        <member name="M:Ace.Communication.Util.StructUtil.StructToBytes``1(System.Object)">
            <summary>
            this function will convert struct to byte array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="structToConvert"></param>
            <returns>converted byte array</returns>
        </member>
        <member name="M:Ace.Communication.Util.StructUtil.StructToBytes``1(System.Object,System.Byte[]@,System.Int32)">
            <summary>
            this function will convert struct to byte array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="convertedBytes">the converted bytes</param>
            <param name="convertedBytesStartIndex">start index of the converted bytes</param>
            <param name="structToConvert"></param>
            <returns>converted byte array</returns>
        </member>
        <member name="M:Ace.Communication.Util.StructUtil.SizeOfStruct``1">
            <summary>
            calculate the size of the struct
            </summary>
            <typeparam name="T"></typeparam>		
            <returns>size of the struct</returns>
        </member>
        <member name="T:Ace.Communication.Util.TextUtil">
            <summary>
            General utility methods
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.TextUtil.ParseDoubleArray(System.String,System.Int32,System.Int32)">
            <summary>
            Parse a space-delimited array of values into an array. Multiple delimiters are combined.
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.TextUtil.ParseDoubleArray(System.String,System.Int32,System.Int32,System.Globalization.NumberFormatInfo)">
            <summary>
            Parse a space-delimited array of values into an array. Multiple delimiters are combined.
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.TextUtil.ParseStringArray(System.String,System.Int32,System.Int32)">
            <summary>
            Parse a space-delimited array of values into an array. Multiple delimiters are combined.
            </summary>
        </member>
        <member name="M:Ace.Communication.Util.TextUtil.FormatDoubleArray(System.Double[],System.Int32,System.Int32,System.String)">
            <summary>
            Format a double array as a string with fixed width for each token.
            </summary>
            <param name="values">The values to format.</param>
            <param name="width">The width of the field (negative for left-justified).</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <param name="delimiter">A string delimiter between tokens.</param>
            <returns>A string with each double in order.</returns>
        </member>
        <member name="M:Ace.Communication.Util.TextUtil.FormatDoubleArray(System.Double[],System.Int32,System.Int32,System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Format a double array as a string with fixed width for each token.
            </summary>
            <param name="values">The values to format.</param>
            <param name="width">The width of the field (negative for left-justified).</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <param name="delimiter">A string delimiter between tokens.</param>
            <param name="format">The format to apply to the array element.</param>
            <returns>
            A string with each double in order.
            </returns>
        </member>
        <member name="M:Ace.Communication.Util.TextUtil.ContainsUnicodeCharacter(System.String)">
            <summary>
            Checks whether a given string contains a unicode character
            </summary>
            <returns>True if the input string contains at least one unicode character</returns>
        </member>
        <member name="M:Ace.Communication.Util.TextUtil.StringToBytes(System.String)">
            <summary>
            Converts a string to bytes.
            If a unicode character is encountered, 0x0200 (unicode start byte + null byte)
            is inserted in the byte array before writing the character. When the 
            next ASCII character is encountered, 0x0300 (unicode end byte + null byte) is 
            again inserted in the byte array before writing the ASCII character.
            </summary>
            <param name="value">string containing unicode characters</param>
            <returns>array of bytes</returns>
        </member>
        <member name="M:Ace.Communication.Util.TextUtil.BytesToString(System.Byte[])">
            <summary>
            Converts bytes to a string.
            If a byte array with unicode characters is received, we extract the characters 
            using ASCII encoding until 0x0200 (unicode start byte + null byte) is encountered.   
            Then, extract the subsequent characters using Unicode encoding until 
            0x0300 (unicode end byte + null byte) is encountered.
            </summary>
            <param name="value">array of bytes</param>
            <returns>string containing unicode characters</returns>
        </member>
        <member name="M:Ace.Communication.Util.TextUtil.ConvertASCIIByteToUnicodeBytes(System.Byte)">
            <summary>
            Converts an ASCII 1-byte character to its equivalent unicode 2-byte representation
            </summary>
            <param name="asciiByte">1-byte ASCII character</param>
            <returns>2-byte unicode representation of the ASCII character</returns>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Controller">
            <summary>
            Represents a controller
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.#ctor(Ace.Communication.VPlusServer.ITcpConnectionMessageSupport)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Controller"/> class.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.Server">
            <summary>
            Gets the communication server associated with the abstraction
            </summary>
            <value>
            The server.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.IO">
            <summary>
            Access the IO associated with the controller
            </summary>
            <value>
            The io.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.FileSystem">
            <summary>
            Gets the file system for the controller
            </summary>
            <value>
            The file system.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.Licenses">
            <summary>
            Gets access to the licenses.
            </summary>
            <value>
            The licenses.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.Firewire">
            <summary>
            Gets access to the firewire data.
            </summary>
            <value>
            The firewire data.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.Remote">
            <summary>
            Gets access to the remote data.
            </summary>
            <value>
            The remote data.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.Profiler">
            <summary>
            Gets access to the profiler data.
            </summary>
            <value>
            The profiler data.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.NVRam">
            <summary>
            Gets access to the NVRam data.
            </summary>
            <value>
            The NVRam data.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.Robots">
            <summary>
            Gets the robots associated with the controller
            </summary>
            <value>
            The robots.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.IsEVPlus">
            <summary>
            Gets a value indicating whether this instance is ev+.
            </summary>
            <value>
            <c>true</c> if this instance is ev+; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.ModelType">
            <summary>
            Gets the type of the model.
            </summary>
            <value>
            The type of the model.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.ControllerType">
            <summary>
            Gets the type of the controller.
            </summary>
            <value>
            The type of the controller.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.RobotCount">
            <summary>
            Gets the number of robots associated with the controller.
            </summary>
            <value>
            The robot count.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.SerialNumber">
            <summary>
            Gets the serial number.
            </summary>
            <value>
            The serial number.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.SoftwareRevision">
            <summary>
            Gets the software revision.
            </summary>
            <value>
            The software revision.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.SecurityId">
            <summary>
            Gets the security identifier.
            </summary>
            <value>
            The security identifier.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.ControllerTime">
            <summary>
            Gets or sets the controller time.
            </summary>
            <value>
            The controller time.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.FpgaVersion">
            <summary>
            Gets the fpga version for the controller
            </summary>
            <value>
            The fpga version.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.StartupMessages">
            <summary>
            Gets the startup messages.
            </summary>
            <value>
            The startup messages.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.HighPower">
            <summary>
            Gets or sets the high power state
            </summary>
            <value>
              <c>true</c> if high power is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.MonitorSpeed">
            <summary>
            Gets or sets the monitor speed.
            </summary>
            <value>
            The monitor speed.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.EstopState">
            <summary>
            Gets if the estop is engaged or not.
            </summary>
            <value>
            The monitor speed.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.TrajectoryRate">
            <summary>
            Gets the trajectory rate.
            </summary>
            <value>
            The trajectory rate.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.MinimumEncoderCount">
            <summary>
            Gets the minimum encoder count.
            </summary>
            <value>
            The minimum encoder count.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.MaximumEncoderCount">
            <summary>
            Gets the maximum encoder count.
            </summary>
            <value>
            The maximum encoder count.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.EncoderCount">
            <summary>
            Gets or sets the encoder count.
            </summary>
            <value>
            The encoder count.
            </value>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.GetControllerEncodersNums">
            <summary>
            Gets the index of the encoders hosted by the controller (the others are hosted on other devices like smi6)
            </summary>
            <returns>list containing the controller hosted encoder numbers</returns>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.CalibrationMask">
            <summary>
            Gets the calibration mask identifying what robots are calibrated
            </summary>
            <value>
            The calibration mask.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.IsCalibrated">
            <summary>
            Gets a value indicating whether the controller robots are calibrated.
            </summary>
            <value>
            <c>true</c> if the robots are calibrated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Controller.EncoderNodes">
            <summary>
            Gets the encoder nodes.
            </summary>
            <value>
            The encoder nodes.
            </value>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.SysInit(System.Boolean)">
            <summary>
            Performs a systems initialization command
            </summary>
            <param name="fast">if set to <c>true</c> do a fast init command.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.Reboot">
            <summary>
            Issues a reboot command.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.InvokeVPlusProgram(System.Int32,System.String)">
            <summary>
            Invokes the V+ program on a robot queue task
            </summary>
            <param name="queueNumber">The task number.</param>
            <param name="programName">Name of the program.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.GetProgramStatus(System.String)">
            <summary>
            Gets the program status.
            </summary>
            <param name="programName">Name of the program.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.GetErrors">
            <summary>
            Gets the error log 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.ExecuteVPlusInstruction(System.String)">
            <summary>
            Executes the v+ instruction.
            </summary>
            <param name="vPlusInstruction">The v+ instruction.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.GetTransformValue(System.String)">
            <summary>
            Evaluate the expression as a transform value.
            </summary>
            <param name="vPlusExpression">The v+ expression.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.GetPrecisionPointValue(System.String)">
            <summary>
            Evaluate the expression as a precision point value
            </summary>
            <param name="vPlusExpression">The v+ expression.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.GetStringValue(System.String)">
            <summary>
            Evaluate the expression as a string
            </summary>
            <param name="vPlusExpression">The v+ expression.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.GetProgramInformation(System.String,System.Int32)">
            <summary>
            Gets the information about a specific program or variable.
            </summary>
            <param name="name">The name of the program or variable.</param>
            <param name="mode">The mode of operation from 0-9.</param>
            <returns>The details of the program</returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.IsDefined(System.String[],System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            Determines whether the specified variables are defined.
            </summary>
            <param name="variables">The variables.</param>
            <param name="status">The status.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.ReadLocations(System.Int32,System.String[],System.String[],System.Collections.Generic.Dictionary{System.String,Ace.Communication.VpTransform}@)">
            <summary>
            Reads the transform locations for a set of V+ location and precision point variables
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="locations">The locations.</param>
            <param name="precisionPoints">The precision points.</param>
            <param name="transformValues">The transform values.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.UpdateFlash(System.String,System.String)">
            <summary>
            Updates the FPGA flash
            </summary>
            <param name="device">The device.</param>
            <param name="path">The file path.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.SetState(System.Int32,System.Int32)">
            <summary>
            Sets a STATE in V+
            </summary>
            <param name="select">The select.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.UpdateMotorMap(System.Int32)">
            <summary>
            Update the motor map. Note that SYS.INIT must be done BEFORE AND AFTER.
            </summary>
            <param name="robotMask">Bit mask indicating robot to update (bit 0 for encoders, 1 for robot 1, etc.), or -1 for all devices.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.Calibrate">
            <summary>
            Issue a robot calibration command
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.Save(System.Int32)">
            <summary>
            Saves robot specifications from specified robots to V+ boot disk.
            </summary>
            <param name="robotMask">Bit mask of robots to save (bit 0 for encoders, bit i for robot i).</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.ClearServoInitOpcodes(System.Int32)">
            <summary>
            Clears the servo initialization opcodes.
            </summary>
            <param name="robotMask">The robot mask.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.GetServoInitOpcodeCount(System.Int32)">
            <summary>
            Gets the servo initialization opcode count.
            </summary>
            <param name="robotMask">The robot mask.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.GetId(System.Int32)">
            <summary>
            Issue an ID command
            </summary>
            <param name="select">The select.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.GetId(System.Int32,System.Int32)">
            <summary>
            Issue an ID command
            </summary>
            <param name="component">The component.</param>
            <param name="device">The device.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.GetRealValue(System.String)">
            <summary>
            Evaluate the expression as a real value.
            </summary>
            <param name="vPlusExpression">The v+ expression.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.CheckRobotCount">
            <summary>
            Checks the robot count.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.SaveSpecFile(System.String,System.String,System.Boolean)">
            <summary>
            Saves the specification file.
            </summary>
            <param name="vPlusDevice">The v plus device.</param>
            <param name="vPlusPath">The v plus path.</param>
            <param name="ascii">if set to <c>true</c> [ASCII].</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.LoadSpecFile(System.String,System.String)">
            <summary>
            Loads the specification file.
            </summary>
            <param name="vPlusDevice">The v plus device.</param>
            <param name="vPlusPath">The v plus path.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.ConfigureMotorMap(System.Int32)">
            <summary>
            Configures the motor map for the controller
            </summary>
            <param name="primaryMask">The primary mask.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.ValidateConfiguration(System.String[]@)">
            <summary>
            Validates the controller configuration.
            </summary>
            <param name="warnings">The warnings.</param>
            <returns>Is the controller configuration considered acceptable</returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Controller.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.FileSystem">
            <summary>
            Represents the file system associated with a controller
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.FileSystem.#ctor(Ace.Communication.VPlusServer.Abstraction.Wrappers.FileSystemWrapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.FileSystem" /> class.
            </summary>
            <param name="fileSystemWrapper">The file system wrapper.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.FileSystem.InitAfterRestart">
            <summary>
            Initializes the after restart.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.FileSystem.Fcmnd(System.String,Ace.Communication.Fcmnd,System.String,System.String)">
            <summary>
            Issues a FCMND command the specified device.
            </summary>
            <param name="device">The device.</param>
            <param name="command">The command.</param>
            <param name="outString">The out string.</param>
            <param name="arg2">The arg2 string.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.FileSystem.GetDriveSpace(System.String,System.String,System.Boolean)">
            <summary>
            Gets the drive space.
            </summary>
            <param name="vPlusDevice">The v+ device.</param>
            <param name="vPlusDirectory">The v+ directory.</param>
            <param name="total">if set to <c>true</c> return the total space.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.FileSystem.ReadDirectory(System.String,System.String,System.String)">
            <summary>
            Return directory contents.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.FileSystem.CopyFileToVPlus(System.String,System.String,System.String)">
            <summary>
            Copies the file to V+.
            </summary>
            <param name="pcPath">The pc path.</param>
            <param name="vPlusDevice">The v+ device.</param>
            <param name="vPlusPath">The v+ path.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.FileSystem.CopyFileToPC(System.String,System.String,System.String)">
            <summary>
            Copies the file to pc.
            </summary>
            <param name="vPlusDevice">The v+ device.</param>
            <param name="vPlusPath">The v+ path.</param>
            <param name="pcPath">The pc path.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.FileSystem.FormatDrive(System.String,System.String)">
            <summary>
            Formats the drive.
            </summary>
            <param name="vPlusDevice">The v+ device.</param>
            <param name="vPlusDisk">The v+ disk.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.FileSystem.GetFileSystemRoots">
            <summary>
            Gets the file system roots for V+
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Firewire">
            <summary>
            Represents the firewire nodes associated with a controller
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Firewire.#ctor(Ace.Communication.VPlusServer.Abstraction.Wrappers.FirewireWrapper,Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Firewire" /> class.
            </summary>
            <param name="firewireWrapper">The firewire wrapper.</param>
            <param name="robotWrapper">The robot wrapper.</param>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Firewire.FirewireNodes">
            <summary>
            Gets the firewire nodes associated with the controller
            </summary>
            <value>
            The firewire nodes.
            </value>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Firewire.FireWireIO(System.Int32,System.Int32,System.Int32,System.Double[])">
            <summary>
            Calls a device command or Gets/sets an opcode value on the firewire node
            </summary>
            <param name="nodeNumber">The node number.</param>
            <param name="gadget">The gadget.</param>
            <param name="opcode">The opcode.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Firewire.GetGadgets(Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode)">
            <summary>
            Gets the gadgets associated with the firewire node
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Firewire.DevicesInstruction(System.Boolean,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Issues a Devices instruction.
            </summary>
            <param name="robotAccess">if set to <c>true</c> enable robot access.</param>
            <param name="nodeOrRobot">The node or robot.</param>
            <param name="gadgetOrMotor">The gadget or motor.</param>
            <param name="opcode">The opcode.</param>
            <param name="toDevice">To device.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Firewire.RebootNodes">
            <summary>
            Reboot all servo nodes associated with the controller
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Firewire.ResetMotorEncoder(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resets the motor encoder.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="motorNumber">The motor number.</param>
            <param name="nodeNumber">The node number.</param>
            <param name="gadgetNumber">The gadget number.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Firewire.ReadeYaskawaEncoderStatus(System.Int32,System.Int32,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Reades the Yaskawa motor encoder status.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="motorNumber">The motor number.</param>
            <param name="absolutePosition">The absolute position.</param>
            <param name="commutationPosition">The commutation position.</param>
            <param name="incrementalPosition">The incremental position.</param>
            <param name="alarmMask">The alarm mask.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Firewire.ReadeTSAEncoderStatus(System.Int32,System.Int32,System.Single@,System.Single@,System.Single@)">
            <summary>
            Reades the TSA motor encoder status.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="motorNumber">The motor number.</param>
            <param name="absolutePosition">The absolute position.</param>
            <param name="incrementalPosition">The incremental position.</param>
            <param name="alarmMask">The alarm mask.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Firewire.CommitRSC(System.Int32,System.Int32,System.Int32,System.Double[])">
            <summary>
            Commits data to the RSC card
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="nodeNumber">The node number.</param>
            <param name="gadgetNumber">The gadget number.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Firewire.GetDeviceValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the device value.
            </summary>
            <param name="type">The type.</param>
            <param name="unit">The unit.</param>
            <param name="select">The select.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Firewire.SetDevice(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the device.
            </summary>
            <param name="type">The type.</param>
            <param name="unit">The unit.</param>
            <param name="select">The select.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Firewire.SetDeviceValue(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Sets the device value.
            </summary>
            <param name="type">The type.</param>
            <param name="unit">The unit.</param>
            <param name="select">The select.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Firewire.SetDeviceValues(System.Int32,System.Int32,System.Int32,System.Single[])">
            <summary>
            Sets the device values.
            </summary>
            <param name="type">The type.</param>
            <param name="unit">The unit.</param>
            <param name="select">The select.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Firewire.ValidateConfiguration(System.String[]@)">
            <summary>
            Validates the firewire configuration.
            </summary>
            <param name="warnings">A list of warnings detected in the firewire configuration.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Firewire.ValidateESeriesRobotConfiguration(System.Collections.Generic.List{System.String})">
            <summary>
            Ensure the eSeries robot has 1 node that is configured as robot #1
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Firewire.ValidateSmartControllerRobotConfiguration(System.Collections.Generic.List{System.String})">
            <summary>
            Ensure the SmartController does not have duplicate robot nodes
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Firewire.ValidateEncoderConfiguration(System.Collections.Generic.List{System.String})">
            <summary>
            Validates there are not duplicate encoder numbers on the firewire network.
            </summary>
            <param name="messages">The messages.</param>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.IO">
            <summary>
            Represents the IO associated with a controller
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.IO.#ctor(Ace.Communication.VPlusServer.Abstraction.Wrappers.IOWrapper,Ace.Communication.VPlusServer.Abstraction.Wrappers.DeviceNetWrapper,Ace.Communication.VPlusServer.Abstraction.Wrappers.LatchWrapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.IO" /> class.
            </summary>
            <param name="ioWrapper">The io wrapper.</param>
            <param name="deviceNetWrapper">The device net wrapper.</param>
            <param name="latchWrapper">The latch wrapper.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.IO.InitAfterRestart">
            <summary>
            Initializes the after restart.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.IO.GetDigitalIO(System.Int32,System.Int32)">
            <summary>
            Gets the digital io status for the specified robot
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="signal">The signal.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.IO.GetDigitalIOs(System.Int32[])">
            <summary>
            Gets the status of a collection of digital I/Os.
            </summary>
            <param name="signals">The signals.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.IO.SetRobotDigitalIO(System.Int32,System.Int32[])">
            <summary>
            Sets the robot digital I/O status
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="signals">The signals.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.IO.GetAllDigitalIO(System.Int32,System.Int32)">
            <summary>
            Gets all digital I/O of a given type.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="index">The type of I/O.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.IO.GetDigitalIOMap(System.Int32,System.Int32)">
            <summary>
            Gets the map of enabled / disabled digital I/Os.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.IO.ScanDeviceNet(System.Int32,System.Int32)">
            <summary>
            Scans and returns the available DeviceNet nodes
            </summary>
            <param name="baudRate">The baud rate.</param>
            <param name="localMacId">The local mac identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.IO.ReadBeltLatches(System.Int32,System.Single,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Reads all belt latches for the specified encoder
            </summary>
            <param name="encoderChanel">The encoder chanel.</param>
            <param name="maxReadDelay">The maximum read delay.</param>
            <param name="latches">The latches.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.IO.ReadBeltLatches(System.Int32,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Reads all belt latches for the specified encoder
            </summary>
            <param name="encoderChanel">The encoder chanel.</param>
            <param name="latches">The latches.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.IO.ClearLatchedBeltEncoder(System.Int32)">
            <summary>
            Gets the digital io status for the specified robot
            </summary>
            <param name="encoderChanel">The encoder chanel to clear.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.IO.ReadEncoderPosition(System.Int32,System.Int32@)">
            <summary>
            Reads the current position of the specified encoder
            </summary>
            <param name="encoderChanel">The encoder chanel.</param>
            <param name="position">The position.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.IO.ReadSpecificBeltLatch(System.Int32,System.Int32)">
            <summary>
            Reads the specific belt latch.
            </summary>
            <param name="encoderChanel">The encoder chanel.</param>
            <param name="latchInput">The latch input.</param>
            <returns>The latch position or -1 if no latch found</returns>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.License">
            <summary>
            Represents the Licenses associated with a controller
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.License.#ctor(Ace.Communication.VPlusServer.Abstraction.Wrappers.LicenseWrapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.License" /> class.
            </summary>
            <param name="licenseWrapper">The license wrapper.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.License.InitAfterRestart">
            <summary>
            Initializes the after restart.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.License.IsLicenseAvailable(Ace.Communication.VPlusLicense,System.Int32)">
            <summary>
            Determines whether the specified license is enabled.
            </summary>
            <param name="license">The license.</param>
            <param name="index">The index.</param>
            <returns>
              <c>true</c> if the specified license is available; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.License.IsLicenseEnabled(Ace.Communication.VPlusLicense,System.Int32)">
            <summary>
            Determines whether a specified license is enabled.
            </summary>
            <param name="license">The license.</param>
            <param name="index">The index.</param>
            <returns>
              <c>true</c> if the license is enabled; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.License.InstallLicense(System.Boolean,System.Int32,System.String)">
            <summary>
            Install or uninstall a license.
            </summary>
            <param name="enabled">if set to <c>true</c> enable the license.</param>
            <param name="index">The index.</param>
            <param name="password">The password.</param>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.NVRam">
            <summary>
            Represents the NVRam associated with a controller
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.NVRam.#ctor(Ace.Communication.VPlusServer.Abstraction.Wrappers.NVRamWrapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.NVRam" /> class.
            </summary>
            <param name="nvRamWrapper">The nv ram wrapper.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.NVRam.Read(System.Int64@,System.String@,System.String@)">
            <summary>
            Install or uninstall a license.
            </summary>
            <param name="flags">The flags.</param>
            <param name="address">The address.</param>
            <param name="subnetMask">The subnet mask.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.NVRam.Save(System.Int64,System.String,System.String)">
            <summary>
            Saves the settings to NVRam.
            </summary>
            <param name="flags">The flags.</param>
            <param name="address">The address.</param>
            <param name="subnetMask">The subnet mask.</param>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo">
            <summary>
            DeviceNet information data structure.
            </summary>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.eumDeviceType">
            <summary>
            Device type
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.eumDeviceType.DeviceNet">
            <summary>
            Device Net
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.eumDeviceType.Robot">
            <summary>
            Robot 
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.eumDeviceType.Unknow">
            <summary>
            Unknow
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.#ctor(System.Int32)">
            <summary>
            Create a DeviceNet data structure.
            This is called from the controller scanning - ScanDeviceNet
            </summary>		
            <param name="macId">The macId.</param>		
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.#ctor(Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.eumDeviceType,System.String,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a DeviceNet data structure.
            This is called from the controller scanning - ScanDeviceNet
            </summary>
            <param name="eDeviceType">The device type.</param>
            <param name="description">The description of device.</param>
            <param name="configure">The flag configuring it or not.</param>
            <param name="found">found or not found this device.</param>
            <param name="macId">The macId.</param>
            <param name="inputSize">The input size of the device.</param>
            <param name="outputSize">The output size of the device.</param>
            <param name="vendorId">The vendor id.</param>
            <param name="deviceType">The device type.</param>
            <param name="productCode">The product code.</param>
            <param name="productName">The product name.</param>
            <param name="revision">The revision.</param>
            <param name="serialNumber0">The serial number0.</param>
            <param name="serialNumber1">The serial number1.</param>
            <param name="status">The status.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.#ctor(Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.eumDeviceType,System.String,System.Boolean,System.Boolean,System.Int32,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a DeviceNet data structure.
            This is called from parsing a Remote Node structure from a controller configuration string 
            either XML for EX or Text for CX 
            The parsing function ReadDeviceNetInfo
            </summary>		
            <param name="eDeviceType">The device type.</param>
            <param name="description">The description of device.</param>
            <param name="configure">The flag configuring it or not.</param>
            <param name="found">found or not found this device.</param>
            <param name="macId">The macId.</param>
            <param name="connectionTimeout">The connection timeout.</param>
            <param name="inputSize">The input size of the device.</param>
            <param name="outputSize">The output size of the device.</param>
            <param name="vendorId">The vendor id.</param>
            <param name="deviceType">The device type.</param>
            <param name="productCode">The product code.</param>				
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.#ctor(System.String,System.Int32)">
            <summary>
            Create a DeviceNet data structure.
            This is called from parsing a Input or Output structure from a controller configuration string 
            either XML for EX or Text for CX 
            The parsing function ReadIOBlockInfo
            </summary>				
            <param name="description">The description of device.</param>		
            <param name="macId">The macId.</param>		
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.EDeviceType">
            <summary>
            Gets the device type
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.Description">
            <summary>
            Gets the description of the device
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.Configure">
            <summary>
            Gets the configure true/false of the node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.Found">
            <summary>
            Gets the found true/false of the node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.MacId">
            <summary>
            Gets the MAC ID of the node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.ConnectionTimeout">
            <summary>
            Gets the connection timeout of the node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.InputSize">
            <summary>
            Gets the input size of the node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.OutputSize">
            <summary>
            Gets the output size of the node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.VendorId">
            <summary>
            Gets the vendor ID of the node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.DeviceType">
            <summary>
            Gets the device type of the node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.ProductCode">
            <summary>
            Gets the product code of the node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.Revision">
            <summary>
            Gets the revision of the node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.ProductName">
            <summary>
            Gets the product name of the node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.SerialNumber0">
            <summary>
            Gets the first serial number of the node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.SerialNumber1">
            <summary>
            Gets the second serial number of the node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.DeviceNetInfo.Status">
            <summary>
            Gets the status of the node.
            </summary>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.AxisGadget">
            <summary>
            Represents an axis (motor or encoder) on an Adept FireWire node.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.AxisGadget.#ctor(Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode,System.Int32,System.Single[])">
            <summary>
            Creates the specified axis gadget.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.AxisGadget.RobotNumber">
            <summary>
            Gets or sets the robot number associated with this axis.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.AxisGadget.MotorNumber">
            <summary>
            Gets or sets the motor number associated with this axis.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.AxisGadget.IsSecondary">
            <summary>
            Gets or sets a flag indicating whether this is the secondary axis in a dual-loop axis configuration.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.AxisGadget.IsEncoder">
            <summary>
            Gets or sets the robot number associated with this axis.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.AxisGadget.EncoderNumber">
            <summary>
            Gets the encoder number.
            </summary>
            <value>The encoder number.</value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.AxisGadget.EncoderNumberDisplay">
            <summary>
            Gets the encoder number used for displaying the encoder number.
            </summary>
            <value>The encoder number.</value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.AxisGadget.Description">
            <summary>
            Gets a string description of this gadget.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.AxisGadget.Save">
            <summary>
            Saves this gadget's data to the FireWire node.
            </summary>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ControllerNode">
            <summary>
            Represents an Controller FireWire node.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ControllerNode.#ctor(Ace.Communication.VPlusServer.ITcpConnectionMessageSupport,System.Int32,Ace.Communication.FirewireNodeType)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ControllerNode" /> class.
            </summary>
            <param name="server">The server.</param>
            <param name="nodeNum">The node number.</param>
            <param name="nodeType">Type of the node.</param>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ControllerNode.ServoVersion">
            <summary>
            Gets the servo version
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ControllerNode.FpgaVersion">
            <summary>
            Gets the FPGA version
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ControllerNode.FpgaVersionFull">
            <summary>
            Gets the Full FPGA version
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ControllerNode.FpgaType">
            <summary>
            Gets the FPGA type of this node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ControllerNode.ProcessorType">
            <summary>
            Gets the type of the processor associated with the node
            </summary>
            <value>
            The type of the processor.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ControllerNode.SerialNumber">
            <summary>
            Gets the serial number of this node.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ControllerNode.UpgradeFpga(System.String,System.String,Ace.Communication.FpgaType)">
            <summary>
            Upgrade FPGA firmware on this firewire node.
            </summary>
            <param name="vDevice">V+ device containing firmware files (usually "DISK").</param>
            <param name="vPath">V+ path to directory containing files (e.g., "D:\FIRMWARE").</param>
            <param name="type">Type code. If FpgaType.None, simply upgrades version on 
            the current node type. Otherwise, pushes FPGA code for the specified type.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ControllerNode.GetEventLog">
            <summary>
            Return the node's event log.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ControllerNode.ClearEventLog">
            <summary>
            Clears the event log for this node.
            </summary>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.DigitalIOGadget">
            <summary>
            Represents a digital I/O group on an Adept FireWire node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.DigitalIOGadget.BlockNumber">
            <summary>
            Gets or sets the IO block number.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.DigitalIOGadget.Bitmask">
            <summary>
            Gets or sets the bit mask associated with this block.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.DigitalIOGadget.Description">
            <summary>
            Returns a string description of this gadget.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.DigitalIOGadget.Save">
            <summary>
            Saves this gadget's information to the node.
            </summary>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireEvent">
            <summary>
            Firewire fault log entry.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireEvent.#ctor(System.Int32,System.Double,System.Int32,System.DateTime)">
            <summary>
            Creates a Firewire fault log entry.
            </summary>
            <param name="code">Numeric fault code.</param>
            <param name="parameter">Parameter value. The meaning depends on the fault code.</param>
            <param name="count">Count of faults of this type.</param>
            <param name="lastTimestamp">Time stamp of last occurrence of this fault.</param>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireEvent.Count">
            <summary>
            Gets the total number of faults of this type.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireEvent.ToString">
            <summary>
            Return a string description of this fault.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireGadget">
            <summary>
            A base class for gadget elements on an Adept FireWire node.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireGadget.#ctor(Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode,System.Int32,System.Single[])">
            <summary>
            Creates a FireWire gadget.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireGadget.Node">
            <summary>
            Gets the node associated with this gadget.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireGadget.GadgetType">
            <summary>
            Gets the type of this gadget.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireGadget.GetInfo(System.Int32)">
            <summary>
            Returns the specified item of information about this gadget.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireGadget.SetInfo(System.Int32,System.Single)">
            <summary>
            Sets the specified item of information about this gadget.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireGadget.GadgetNumber">
            <summary>
            Gets the index of this gadget on the node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireGadget.Description">
            <summary>
            Gets a description of this gadget. By default, this is just the gadget type.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireGadget.ToString">
            <summary>
            Returns a string version of this gadget. Currently, "nodeNumber/gadgetNumber description".
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireGadget.IsConfigured">
            <summary>
            Gets or sets a flag indicating whether this gadget is configured.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireGadget.Save">
            <summary>
            Routine called to save current configuration to node.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireGadget.DefaultConfigure(System.Single,System.Single,System.Single)">
            <summary>
            Default configuration routine.
            </summary>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireGadgetFactory">
            <summary>
            Factory for creating gadgets
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireGadgetFactory.CreateGadget(Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode,System.Int32,System.Single[])">
            <summary>
            Creates the specified FireWire gadget.
            </summary>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode">
            <summary>
            Represents an Adept FireWire node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode.Server">
            <summary>
            Gets or sets the server used for communications
            </summary>
            <value>
            The server.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode.NodeNumber">
            <summary>
            Gets the node number for this node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode.NodeType">
            <summary>
            Gets the node type for this node. This is used for determining SmartControllers
            from sDIO and servo nodes. This will NOT reliably indicate servo node type.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode.Gadgets">
            <summary>
            Gets an inventory of the gadgets on this node.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode.#ctor(Ace.Communication.VPlusServer.ITcpConnectionMessageSupport,System.Int32,Ace.Communication.FirewireNodeType)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode" /> class.
            </summary>
            <param name="server">The server.</param>
            <param name="nodeNum">The node number.</param>
            <param name="nodeType">Type of the node.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode.GetGadgets">
            <summary>
            Gets the gadgets associated with the node
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode.UnpackStringFromQuadlet(System.Double[])">
            <summary>
            Unpacks the string from a data array.
            </summary>
            <param name="data">The data.</param>
            <returns>The string</returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode.ToString">
            <summary>
            Returns a string containing the node type and number.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode.IsEVPlus">
            <summary>
            Determines whether the connection is eV+ .
            </summary>
            <returns>
              <c>true</c> if the connection is eV+; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode.GetId(System.Int32,System.Int32)">
            <summary>
            Issue an ID command
            </summary>
            <param name="component">The component.</param>
            <param name="device">The device.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode.WriteOpcode(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Writes a value to an opcode.
            </summary>
            <param name="robNum">The robot number.</param>
            <param name="opcode">The opcode identifier.</param>
            <param name="axisNum">The axis number.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode.ReadOpcode(System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads an opcode value.
            </summary>
            <param name="robNum">The robot number.</param>
            <param name="opcode">The opcode identifier.</param>
            <param name="axisNum">The axis number.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode.FireWireIO(Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode,System.Int32,System.Int32,System.Double[])">
            <summary>
            Calls a device command or Gets/sets an opcode value on the firewire node
            </summary>
            <param name="node">The node.</param>
            <param name="gadget">The gadget.</param>
            <param name="opcode">The opcode.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode.FireWireIO(System.Int32,System.Int32,System.Int32,System.Double[])">
            <summary>
            Calls a device command or Gets/sets an opcode value on the firewire node
            </summary>
            <param name="nodeNumber">The node number.</param>
            <param name="gadget">The gadget.</param>
            <param name="opcode">The opcode.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode.LoadEmbeddedFile(System.String,System.Type,System.String)">
            <summary>
            Load a V+ program file embedded in a .NET assembly into V+ memory.
            </summary>
            <param name="programName">The program name. The file will only be loaded if the program doesn't exist in V+ memory.</param>
            <param name="type">Type whose namespace is used to scope the program file name. In other words, the file should
            be embedded in the same assembly at the same namespace as the specified type.</param>
            <param name="fileName">The program file name.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode.GetProgramStatus(System.String)">
            <summary>
            Gets the status of the specified program
            </summary>
            <param name="programName">Name of the program.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode.LoadFromPC(System.String,System.String,System.Boolean)">
            <summary>
            Load the specified V+ file from the PC into V+ memory.
            </summary>
            <param name="programName">Name of the program to check if it is in memory. If the program is in memory, then the file is not loaded.
            If the file is not specified, then the file will always be loaded.</param>
            <param name="pcPath">The path to the file location on the PC.</param>
            <param name="throwIfAlreadyExists">if set to <c>true</c> we will throw an exception if the program already exists.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode.Save(System.Int32)">
            <summary>
            Saves robot specifications from specified robots to V+ boot disk.
            </summary>
            <param name="robotMask">Bit mask of robots to save (bit 0 for encoders, bit i for robot i).</param>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNodeFactory">
            <summary>
            Object that creates FireWire nodes
            </summary>	
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNodeFactory.CreateNode(Ace.Communication.VPlusServer.ITcpConnectionMessageSupport,System.Int32,Ace.Communication.FirewireNodeType)">
            <summary>
            Creates a FireWire node object of the specified type on the controller.
            </summary>
            <param name="server">The server.</param>
            <param name="nodeNum">The node number.</param>
            <param name="nodeType">Type of the node.</param>
            <returns></returns>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ForceSensorGadget">
            <summary>
            Represents a force sensor on an Adept FireWire node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ForceSensorGadget.BlockNumber">
            <summary>
            Gets or sets the IO block number.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ForceSensorGadget.Bitmask">
            <summary>
            Gets or sets the bit mask associated with this block.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ForceSensorGadget.Description">
            <summary>
            Returns a string description of this gadget.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ForceSensorGadget.Save">
            <summary>
            Saves this gadget's information to the node.
            </summary>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.OpcodeAttributes">
            <summary>
            Represents the attributes for a specified servo opcode, such as
            address and data type.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.OpcodeAttributes.#ctor(System.Int32,System.Boolean,Ace.Communication.ServoDataType)">
            <summary>
            Create an attribute with the specified address and data type.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.OpcodeAttributes.Address">
            <summary>
            Address in servo code where item is found.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.OpcodeAttributes.ReadAsOpcode">
            <summary>
            Gets a value indicating whether we should read the address as an Opcode.
            </summary>
            <value>
              <c>true</c> if we read as an opcode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.OpcodeAttributes.DataType">
            <summary>
            Data type of item.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.OpcodeAttributes.Encode(System.Double,System.Byte[],System.Int32)">
            <summary>
            Converts from a value into a byte array for sending to servos.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.OpcodeAttributes.Decode(System.Byte[],System.Int32)">
            <summary>
            Converts from a byte array returned by servos into a valid
            value depending on the data type.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.OpcodeAttributes.ToString(System.Double)">
            <summary>
            Toes the string.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.RobotGadget">
            <summary>
            Represents a robot on an Adept FireWire node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.RobotGadget.RobotNumber">
            <summary>
            Gets or sets the robot number.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.RobotGadget.Description">
            <summary>
            Returns a string description of the robot gadget.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.RobotGadget.Save">
            <summary>
            Save the configuration to the FireWire node.
            </summary>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode">
            <summary>
            A FireWire node that runs servo code.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.FromNodeDateTime(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Convert from the node date time to a standard DateTime structure
            </summary>
            <param name="time">The time.</param>
            <param name="date">The date.</param>
            <param name="flipTime">if set to <c>true</c> if hours and seconds are flipped.</param>
            <returns>The time</returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.ToNodeDateTime(System.DateTime,System.Int64@,System.Int64@)">
            <summary>
            Convert from a DateTime to a node date-time representation
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="time">The time.</param>
            <param name="date">The date.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.FromBCD(System.Int64)">
            <summary>
            Convert from Binary-Coded Decimal (BCD) to an integer.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.ToBCD(System.Int32)">
            <summary>
            Convert from an integer to Binary-Coded Decimal (BCD).
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.#ctor(Ace.Communication.VPlusServer.ITcpConnectionMessageSupport,System.Int32,Ace.Communication.FirewireNodeType)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode" /> class.
            </summary>
            <param name="server">The server.</param>
            <param name="nodeNum">The node number.</param>
            <param name="nodeType">Type of the node.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.ReadRscOpcode(System.Int32,System.Int32,System.Int32,Ace.Communication.ServoDataType)">
            <summary>
            Read an opcode from the RSC.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.GetRscStatus(System.Int32)">
            <summary>
            Get the current status of the RSC data cache.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.Flash(Ace.Communication.FirewireLedFlashPattern)">
            <summary>
            Flash the LED on the node with the specified pattern.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.GetEventLog">
            <summary>
            Return the node's event log.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.ClearEventLog">
            <summary>
            Clears the event log for this node.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.ToString">
            <summary>
            Returns a string containing the node type and number.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.InfoGadgetNumber">
            <summary>
            Returns the info gadget number for the node.
            </summary>
            <remarks>By definition, info gadget number for any servo node is 0.</remarks>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.OperatingSystemVersion">
            <summary>
            Returns the node operating system version.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.GetAnalogInput(System.Int32)">
            <summary>
            Returns an analog input value (if present on the node). Only valid on SMI6.
            </summary>
            <param name="index">1-based index.</param>
            <returns>16-bit analog reading.</returns>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.ServoVersion">
            <summary>
            Gets the servo code version on this node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.UpdateRate">
            <summary>
            Gets the servo update rate for this node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.SerialNumber">
            <summary>
            Gets the serial number of this node. This currently only works on servo nodes.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.Read(Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.OpcodeAttributes)">
            <summary>
            Returns data from a particular opcode attribute on the node.
            </summary>
            <param name="attribute">The attribute.</param>
            <returns>
            Data read as a double value.		
            </returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.WriteRegister(Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.OpcodeAttributes,System.Double)">
            <summary>
            Writes data to address on specified node.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.Reboot">
            <summary>
            Reboots the servo node. You should restart V+ afterwards if you want
            to dynamically download servo code, or do a controller.SysInit(false)
            to restart servo communication. This is only implemented on a subset of all nodes.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.SetSerialNumber(System.String,System.Int32)">
            <summary>
            Sets the serial number of the FireWire node. Requires a "special" Adept-supplied password to change serial number.
            </summary>
            <param name="password">Special password to set serial number. An exception is thrown if not correct.</param>
            <param name="value">New desired serial number.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.GetRawFpgaVersion">
             <summary>
             Returns the FPGA Version for the servo node
             </summary>
             <returns>The version number</returns>
             <remarks>
             The FPGA version register has the following format:
               TTCCVVRR
                - TT = FPGA type 
                - CC = Compatibility Code
                - VV = Firmware Version
                - RR = Firmware Revision
            
                TT is where the most significant bit indicates the processor type.
             </remarks>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.FpgaVersion">
            <summary>
            Gets the FPGA version of this node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.FpgaVersionFull">
            <summary>
            Gets the full FPGA version of this node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.FpgaType">
            <summary>
            Gets the FPGA type of this node.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.ProcessorType">
            <summary>
            Gets the type of the processor associated with the node
            </summary>
            <value>
            The type of the processor.
            </value>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.UpgradeServo(System.String,System.String)">
            <summary>
            Upgrade servo code on this firewire node.
            </summary>
            <param name="vDevice">V+ device containing firmware files (usually "DISK").</param>
            <param name="vPath">V+ path to directory containing files (e.g., "D:\FIRMWARE").</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.UpgradeFpga(System.String,System.String,Ace.Communication.FpgaType)">
            <summary>
            Upgrade FPGA firmware on this firewire node.
            </summary>
            <param name="vDevice">V+ device containing firmware files (usually "DISK").</param>
            <param name="vPath">V+ path to directory containing files (e.g., "D:\FIRMWARE").</param>
            <param name="type">Type code. If FpgaType.None, simply upgrades version on 
            the current node type. Otherwise, pushes FPGA code for the specified type.</param>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.NodeTime">
            <summary>
            Gets or sets the date and time reported by this node.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.ServoNode.DevicesInstruction(System.Boolean,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Issues a Devices instruction.
            </summary>
            <param name="robotAccess">if set to <c>true</c> enable robot access.</param>
            <param name="nodeOrRobot">The node or robot.</param>
            <param name="gadgetOrMotor">The gadget or motor.</param>
            <param name="opcode">The opcode.</param>
            <param name="toDevice">To device.</param>
            <returns></returns>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Profiler.ProfileDataEventArgs">
            <summary>
            Event Arguments when data is ready to be displayed on the profiler
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Profiler.ProfileDataEventArgs.Data">
            <summary>
            Gets the profiler data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Profiler.ProfileDataEventArgs.#ctor(System.Collections.Generic.Dictionary{System.Int32,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Profiler.ProfileDataEventArgs" /> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Profiler.ProfilerEventArgs">
            <summary>
            Event arguments describing data received from the V+ profiler task
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.Abstraction.Parameters.Profiler.ProfilerEventArgs.indexes">
            <summary>
            The indexes associated with the data items
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Profiler.ProfilerEventArgs.Indexes">
            <summary>
            Gets the indexes associated with the data items
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.Abstraction.Parameters.Profiler.ProfilerEventArgs.values">
            <summary>
            The data values
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Profiler.ProfilerEventArgs.Values">
            <summary>
            Gets the data values
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Profiler.ProfilerEventArgs.#ctor(System.Int32[],System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Profiler.ProfilerEventArgs"/> class.
            </summary>
            <param name="dataIndexes">The data indexes.</param>
            <param name="dataValues">The data values.</param>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Profiler.ProfilerListener">
            <summary>
            Listens for V+ TcpClient connections
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Profiler.ProfilerListener.StartListener(System.Int32)">
            <summary>
            Starts the listener.
            </summary>
            <param name="portNum">The port num.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Profiler.ProfilerListener.ListenForClients">
            <summary>
            Listens for clients.
            This thread will die after a client connects
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Profiler.ProfilerListener.HandleClientThread(System.Object)">
            <summary>
            Handles the client thread.
            </summary>
            <param name="tcpClient">The TCP client.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Profiler.ProfilerListener.unpackData(System.Byte[])">
            <summary>
            Unpacks the data and throws an event to the client to update the display.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Profiler.ProfilerListener.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Profiler.ProfilerListener.ProfilerDataReceivedEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="E:Ace.Communication.VPlusServer.Abstraction.Parameters.Profiler.ProfilerListener.OnNewDataReceived">
            <summary>
            An event raised when new data is received from V+
            </summary>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPClassSerializerAttribute">
            <summary>
            Specifies a class that can be serialized and defines how the class will be unpacked in V+
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPClassSerializerAttribute.GetSerializer(System.Object)">
            <summary>
            Gets the serializer for the specified object.
            </summary>
            <param name="obj">The object to check.</param>
            <returns>An instance of the serializer -or- null if no serializer exists.</returns>
        </member>
        <member name="F:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPClassSerializerAttribute.propertyMapType">
            <summary>
            The type of object that handles property mapping
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPClassSerializerAttribute.PropertyMapType">
            <summary>
            Gets the type of object that handles property mapping
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPClassSerializerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPClassSerializerAttribute"/> class.
            </summary>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer">
            <summary>
            This class serializes an object so that it can be sent to a controller and accessed via a V+ program
            </summary>
            <remarks>This class uses the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPPropertySerializerAttribute"/> to determine what properties to serialize to V+.
            The serializer object will create a PACKed string representation of the data. The REMOTE.V2 library that is written to the
            controller contains methods that can be used to extract the information.</remarks>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.Serialize(Ace.Communication.VPlusServer.ITcpConnectionMessage,System.Object)">
            <summary>
            Serializes the specified object instance and return a packed string representing the data.
            </summary>
            <param name="message">The message to place the data into</param>
            <param name="instanceToSerialize">The instance to serialize.</param>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.DataType">
            <summary>
            Defines the format of the data encoded into the serial string
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.DataType.Unknown">
            <summary>
            The data is an unknown type
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.DataType.Byte">
            <summary>
            The data is a byte field
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.DataType.Transform">
            <summary>
            The data is a transform field
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.DataType.Boolean">
            <summary>
            The data is a Boolean field
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.DataType.Short">
            <summary>
            The data is a short field
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.DataType.String">
            <summary>
            The data is a string field
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.DataType.Single">
            <summary>
            The data is a single field
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.DataType.Double">
            <summary>
            The data is a double field
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.DataType.Enum">
            <summary>
            The data is an enumeration field
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.DataType.ComplexObject">
            <summary>
            The data is a complex object
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.DataType.Array">
            <summary>
            The data is an array field
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer"/> class.
            </summary>
            <param name="instanceToOperateOn">The instance to operate on.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.Serialize(Ace.Communication.VPlusServer.ITcpConnectionMessage)">
            <summary>
            Serializes the instance.
            </summary>
            <param name="message">The message to serialize into.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.SerializeObject(Ace.Communication.VPlusServer.ITcpConnectionMessage,System.Object)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="message">The message to serialize into.</param>
            <param name="obj">The object to serialize.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.GetSerializedProperties(System.Type)">
            <summary>
            Gets the serialized properties for a given type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.GetPropertyType(System.Type)">
            <summary>
            Gets the type of the property.
            </summary>
            <param name="type">The type.</param>
            <returns>The property type</returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.WriteTransform(Ace.Communication.VPlusServer.ITcpConnectionMessage,Ace.Communication.VpTransform)">
            <summary>
            Writes a Z-Y-Z transform to the incoming message.
            </summary>
            <param name="message">The message.</param>
            <param name="trans">The trans.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.WriteByte(Ace.Communication.VPlusServer.ITcpConnectionMessage,System.Byte)">
            <summary>
            Writes a byte to the outgoing message.
            </summary>
            <param name="message">The message.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.WriteBoolean(Ace.Communication.VPlusServer.ITcpConnectionMessage,System.Boolean)">
            <summary>
            Writes a Boolean to the outgoing message.
            </summary>
            <param name="message">The message.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.WriteShort(Ace.Communication.VPlusServer.ITcpConnectionMessage,System.Int32)">
            <summary>
            Writes a 16-bit integer to the outgoing message.
            </summary>
            <param name="message">The message.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.WriteString(Ace.Communication.VPlusServer.ITcpConnectionMessage,System.String)">
            <summary>
            Writes a string to the outgoing message.
            </summary>
            <param name="message">The message.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.WriteBytes(Ace.Communication.VPlusServer.ITcpConnectionMessage,System.Byte[])">
            <summary>
            Writes the given byte array to the outgoing message.
            </summary>
            <param name="message">The message.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.WriteSingle(Ace.Communication.VPlusServer.ITcpConnectionMessage,System.Double)">
            <summary>
            Writes a float to the outgoing message.
            </summary>
            <param name="message">The message.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.WriteDouble(Ace.Communication.VPlusServer.ITcpConnectionMessage,System.Double)">
            <summary>
            Writes a double to the outgoing message.
            </summary>
            <param name="message">The message.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.SortablePropertyDescriptor">
            <summary>
            Describes a serialized sortable property
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.SortablePropertyDescriptor.order">
            <summary>
            The order of the sort
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.SortablePropertyDescriptor.Order">
            <summary>
            Gets the order of the sort
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.SortablePropertyDescriptor.property">
            <summary>
            The property information
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.SortablePropertyDescriptor.Property">
            <summary>
            Gets or sets the property information
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.SortablePropertyDescriptor.#ctor(System.Int32,System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.SortablePropertyDescriptor"/> class.
            </summary>
            <param name="sortOrder">The sort order.</param>
            <param name="propertyInfo">The property info.</param>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.SortablePropertyComparer">
            <summary>
            Class for comparing serialized sortable properties
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.SortablePropertyComparer.Comparer">
            <summary>
            Singleton comparer object
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.SortablePropertyComparer.Compare(Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.SortablePropertyDescriptor,Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPObjectSerializer.SortablePropertyDescriptor)">
            <summary>
            Compares the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPPropertyMapper">
            <summary>
            Specifies a class that describes how properties of objects on the PC map to arrays in V+.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPPropertyMapper.Handle">
            <summary>
            Gets the handle to the object being mapped
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPPropertyMapper.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPPropertyMapper"/> class.
            </summary>
            <param name="obj">The object being mapped.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPPropertyMapper.Serialize(System.String,Ace.Communication.VPlusServer.ITcpConnectionMessageSupport)">
            <summary>
            Serializes the object to the specified controller.
            </summary>
            <param name="key">The key under which the data is written.</param>
            <param name="server">The communication channel.</param>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPPropertySerializerAttribute">
            <summary>
            Specifies a property should be serialized as part of the V+ object serialization
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPPropertySerializerAttribute.OrderLast">
            <summary>
            Indicates the last item in the list
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPPropertySerializerAttribute.order">
            <summary>
            The order of serialization
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPPropertySerializerAttribute.Order">
            <summary>
            Gets the order of serialization
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPPropertySerializerAttribute.serializedType">
            <summary>
            The type of object the item should be serialized as
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPPropertySerializerAttribute.SerializedType">
            <summary>
            Gets the type of object the item should be serialized as
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPPropertySerializerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPPropertySerializerAttribute"/> class.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPPropertySerializerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPPropertySerializerAttribute"/> class.
            </summary>
            <param name="type">The type of object to serialized the property as.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPPropertySerializerAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPPropertySerializerAttribute"/> class.
            </summary>
            <param name="serializationOrder">The serialization order.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPPropertySerializerAttribute.#ctor(System.Int32,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Remote.VPPropertySerializerAttribute"/> class.
            </summary>
            <param name="serializationOrder">The serialization order.</param>
            <param name="type">The type of object to serialized the property as.</param>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Parameters.VPlusFile">
            <summary>
            A description of a V+ file.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.VPlusFile.GetNames(Ace.Communication.VPlusServer.Abstraction.Parameters.VPlusFile[],System.Boolean)">
            <summary>
            Returns an array of all the file or directory names (but not both),
            from an input array of file objects.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.VPlusFile.#ctor(System.String,System.String)">
            <summary>
            Create a root directory.
            </summary>
            <param name="device">Device on which file is found, such as "DISK".</param>
            <param name="root">Root name, such as "D:".</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.VPlusFile.#ctor(System.String,System.String,System.String,System.Int64,System.String,System.DateTime)">
            <summary>
            Creates a new file object from the standard V+ file description string.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.VPlusFile.Device">
            <summary>
            The device on which the file is found.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.VPlusFile.ParentDirectory">
            <summary>
            Gets a string containing the parent directory.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.VPlusFile.FullPath">
            <summary>
            Gets a string containing the full file path.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.VPlusFile.Name">
            <summary>
            Gets the file name.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.VPlusFile.Date">
            <summary>
            Gets the file "last-modified" date.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.VPlusFile.Size">
            <summary>
            Gets the file size in bytes
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.VPlusFile.IsDirectory">
            <summary>
            Gets a value of true if the file is a directory.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Parameters.VPlusFile.CompareTo(Ace.Communication.VPlusServer.Abstraction.Parameters.VPlusFile)">
            <summary>
            Compares this file to another file for sorting purposes.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.VPlusFile.IsHidden">
            <summary>
            Gets a flag set to true if the file is hidden.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.VPlusFile.IsProtected">
            <summary>
            Gets a flag set to true if the file is protected.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Parameters.VPlusFile.IsReadOnly">
            <summary>
            Gets a flag set to true if the file is read-only.
            </summary>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Profiler">
            <summary>
            Represents the Profiler associated with a controller
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Profiler.TotalTime">
            <summary>
            Gets or sets the total time collected
            </summary>
            <value>The total time.</value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Profiler.RawIndexes">
            <summary>
            Gets or sets the raw indexes received from V+
            </summary>
            <value>The raw indexes.</value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Profiler.RawValues">
            <summary>
            Gets or sets the raw values received from V+
            </summary>
            <value>The raw values.</value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Profiler.PercentValues">
            <summary>
            Gets the duty cycle percent values
            </summary>
            <value>The percent values.</value>
        </member>
        <member name="E:Ace.Communication.VPlusServer.Abstraction.Profiler.DataReceived">
            <summary>
            An event when data is ready to display
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Profiler.TimingInterval">
            <summary>
            Gets or sets the timing interval.
            </summary>
            <value>The timing interval.</value>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Profiler.#ctor(Ace.Communication.VPlusServer.Abstraction.Wrappers.ProfilerWrapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Profiler" /> class.
            </summary>
            <param name="profilerWrapper">The profiler wrapper.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Profiler.StartProfiler(System.Int32)">
            <summary>
            Starts the profiler V+ task
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Profiler.StopProfiler">
            <summary>
            Stops the profiler.
            </summary>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Remote">
            <summary>
            Represents the remote data associated with a controller
            </summary>
        </member>
        <member name="E:Ace.Communication.VPlusServer.Abstraction.Remote.RemoteEventRequested">
            <summary>
            Event detailing when a remote V+ generate message is received
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Remote.#ctor(Ace.Communication.VPlusServer.Abstraction.Wrappers.RemoteLibraryWrapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Remote" /> class.
            </summary>
            <param name="remoteLibraryWrapper">The remote library wrapper.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Remote.ExecuteResponse(System.Int32,System.Int32)">
            <summary>
            Sends the execute response 
            </summary>
            <param name="respIndex">Index of the resp.</param>
            <param name="statusCode">The status code.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Remote.ReadResponse(System.Int32,System.Int32,System.String[])">
            <summary>
            Sends the read response
            </summary>
            <param name="respIndex">Index of the resp.</param>
            <param name="statusCode">The status code.</param>
            <param name="vals">The valuse to write.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Remote.WriteResponse(System.Int32,System.Int32)">
            <summary>
            Sends the execute response 
            </summary>
            <param name="respIndex">Index of the resp.</param>
            <param name="statusCode">The status code.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Remote.FileResponse(System.Int32,System.Int32,System.String[])">
            <summary>
            Sends the file response
            </summary>
            <param name="respIndex">Index of the resp.</param>
            <param name="statusCode">The status code.</param>
            <param name="vals">The valuse to write.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Remote.ApplicationEventResponse(System.Int32,System.Int32)">
            <summary>
            Sends the file response
            </summary>
            <param name="respIndex">Index of the resp.</param>
            <param name="statusCode">The status code.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Remote.WriteObject(System.String[],System.Object[])">
            <summary>
            Writes multiple objects to the controller.
            </summary>
            <param name="keys">The keys used to store and reference the object on the controller.</param>
            <param name="objs">The objects to write to the controller.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Remote.DeleteObjects(System.String[])">
            <summary>
            Deletes the objects with the specified keys on the controller.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Remote.DeleteAllObjects">
            <summary>
            Delete all objects on the controller.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Remote.GetObjectIndex(System.String)">
            <summary>
            Gets the index of an object written to V+ memory.
            </summary>
            <param name="key">The name of the object key saved in V+ memory.</param>
            <returns>The index of the object or -1 if no key was found</returns>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Robot">
            <summary>
            Represents a Robot associated with a controller
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.#ctor(System.Int32,Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.IO" /> class.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="robotWrapper">The robot wrapper.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.GetKinematicType">
            <summary>
            Gets the kinematic type for the specified robot
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.GetMotorCount">
            <summary>
            Gets the number of motors for the specified robot.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.GetSecondaryEncoderCount">
            <summary>
            Gets the secondary encoder count for the specified robot
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.GetMotorsHaveSecondaryEncoder">
            <summary>
            Checks if the the motors have secondary encoder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.GetJointCount">
            <summary>
            Gets the joint count for the specified robot
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.GetMaxJointCount">
            <summary>
            Gets the maximum joint count for the specified robot
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.GetMinJointCount">
            <summary>
            Gets the minimum joint count for the specified robot
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.GetEnabledAxisMask">
            <summary>
            Gets the enabled axis mask for the specified robot
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.GetAllowedAxisMask">
            <summary>
            Gets the allowed axis mask for the specified robot
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.GetMotorNodes">
            <summary>
            Gets the motor nodes for the specified robot
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.GetMotorGadgets">
            <summary>
            Gets the motor gadgets for the specified robot
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.SetEnabledAxisMask(System.Int32)">
            <summary>
            Sets the enabled axis mask for the specified robot
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.GetState(System.Int32)">
            <summary>
            Gets the STATE for the specified robot / state index.
            </summary>
            <param name="select">The select.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.LoadSpecFile(System.Int32,System.String,System.String)">
            <summary>
            Loads the specification file.
            </summary>
            <param name="motorNumber">The motor number.</param>
            <param name="vPlusDevice">The v plus device.</param>
            <param name="vPlusPath">The v plus path.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.SaveSpecFile(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Saves the specification file.
            </summary>
            <param name="motorNumber">The motor number.</param>
            <param name="vPlusDevice">The v plus device.</param>
            <param name="vPlusPath">The v plus path.</param>
            <param name="ascii">if set to <c>true</c> [ASCII].</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.ConfigureMotorMap(System.Int32,System.Int32)">
            <summary>
            Configures the motor map for the specified robot
            </summary>
            <param name="primaryMask">The primary mask.</param>
            <param name="secondaryMask">The secondary mask.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.LoadMotorSpecFile(System.Int32,System.String)">
            <summary>
            Loads the motor spec file.
            </summary>
            <param name="motorNumber">The motor number.</param>
            <param name="partNumber">The part number.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.WriteOpcode(System.Int32,System.Int32,System.Double)">
            <summary>
            Writes a value to an opcode.
            </summary>
            <param name="opcode">The opcode identifier.</param>
            <param name="axisNum">The axis number.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.ReadOpcode(System.Int32,System.Int32)">
            <summary>
            Reads an opcode value.
            </summary>
            <param name="opcode">The opcode identifier.</param>
            <param name="axisNum">The axis number.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.RequestExpertAccess(System.String)">
            <summary>
            Requests for expert user mode.
            </summary>
            <param name="password">The password.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.IsExpertActive">
            <summary>
            Indicates if the controller is in expert user mode
            </summary>
            <returns>
            	<c>true</c> if expert mode is active; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.ClearErrors">
            <summary>
            Clears the errors for a specified robot
            </summary>		
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.GetPosition(Ace.Communication.VpTransform@,Ace.Communication.VpTransform@,Ace.Communication.VpTransform@,Ace.Communication.VpPrecisionPoint@)">
            <summary>
            Gets the position of the specified robot.
            </summary>
            <param name="worldPosition">The world position.</param>
            <param name="basePosition">The base position.</param>
            <param name="toolOffset">The tool offset.</param>
            <param name="jointPosition">The joint position.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.InRange(Ace.Communication.VpTransform)">
            <summary>
            Determin if a location is in range.
            </summary>
            <param name="location">The location.</param>
            <returns>The INRANGE result</returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.Spin(System.Double[])">
            <summary>
            Issues a SPIN command for the specified robot.
            </summary>
            <param name="speeds">The speeds.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.SetStopOnLatch(System.Boolean)">
            <summary>
            Sets the stop on latch for a given robot
            </summary>
            <param name="enabled">if set to <c>true</c> enable the stop on latch.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.FindCalFeature(System.Int32,System.Byte)">
            <summary>
            Finds the calibration feature.
            </summary>
            <param name="motorNumber">The motor number.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.GetConfigFlags(System.Double[])">
            <summary>
            Gets the configuration flags.
            </summary>
            <param name="joints">The joints.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.SetMotorIndependentMask(System.Int32,System.Int32)">
            <summary>
            Sets the motor independent mask.
            </summary>
            <param name="motorMask">The motor mask.</param>
            <param name="stateMask">The state mask.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.BeltTrackingInitiate(System.Int32,System.Int32,Ace.Communication.VpTransform)">
            <summary>
            Initiate the tracking / belt window
            </summary>
            <param name="encoderNumber">The encoder number.</param>
            <param name="encoderCount">The encoder count.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.BeltTrackingConfigure(System.Int32,System.Double,Ace.Communication.VpTransform,System.Double,System.Double,System.Double)">
            <summary>
            Configure tracking parameters for a belt.
            </summary>
            <param name="encoderNumber">The encoder number.</param>
            <param name="mmPerCount">The mm per count.</param>
            <param name="beltTransform">The belt transform.</param>
            <param name="upstreamLimit">The upstream limit.</param>
            <param name="downstreamLimit">The downstream limit.</param>
            <param name="downstreamPickLimit">The downstream pick limit.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.MotorCommands(System.Boolean,System.Int32[],System.Int32[])">
            <summary>
            Sends commands to robot motors.
            </summary>
            <param name="robotTask">if set to <c>true</c> execue on the robot task.</param>
            <param name="opcodes">The opcodes.</param>
            <param name="motorIndex">Index of the motor.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.Jog(System.Int32,System.Double,System.Int32,System.Double[])">
            <summary>
            Issue a JOG command to a robot / motor
            </summary>
            <param name="mode">The mode.</param>
            <param name="speed">The speed.</param>
            <param name="axis">The axis.</param>
            <param name="pos">The position.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.MotorCommand(System.Boolean,System.Int32,System.Int32,System.Double[])">
            <summary>
            Issue a command to a robot motor.
            </summary>
            <param name="robotTask">if set to <c>true</c> [robot task].</param>
            <param name="opcode">The opcode.</param>
            <param name="motorIndex">Index of the motor.</param>
            <param name="outputs">The outputs.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.MotorToJoint(System.Double[])">
            <summary>
            Convert motor position to joint positions.
            </summary>
            <param name="motorPos">The motor position.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.JointToMotor(System.Double[])">
            <summary>
            Converts joint positions to motor positions.
            </summary>
            <param name="jointPos">The joint position.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.GoalPosition">
            <summary>
            Retrusn the goals position for the specified robot
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.Halt">
            <summary>
            Issue a Halts for the specified robot.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.WaitMoveDone">
            <summary>
            Issue a BREAK command.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.ForwardKinematics(System.Double[])">
            <summary>
            Issue a forward kinematics calculation translating joint positions into a cartesian coordinate.
            </summary>
            <param name="jointPos">The joint position.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.InverseKinematics(Ace.Communication.VpTransform,System.Double[],System.Boolean)">
            <summary>
            Issues an inverse kinematics command to translate from cartesian coordinates to joint positions.
            </summary>
            <param name="location">The location.</param>
            <param name="defaultJointPos">The default joint position.</param>
            <param name="throwError">if set to <c>true</c> throw an error.</param>
            <returns></returns>
            <exception cref="T:Ace.Communication.VPlusServer.TcpConnectionException">-610</exception>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.IsSpecOpcodeEditable(System.Int32,System.Int32)">
            <summary>
            Determines whether a spec opcode is editable for the specified robot.
            </summary>
            <param name="code">The code.</param>
            <param name="index">The index.</param>
            <returns>
              <c>true</c> if the spec opcode is editable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.GetSpecValue(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the spec value.
            </summary>
            <param name="paramNum">The parameter number.</param>
            <param name="index">The index.</param>
            <param name="checkAccess">if set to <c>true</c>  check for access.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.GetSpecValues(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the spec values.
            </summary>
            <param name="paramNum">The parameter number.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <param name="checkAccess">if set to <c>true</c> [check access].</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.SetSpecValue(System.Int32,System.Int32,System.Boolean,System.Double)">
            <summary>
            Sets the spec value.
            </summary>
            <param name="paramNum">The parameter number.</param>
            <param name="index">The index.</param>
            <param name="checkAccess">if set to <c>true</c> check for access.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.SetSpecValues(System.Int32,System.Int32,System.Boolean,System.Double[])">
            <summary>
            Sets the spec values.
            </summary>
            <param name="paramNum">The parameter number.</param>
            <param name="index">The index.</param>
            <param name="checkAccess">if set to <c>true</c> check for access.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.GetSpecString(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the spec string.
            </summary>
            <param name="paramNum">The parameter number.</param>
            <param name="index">The index.</param>
            <param name="checkAccess">if set to <c>true</c> check for access.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.SetSpecString(System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Sets the spec string.
            </summary>
            <param name="paramNum">The parameter number.</param>
            <param name="index">The index.</param>
            <param name="checkAccess">if set to <c>true</c> check for access.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.CalibrateMotor(System.Int32)">
            <summary>
            Issues a motor calibration command.
            </summary>
            <param name="motorMask">The motor mask.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.EnableMotorPower(System.Int32)">
            <summary>
            Enables the power for the specified motors
            </summary>
            <param name="motorMask">The motor mask.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.ReadJointPosition">
            <summary>
            Reads the joint position of the specified robot
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.ReadLatchBuffer">
            <summary>
            Reads the robot latch buffer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.SetTool(Ace.Communication.VpTransform)">
            <summary>
            Sets the TOOL for the specified robot
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.GetTool">
            <summary>
            Reads the TOOL for the specified robot.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.GetObstacleCount(System.Boolean)">
            <summary>
            Gets the obstacle count.
            </summary>
            <param name="protectedObstacle">if set to <c>true</c> return the number of protected obstacles.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.GetObstacle(System.Boolean,System.Int32,System.Int32@,Ace.Communication.VpTransform@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the obstacle.
            </summary>		
            <param name="protectedObstacle">if set to <c>true</c> return the protected obstacle.</param>
            <param name="index">The index.</param>
            <param name="type">The type.</param>
            <param name="offset">The offset.</param>
            <param name="dimension0">The dimension0.</param>
            <param name="dimension1">The dimension1.</param>
            <param name="dimension2">The dimension2.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.SetObstacle(System.Int32,System.Int32,Ace.Communication.VpTransform,System.Double,System.Double,System.Double)">
            <summary>
            Sets the obstacle.
            </summary>
            <param name="index">The index.</param>
            <param name="type">The type.</param>
            <param name="offset">The offset.</param>
            <param name="dimension0">The dimension0.</param>
            <param name="dimension1">The dimension1.</param>
            <param name="dimension2">The dimension2.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.Attach(System.Boolean)">
            <summary>
            Attach or detach the robot.
            </summary>
            <param name="attach">if set to <c>true</c> the robot will be attached.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.JointMove(System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Issues a joint move instruction.
            </summary>
            <param name="goalPos">The goal position.</param>
            <param name="flags">The motion flags.</param>
            <param name="settlePercent">The settle percent.</param>
            <param name="speed">The speed.</param>
            <param name="rotationalSpeed">The rotational speed.</param>
            <param name="accel">The accel.</param>
            <param name="decel">The decel.</param>
            <param name="sCurveProfile">The s curve profile.</param>
            <param name="duration">The duration.</param>
            <exception cref="T:Ace.Communication.VPlusServer.TcpConnectionException">50</exception>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.CartesianMove(System.Int32,Ace.Communication.VpTransform,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Issues a carttesian move instruction.
            </summary>
            <param name="configFlags">The configuration flags.</param>
            <param name="location">The location.</param>
            <param name="flags">The motion flags.</param>
            <param name="settlePercent">The settle percent.</param>
            <param name="speed">The speed.</param>
            <param name="rotationalSpeed">The rotational speed.</param>
            <param name="accel">The accel.</param>
            <param name="decel">The decel.</param>
            <param name="sCurveProfile">The s curve profile.</param>
            <param name="duration">The duration.</param>
            <exception cref="T:Ace.Communication.VPlusServer.TcpConnectionException">50</exception>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.TrackingMove(System.Int32,System.Int32,Ace.Communication.VpTransform,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Issues a carttesian move instruction.
            </summary>
            <param name="encoderNumber">The encoder number.</param>
            <param name="configFlags">The configuration flags.</param>
            <param name="location">The location.</param>
            <param name="flags">The motion flags.</param>
            <param name="settlePercent">The settle percent.</param>
            <param name="speed">The speed.</param>
            <param name="rotationalSpeed">The rotational speed.</param>
            <param name="accel">The accel.</param>
            <param name="decel">The decel.</param>
            <param name="sCurveProfile">The s curve profile.</param>
            <param name="duration">The duration.</param>
            <exception cref="T:Ace.Communication.VPlusServer.TcpConnectionException">50</exception>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Robot.Align(System.Int32,System.Int32,System.Int32)">
            <summary>
            Issues an align command for the specified robot number.
            </summary>
            <param name="speed">The speed.</param>
            <param name="accel">The acceleration.</param>
            <param name="decel">The deceleration.</param>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper">
            <summary>
            Wrapper allowing access to general controller commands.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.SerialNumber">
            <summary>
            Gets the serial number.
            </summary>
            <value>
            The serial number.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.SoftwareRevision">
            <summary>
            Gets the software revision.
            </summary>
            <value>
            The software revision.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.SecurityId">
            <summary>
            Gets the security identifier.
            </summary>
            <value>
            The security identifier.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.ControllerTime">
            <summary>
            Gets or sets the controller time.
            </summary>
            <value>
            The controller time.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.FpgaVersion">
            <summary>
            Gets the fpga version for the controller
            </summary>
            <value>
            The fpga version.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.StartupMessages">
            <summary>
            Gets the startup messages.
            </summary>
            <value>
            The startup messages.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.HighPower">
            <summary>
            Gets or sets the high power state
            </summary>
            <value>
              <c>true</c> if high power is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.MonitorSpeed">
            <summary>
            Gets or sets the monitor speed.
            </summary>
            <value>
            The monitor speed.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.EstopState">
            <summary>
            Gets if the estop is engaged or not.
            </summary>
            <value>
            The monitor speed.
            </value>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.#ctor(Ace.Communication.VPlusServer.ITcpConnectionMessageSupport)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper"/> class.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.SysInit(System.Boolean)">
            <summary>
            Performs a systems initialization command
            </summary>
            <param name="fast">if set to <c>true</c> do a fast init command.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.Reboot">
            <summary>
            Issues a reboot command.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.InvokeVPlusProgram(System.Int32,System.String)">
            <summary>
            Invokes the V+ program on a robot queue task
            </summary>
            <param name="queueNumber">The task number.</param>
            <param name="programName">Name of the program.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.GetProgramStatus(System.String)">
            <summary>
            Gets the program status.
            </summary>
            <param name="programName">Name of the program.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.GetErrors">
            <summary>
            Gets the error log 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.ExecuteVPlusInstruction(System.String)">
            <summary>
            Executes the v+ instruction.
            </summary>
            <param name="vPlusInstruction">The v+ instruction.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.GetTransformValue(System.String)">
            <summary>
            Evaluate the expression as a transform value.
            </summary>
            <param name="vPlusExpression">The v+ expression.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.GetPrecisionPointValue(System.String)">
            <summary>
            Evaluate the expression as a precision point value
            </summary>
            <param name="vPlusExpression">The v+ expression.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.GetStringValue(System.String)">
            <summary>
            Evaluate the expression as a string
            </summary>
            <param name="vPlusExpression">The v+ expression.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.GetProgramInformation(System.String,System.Int32)">
            <summary>
            Gets the information about a specific program or variable.
            </summary>
            <param name="name">The name of the program or variable.</param>
            <param name="mode">The mode of operation from 0-9.</param>
            <returns>The details of the program</returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.IsDefined(System.String[],System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            Determines whether the specified variables are defined.
            </summary>
            <param name="variables">The variables.</param>
            <param name="status">The status.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.ReadLocations(System.Int32,System.String[],System.String[],System.Collections.Generic.Dictionary{System.String,Ace.Communication.VpTransform}@)">
            <summary>
            Reads the transform locations for a set of V+ location and precision point variables
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="locations">The locations.</param>
            <param name="precisionPoints">The precision points.</param>
            <param name="transformValues">The transform values.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.UpdateFlash(System.String,System.String)">
            <summary>
            Updates the FPGA flash
            </summary>
            <param name="device">The device.</param>
            <param name="path">The file path.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.SetState(System.Int32,System.Int32)">
            <summary>
            Sets a STATE in V+
            </summary>
            <param name="select">The select.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.SaveSpecFile(System.String,System.String,System.Boolean)">
            <summary>
            Saves the specification file.
            </summary>
            <param name="vPlusDevice">The v plus device.</param>
            <param name="vPlusPath">The v plus path.</param>
            <param name="ascii">if set to <c>true</c> [ASCII].</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.LoadSpecFile(System.String,System.String)">
            <summary>
            Loads the specification file.
            </summary>
            <param name="vPlusDevice">The v plus device.</param>
            <param name="vPlusPath">The v plus path.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.ConfigureMotorMap(System.Int32)">
            <summary>
            Configures the motor map for the controller
            </summary>
            <param name="primaryMask">The primary mask.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper.Server_RemoteEventRequested(System.Object,Ace.Communication.VPlusServer.TcpConnectionRemoteRequestEventArgs)">
            <summary>
            Handles the RemoteEventRequested event of the Server control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Ace.Communication.VPlusServer.TcpConnectionRemoteRequestEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Wrappers.DeviceNetWrapper">
            <summary>
            Wrapper allowing access to general device net commands.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.DeviceNetWrapper.#ctor(Ace.Communication.VPlusServer.ITcpConnectionMessageSupport)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Wrappers.DeviceNetWrapper"/> class.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.DeviceNetWrapper.ScanDeviceNet(System.Int32,System.Int32)">
            <summary>
            Scans and returns the available DeviceNet nodes
            </summary>
            <param name="baudRate">The baud rate.</param>
            <param name="localMacId">The local mac identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Wrappers.FileSystemWrapper">
            <summary>
            Wrapper allowing access to file system commands.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.FileSystemWrapper.ControllerWrapper">
            <summary>
            Gets the controller wrapper.
            </summary>
            <value>
            The controller wrapper.
            </value>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.FileSystemWrapper.#ctor(Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Wrappers.FileSystemWrapper" /> class.
            </summary>
            <param name="controllerWrapper">The controller wrapper.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.FileSystemWrapper.Fcmnd(System.String,Ace.Communication.Fcmnd,System.String,System.String)">
            <summary>
            Issues a FCMND command the specified device.
            </summary>
            <param name="device">The device.</param>
            <param name="command">The command.</param>
            <param name="outString">The out string.</param>
            <param name="arg2">The arg2 string.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.FileSystemWrapper.GetDriveSpace(System.String,System.String,System.Boolean)">
            <summary>
            Gets the drive space.
            </summary>
            <param name="vPlusDevice">The v+ device.</param>
            <param name="vPlusDirectory">The v+ directory.</param>
            <param name="total">if set to <c>true</c> return the total space.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.FileSystemWrapper.ReadDirectory(System.String,System.String,System.String)">
            <summary>
            Return directory contents.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.FileSystemWrapper.CopyFileToVPlus(System.String,System.String,System.String)">
            <summary>
            Copies the file to V+.
            </summary>
            <param name="pcPath">The pc path.</param>
            <param name="vPlusDevice">The v+ device.</param>
            <param name="vPlusPath">The v+ path.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.FileSystemWrapper.CopyFileToPC(System.String,System.String,System.String)">
            <summary>
            Copies the file to pc.
            </summary>
            <param name="vPlusDevice">The v+ device.</param>
            <param name="vPlusPath">The v+ path.</param>
            <param name="pcPath">The pc path.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.FileSystemWrapper.FormatDrive(System.String,System.String)">
            <summary>
            Formats the drive.
            </summary>
            <param name="vPlusDevice">The v+ device.</param>
            <param name="vPlusDisk">The v+ disk.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.FileSystemWrapper.GetFileSystemRoots">
            <summary>
            Gets the file system roots for V+
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Wrappers.FirewireWrapper">
            <summary>
            Wrapper allowing access to Firewire information.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.FirewireWrapper.ControllerWrapper">
            <summary>
            Gets the controller wrapper.
            </summary>
            <value>
            The controller wrapper.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.FirewireWrapper.FirewireNodes">
            <summary>
            Gets the firewire nodes associated with the controller
            </summary>
            <value>
            The firewire nodes.
            </value>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.FirewireWrapper.#ctor(Ace.Communication.VPlusServer.Abstraction.Wrappers.ControllerWrapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Wrappers.FirewireWrapper" /> class.
            </summary>
            <param name="controllerWrapper">The controller wrapper.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.FirewireWrapper.FireWireIO(System.Int32,System.Int32,System.Int32,System.Double[])">
            <summary>
            Calls a device command or Gets/sets an opcode value on the firewire node
            </summary>
            <param name="nodeNumber">The node number.</param>
            <param name="gadget">The gadget.</param>
            <param name="opcode">The opcode.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.FirewireWrapper.GetGadgets(Ace.Communication.VPlusServer.Abstraction.Parameters.Firewire.FirewireNode)">
            <summary>
            Gets the gadgets associated with the firewire node
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.FirewireWrapper.DevicesInstruction(System.Boolean,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Issues a Devices instruction.
            </summary>
            <param name="robotAccess">if set to <c>true</c> enable robot access.</param>
            <param name="nodeOrRobot">The node or robot.</param>
            <param name="gadgetOrMotor">The gadget or motor.</param>
            <param name="opcode">The opcode.</param>
            <param name="toDevice">To device.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.FirewireWrapper.RebootNodes">
            <summary>
            Reboot all servo nodes associated with the controller
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.FirewireWrapper.ResetMotorEncoder(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resets the motor encoder.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="motorNumber">The motor number.</param>
            <param name="nodeNumber">The node number.</param>
            <param name="gadgetNumber">The gadget number.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.FirewireWrapper.ReadeYaskawaEncoderStatus(System.Int32,System.Int32,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Reades the Yaskawa motor encoder status.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="motorNumber">The motor number.</param>
            <param name="absolutePosition">The absolute position.</param>
            <param name="commutationPosition">The commutation position.</param>
            <param name="incrementalPosition">The incremental position.</param>
            <param name="alarmMask">The alarm mask.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.FirewireWrapper.ReadeTSAEncoderStatus(System.Int32,System.Int32,System.Single@,System.Single@,System.Single@)">
            <summary>
            Reades the TSA motor encoder status.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="motorNumber">The motor number.</param>
            <param name="absolutePosition">The absolute position.</param>
            <param name="incrementalPosition">The incremental position.</param>
            <param name="alarmMask">The alarm mask.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.FirewireWrapper.CommitRSC(System.Int32,System.Int32,System.Int32,System.Double[])">
            <summary>
            Commits data to the RSC card
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="nodeNumber">The node number.</param>
            <param name="gadgetNumber">The gadget number.</param>
            <param name="data">The data.</param>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Wrappers.IOWrapper">
            <summary>
            Wrapper allowing access to IO commands.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.IOWrapper.#ctor(Ace.Communication.VPlusServer.ITcpConnectionMessageSupport)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Wrappers.IOWrapper"/> class.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.IOWrapper.InitAfterRestart">
            <summary>
            Initializes after a restart.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.IOWrapper.CheckIOUpdate">
            <summary>
            Checks to see if the I/O data needs to be updated.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.IOWrapper.GetDigitalIO(System.Int32,System.Int32)">
            <summary>
            Gets the digital io status for the specified robot
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="signal">The signal.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.IOWrapper.GetDigitalIOs(System.Int32[])">
            <summary>
            Gets the status of a collection of digital I/Os.
            </summary>
            <param name="signals">The signals.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.IOWrapper.SetRobotDigitalIO(System.Int32,System.Int32[])">
            <summary>
            Sets the robot digital I/O status
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="signals">The signals.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.IOWrapper.GetAllDigitalIO(System.Int32,System.Int32)">
            <summary>
            Gets all digital I/O of a given type.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="index">The type of I/O.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.IOWrapper.GetDigitalIOMap(System.Int32,System.Int32)">
            <summary>
            Gets the map of enabled / disabled digital I/Os.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Wrappers.LatchWrapper">
            <summary>
            Wrapper allowing access to latch information.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.LatchWrapper.#ctor(Ace.Communication.VPlusServer.ITcpConnectionMessageSupport)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Wrappers.LatchWrapper"/> class.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.LatchWrapper.ReadBeltLatches(System.Int32,System.Single,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Reads all belt latches for the specified encoder
            </summary>
            <param name="encoderChanel">The encoder chanel.</param>
            <param name="maxReadDelay">The maximum read delay.</param>
            <param name="latches">The latches.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.LatchWrapper.ReadBeltLatches(System.Int32,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Reads all belt latches for the specified encoder
            </summary>
            <param name="encoderChanel">The encoder chanel.</param>
            <param name="latches">The latches.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.LatchWrapper.ClearLatchedBeltEncoder(System.Int32)">
            <summary>
            Gets the digital io status for the specified robot
            </summary>
            <param name="encoderChanel">The encoder chanel to clear.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.LatchWrapper.ReadEncoderPosition(System.Int32,System.Int32@)">
            <summary>
            Reads the current position of the specified encoder
            </summary>
            <param name="encoderChanel">The encoder chanel.</param>
            <param name="position">The position.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.LatchWrapper.ReadSpecificBeltLatch(System.Int32,System.Int32)">
            <summary>
            Reads the specific belt latch.
            </summary>
            <param name="encoderChanel">The encoder chanel.</param>
            <param name="latchInput">The latch input.</param>
            <returns>The latch position or -1 if no latch found</returns>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Wrappers.LicenseWrapper">
            <summary>
            Wrapper allowing access to Licensing Information.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.LicenseWrapper.#ctor(Ace.Communication.VPlusServer.ITcpConnectionMessageSupport)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Wrappers.LicenseWrapper"/> class.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.LicenseWrapper.InitAfterRestart">
            <summary>
            Initializes the after restart.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.LicenseWrapper.IsLicenseAvailable(Ace.Communication.VPlusLicense,System.Int32)">
            <summary>
            Determines whether the specified license is enabled.
            </summary>
            <param name="license">The license.</param>
            <param name="index">The index.</param>
            <returns>
              <c>true</c> if the specified license is available; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.LicenseWrapper.IsLicenseEnabled(Ace.Communication.VPlusLicense,System.Int32)">
            <summary>
            Determines whether a specified license is enabled.
            </summary>
            <param name="license">The license.</param>
            <param name="index">The index.</param>
            <returns>
              <c>true</c> if the license is enabled; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.LicenseWrapper.CheckLicenseUpdate">
            <summary>
            Checks if the license data should be updated.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.LicenseWrapper.UpdateLicenses">
            <summary>
            Updates the licenses.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.LicenseWrapper.InstallLicense(System.Boolean,System.Int32,System.String)">
            <summary>
            Install or uninstall a license.
            </summary>
            <param name="enabled">if set to <c>true</c> enable the license.</param>
            <param name="index">The index.</param>
            <param name="password">The password.</param>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Wrappers.NVRamWrapper">
            <summary>
            Wrapper allowing access to NVRam Information.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.NVRamWrapper.#ctor(Ace.Communication.VPlusServer.ITcpConnectionMessageSupport)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Wrappers.NVRamWrapper"/> class.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.NVRamWrapper.Read(System.Int64@,System.String@,System.String@)">
            <summary>
            Install or uninstall a license.
            </summary>
            <param name="flags">The flags.</param>
            <param name="address">The address.</param>
            <param name="subnetMask">The subnet mask.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.NVRamWrapper.Save(System.Int64,System.String,System.String)">
            <summary>
            Saves the settings to NVRam.
            </summary>
            <param name="flags">The flags.</param>
            <param name="address">The address.</param>
            <param name="subnetMask">The subnet mask.</param>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Wrappers.ProfilerWrapper">
            <summary>
            Wrapper allowing access to profiler commands.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.ProfilerWrapper.TotalTime">
            <summary>
            Gets or sets the total time collected
            </summary>
            <value>The total time.</value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.ProfilerWrapper.RawIndexes">
            <summary>
            Gets or sets the raw indexes received from V+
            </summary>
            <value>The raw indexes.</value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.ProfilerWrapper.RawValues">
            <summary>
            Gets or sets the raw values received from V+
            </summary>
            <value>The raw values.</value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.ProfilerWrapper.PercentValues">
            <summary>
            Gets the duty cycle percent values
            </summary>
            <value>The percent values.</value>
        </member>
        <member name="E:Ace.Communication.VPlusServer.Abstraction.Wrappers.ProfilerWrapper.DataReceived">
            <summary>
            An event when data is ready to display
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.ProfilerWrapper.TimingInterval">
            <summary>
            Gets or sets the timing interval.
            </summary>
            <value>The timing interval.</value>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ProfilerWrapper.#ctor(Ace.Communication.VPlusServer.ITcpConnectionMessageSupport)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Wrappers.ProfilerWrapper"/> class.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ProfilerWrapper.StartProfiler(System.Int32)">
            <summary>
            Starts the profiler V+ task
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ProfilerWrapper.StopProfiler">
            <summary>
            Stops the profiler.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ProfilerWrapper.SetTimingInterval(System.Double)">
            <summary>
            Sets the timing interval.
            </summary>
            <param name="interval">The interval.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ProfilerWrapper.ConvertToPercent">
            <summary>
            Converts the raw values from time to percent
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ProfilerWrapper.CompileDisplayData(System.Collections.Generic.Dictionary{System.Int32,System.Double})">
            <summary>
            Compiles the display data.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.ProfilerWrapper.listener_OnNewDataReceived(System.Object,Ace.Communication.VPlusServer.Abstraction.Parameters.Profiler.ProfilerEventArgs)">
            <summary>
            Handles the OnNewDataReceived event of the listener control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The <see cref="T:Ace.Communication.VPlusServer.Abstraction.Parameters.Profiler.ProfilerEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Wrappers.RemoteLibraryWrapper">
            <summary>
            Wrapper for dealing with remote library commands.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RemoteLibraryWrapper.#ctor(Ace.Communication.VPlusServer.ITcpConnectionMessageSupport)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Wrappers.RemoteLibraryWrapper"/> class.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RemoteLibraryWrapper.ExecuteResponse(System.Int32,System.Int32)">
            <summary>
            Sends the execute response 
            </summary>
            <param name="respIndex">Index of the resp.</param>
            <param name="statusCode">The status code.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RemoteLibraryWrapper.ReadResponse(System.Int32,System.Int32,System.String[])">
            <summary>
            Sends the read response
            </summary>
            <param name="respIndex">Index of the resp.</param>
            <param name="statusCode">The status code.</param>
            <param name="vals">The valuse to write.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RemoteLibraryWrapper.WriteResponse(System.Int32,System.Int32)">
            <summary>
            Sends the execute response 
            </summary>
            <param name="respIndex">Index of the resp.</param>
            <param name="statusCode">The status code.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RemoteLibraryWrapper.FileResponse(System.Int32,System.Int32,System.String[])">
            <summary>
            Sends the file response
            </summary>
            <param name="respIndex">Index of the resp.</param>
            <param name="statusCode">The status code.</param>
            <param name="vals">The valuse to write.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RemoteLibraryWrapper.ApplicationEventResponse(System.Int32,System.Int32)">
            <summary>
            Sends the file response
            </summary>
            <param name="respIndex">Index of the resp.</param>
            <param name="statusCode">The status code.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RemoteLibraryWrapper.WriteObject(System.String[],System.Object[])">
            <summary>
            Writes multiple objects to the controller.
            </summary>
            <param name="keys">The keys used to store and reference the object on the controller.</param>
            <param name="objs">The objects to write to the controller.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RemoteLibraryWrapper.DeleteObjects(System.String[])">
            <summary>
            Deletes the objects with the specified keys on the controller.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RemoteLibraryWrapper.DeleteAllObjects">
            <summary>
            Delete all objects on the controller.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RemoteLibraryWrapper.GetObjectIndex(System.String)">
            <summary>
            Gets the index of an object written to V+ memory.
            </summary>
            <param name="key">The name of the object key saved in V+ memory.</param>
            <returns>The index of the object or -1 if no key was found</returns>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper">
            <summary>
            Wrapper allowing access to robot information.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.TrajectoryRate">
            <summary>
            Gets the trajectory rate.
            </summary>
            <value>
            The trajectory rate.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.MinimumEncoderCount">
            <summary>
            Gets the minimum encoder count.
            </summary>
            <value>
            The minimum encoder count.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.MaximumEncoderCount">
            <summary>
            Gets the maximum encoder count.
            </summary>
            <value>
            The maximum encoder count.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.EncoderCount">
            <summary>
            Gets or sets the encoder count.
            </summary>
            <value>
            The encoder count.
            </value>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.GetControllerEncodersNums">
            <summary>
            Gets the index of the encoders hosted by the controller (the others are hosted on other devices like smi6)
            </summary>
            <returns>list containing the controller hosted encoder numbers</returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.UpdateMotorMap(System.Int32)">
            <summary>
            Update the motor map. Note that SYS.INIT must be done BEFORE AND AFTER.
            </summary>
            <param name="robotMask">Bit mask indicating robot to update (bit 0 for encoders, 1 for robot 1, etc.), or -1 for all devices.</param>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.EncoderNodes">
            <summary>
            Gets the encoder nodes.
            </summary>
            <value>
            The encoder nodes.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.CalibrationMask">
            <summary>
            Gets the calibration mask identifying what robots are calibrated
            </summary>
            <value>
            The calibration mask.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.IsCalibrated">
            <summary>
            Gets a value indicating whether the controller robots are calibrated.
            </summary>
            <value>
            <c>true</c> if the robots are calibrated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.#ctor(Ace.Communication.VPlusServer.Abstraction.Wrappers.FirewireWrapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper" /> class.
            </summary>
            <param name="firewireWrapper">The firewire wrapper.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.InitAfterRestart">
            <summary>
            Initializes the after restart.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.CheckRobotData">
            <summary>
            Checks if the robot data must be initialized
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.ReadMotorsHaveSecondaryEncoderForRobot(System.Int32,System.Int32)">
            <summary>
            Read motor that has secondary encoder for the robot.
            </summary>
            <param name="robotNumber">1-based robot number, or 0 if not robot specific.</param>
            <param name="motorNumber">motor number .</param>
            <returns>the motor that has secondary encoder.</returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.IsThereSecondaryEncoderForMotor(System.Int32,System.Int32)">
            <summary>		
            Read the encoder position of the secondary encoder for the motor, and
            if the position is returned, the secondary encoder is presented.
            </summary>
            <param name="robotNumber">1-based robot number, or 0 if not robot specific.</param>
            <param name="motorIndex">the motor number.</param>
            <returns>True = Secondary Encoder is existed for the motor.</returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.Calibrate">
            <summary>
            Issue a robot calibration command
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.GetKinematicType(System.Int32)">
            <summary>
            Gets the kinematic type for the specified robot
            </summary>
            <param name="robotNumber">The robot number.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.GetMotorCount(System.Int32)">
            <summary>
            Gets the number of motors for the specified robot.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.GetSecondaryEncoderCount(System.Int32)">
            <summary>
            Gets the secondary encoder count for the specified robot
            </summary>
            <param name="robotNumber">The robot number.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.GetMotorsHaveSecondaryEncoder(System.Int32)">
            <summary>
            Checks if the the motors have secondary encoder.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.GetJointCount(System.Int32)">
            <summary>
            Gets the joint count for the specified robot
            </summary>
            <param name="robotNumber">The robot number.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.GetMaxJointCount(System.Int32)">
            <summary>
            Gets the maximum joint count for the specified robot
            </summary>
            <param name="robotNumber">The robot number.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.GetMinJointCount(System.Int32)">
            <summary>
            Gets the minimum joint count for the specified robot
            </summary>
            <param name="robotNumber">The robot number.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.GetEnabledAxisMask(System.Int32)">
            <summary>
            Gets the enabled axis mask for the specified robot
            </summary>
            <param name="robotNumber">The robot number.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.GetAllowedAxisMask(System.Int32)">
            <summary>
            Gets the allowed axis mask for the specified robot
            </summary>
            <param name="robotNumber">The robot number.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.GetMotorNodes(System.Int32)">
            <summary>
            Gets the motor nodes for the specified robot
            </summary>
            <param name="robotNumber">The robot number.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.GetMotorGadgets(System.Int32)">
            <summary>
            Gets the motor gadgets for the specified robot
            </summary>
            <param name="robotNumber">The robot number.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.SetEnabledAxisMask(System.Int32,System.Int32)">
            <summary>
            Sets the enabled axis mask for the specified robot
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.GetState(System.Int32,System.Int32)">
            <summary>
            Gets the STATE for the specified robot / state index.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="select">The select.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.Save(System.Int32)">
            <summary>
            Saves the controller specifications.
            </summary>
            <param name="robotMask">The robot mask.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.ClearServoInitOpcodes(System.Int32)">
            <summary>
            Clears the servo initialization opcodes.
            </summary>
            <param name="robotMask">The robot mask.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.GetServoInitOpcodeCount(System.Int32)">
            <summary>
            Gets the servo initialization opcode count.
            </summary>
            <param name="robotMask">The robot mask.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.LoadSpecFile(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Loads the specification file.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="motorNumber">The motor number.</param>
            <param name="vPlusDevice">The v plus device.</param>
            <param name="vPlusPath">The v plus path.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.SaveSpecFile(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Saves the specification file.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="motorNumber">The motor number.</param>
            <param name="vPlusDevice">The v plus device.</param>
            <param name="vPlusPath">The v plus path.</param>
            <param name="ascii">if set to <c>true</c> [ASCII].</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.ConfigureMotorMap(System.Int32,System.Int32,System.Int32)">
            <summary>
            Configures the motor map for the specified robot
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="primaryMask">The primary mask.</param>
            <param name="secondaryMask">The secondary mask.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.LoadMotorSpecFile(System.Int32,System.Int32,System.String)">
            <summary>
            Loads the motor spec file.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="motorNumber">The motor number.</param>
            <param name="partNumber">The part number.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.GetDeviceValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the device value.
            </summary>
            <param name="type">The type.</param>
            <param name="unit">The unit.</param>
            <param name="select">The select.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.SetDevice(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the device.
            </summary>
            <param name="type">The type.</param>
            <param name="unit">The unit.</param>
            <param name="select">The select.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.SetDeviceValue(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Sets the device value.
            </summary>
            <param name="type">The type.</param>
            <param name="unit">The unit.</param>
            <param name="select">The select.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.SetDeviceValues(System.Int32,System.Int32,System.Int32,System.Single[])">
            <summary>
            Sets the device values.
            </summary>
            <param name="type">The type.</param>
            <param name="unit">The unit.</param>
            <param name="select">The select.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.RequestExpertAccess(System.Int32,System.String)">
            <summary>
            Requests for expert user mode.
            </summary>
            <param name="robNum">The robot number.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.IsExpertActive">
            <summary>
            Indicates if the controller is in expert user mode
            </summary>
            <returns>
            	<c>true</c> if expert mode is active; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.WriteOpcode(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Writes a value to an opcode.
            </summary>
            <param name="robNum">The robot number.</param>
            <param name="opcode">The opcode identifier.</param>
            <param name="axisNum">The axis number.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.ReadOpcode(System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads an opcode value.
            </summary>
            <param name="robNum">The robot number.</param>
            <param name="opcode">The opcode identifier.</param>
            <param name="axisNum">The axis number.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.ClearErrors(System.Int32)">
            <summary>
            Clears the errors for a specified robot
            </summary>
            <param name="robotNumber">The robot number.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.GetPosition(System.Int32,Ace.Communication.VpTransform@,Ace.Communication.VpTransform@,Ace.Communication.VpTransform@,Ace.Communication.VpPrecisionPoint@)">
            <summary>
            Gets the position of the specified robot.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="worldPosition">The world position.</param>
            <param name="basePosition">The base position.</param>
            <param name="toolOffset">The tool offset.</param>
            <param name="jointPosition">The joint position.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.InRange(System.Int32,Ace.Communication.VpTransform)">
            <summary>
            Determin if a location is in range.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="location">The location.</param>
            <returns>The INRANGE result</returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.Spin(System.Int32,System.Double[])">
            <summary>
            Issues a SPIN command for the specified robot.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="speeds">The speeds.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.SetStopOnLatch(System.Int32,System.Boolean)">
            <summary>
            Sets the stop on latch for a given robot
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="enabled">if set to <c>true</c> enable the stop on latch.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.FindCalFeature(System.Int32,System.Int32,System.Byte)">
            <summary>
            Finds the calibration feature.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="motorNumber">The motor number.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.GetConfigFlags(System.Int32,System.Double[])">
            <summary>
            Gets the configuration flags.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="joints">The joints.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.SetMotorIndependentMask(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the motor independent mask.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="motorMask">The motor mask.</param>
            <param name="stateMask">The state mask.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.BeltTrackingInitiate(System.Int32,System.Int32,System.Int32,Ace.Communication.VpTransform)">
            <summary>
            Initiate the tracking / belt window 
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="encoderNumber">The encoder number.</param>
            <param name="encoderCount">The encoder count.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.BeltTrackingConfigure(System.Int32,System.Int32,System.Double,Ace.Communication.VpTransform,System.Double,System.Double,System.Double)">
            <summary>
            Configure tracking parameters for a belt.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="encoderNumber">The encoder number.</param>
            <param name="mmPerCount">The mm per count.</param>
            <param name="beltTransform">The belt transform.</param>
            <param name="upstreamLimit">The upstream limit.</param>
            <param name="downstreamLimit">The downstream limit.</param>
            <param name="downstreamPickLimit">The downstream pick limit.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.MotorCommands(System.Int32,System.Boolean,System.Int32[],System.Int32[])">
            <summary>
            Sends commands to robot motors.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="robotTask">if set to <c>true</c> execue on the robot task.</param>
            <param name="opcodes">The opcodes.</param>
            <param name="motorIndex">Index of the motor.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.Jog(System.Int32,System.Int32,System.Double,System.Int32,System.Double[])">
            <summary>
            Issue a JOG command to a robot / motor
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="mode">The mode.</param>
            <param name="speed">The speed.</param>
            <param name="axis">The axis.</param>
            <param name="pos">The position.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.MotorCommand(System.Int32,System.Boolean,System.Int32,System.Int32,System.Double[])">
            <summary>
            Issue a command to a robot motor.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="robotTask">if set to <c>true</c> [robot task].</param>
            <param name="opcode">The opcode.</param>
            <param name="motorIndex">Index of the motor.</param>
            <param name="outputs">The outputs.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.MotorToJoint(System.Int32,System.Double[])">
            <summary>
            Convert motor position to joint positions.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="motorPos">The motor position.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.JointToMotor(System.Int32,System.Double[])">
            <summary>
            Converts joint positions to motor positions.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="jointPos">The joint position.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.GoalPosition(System.Int32)">
            <summary>
            Retrusn the goals position for the specified robot
            </summary>
            <param name="robotNumber">The robot number.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.Halt(System.Int32)">
            <summary>
            Issue a Halts for the specified robot.
            </summary>
            <param name="robotNumber">The robot number.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.WaitMoveDone(System.Int32)">
            <summary>
            Issue a BREAK command.
            </summary>
            <param name="robotNumber">The robot number.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.ForwardKinematics(System.Int32,System.Double[])">
            <summary>
            Issue a forward kinematics calculation translating joint positions into a cartesian coordinate.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="jointPos">The joint position.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.InverseKinematics(System.Int32,Ace.Communication.VpTransform,System.Double[],System.Boolean)">
            <summary>
            Issues an inverse kinematics command to translate from cartesian coordinates to joint positions.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="location">The location.</param>
            <param name="defaultJointPos">The default joint position.</param>
            <param name="throwError">if set to <c>true</c> throw an error.</param>
            <returns></returns>
            <exception cref="T:Ace.Communication.VPlusServer.TcpConnectionException">-610</exception>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.IsSpecOpcodeEditable(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether a spec opcode is editable for the specified robot.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="code">The code.</param>
            <param name="index">The index.</param>
            <returns>
              <c>true</c> if the spec opcode is editable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.GetSpecValue(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the spec value.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="paramNum">The parameter number.</param>
            <param name="index">The index.</param>
            <param name="checkAccess">if set to <c>true</c>  check for access.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.GetSpecValues(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the spec values.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="paramNum">The parameter number.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <param name="checkAccess">if set to <c>true</c> [check access].</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.SetSpecValue(System.Int32,System.Int32,System.Int32,System.Boolean,System.Double)">
            <summary>
            Sets the spec value.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="paramNum">The parameter number.</param>
            <param name="index">The index.</param>
            <param name="checkAccess">if set to <c>true</c> check for access.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.SetSpecValues(System.Int32,System.Int32,System.Int32,System.Boolean,System.Double[])">
            <summary>
            Sets the spec values.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="paramNum">The parameter number.</param>
            <param name="index">The index.</param>
            <param name="checkAccess">if set to <c>true</c> check for access.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.GetSpecString(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the spec string.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="paramNum">The parameter number.</param>
            <param name="index">The index.</param>
            <param name="checkAccess">if set to <c>true</c> check for access.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.SetSpecString(System.Int32,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Sets the spec string.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="paramNum">The parameter number.</param>
            <param name="index">The index.</param>
            <param name="checkAccess">if set to <c>true</c> check for access.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.CalibrateMotor(System.Int32,System.Int32)">
            <summary>
            Issues a motor calibration command.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="motorMask">The motor mask.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.EnableMotorPower(System.Int32,System.Int32)">
            <summary>
            Enables the power for the specified motors
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="motorMask">The motor mask.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.ReadJointPosition(System.Int32)">
            <summary>
            Reads the joint position of the specified robot
            </summary>
            <param name="robotNumber">The robot number.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.ReadLatchBuffer(System.Int32)">
            <summary>
            Reads the robot latch buffer
            </summary>
            <param name="robotNumber">The robot number.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.SetTool(System.Int32,Ace.Communication.VpTransform)">
            <summary>
            Sets the TOOL for the specified robot
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.GetTool(System.Int32)">
            <summary>
            Reads the TOOL for the specified robot.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.GetObstacleCount(System.Int32,System.Boolean)">
            <summary>
            Gets the obstacle count.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="protectedObstacle">if set to <c>true</c> return the number of protected obstacles.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.GetObstacle(System.Int32,System.Boolean,System.Int32,System.Int32@,Ace.Communication.VpTransform@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the obstacle.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="protectedObstacle">if set to <c>true</c> return the protected obstacle.</param>
            <param name="index">The index.</param>
            <param name="type">The type.</param>
            <param name="offset">The offset.</param>
            <param name="dimension0">The dimension0.</param>
            <param name="dimension1">The dimension1.</param>
            <param name="dimension2">The dimension2.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.SetObstacle(System.Int32,System.Int32,System.Int32,Ace.Communication.VpTransform,System.Double,System.Double,System.Double)">
            <summary>
            Sets the obstacle.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="index">The index.</param>
            <param name="type">The type.</param>
            <param name="offset">The offset.</param>
            <param name="dimension0">The dimension0.</param>
            <param name="dimension1">The dimension1.</param>
            <param name="dimension2">The dimension2.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.Attach(System.Int32,System.Boolean)">
            <summary>
            Attach or detach the robot.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="attach">if set to <c>true</c> the robot will be attached.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.JointMove(System.Int32,System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Issues a joint move instruction.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="goalPos">The goal position.</param>
            <param name="flags">The motion flags.</param>
            <param name="settlePercent">The settle percent.</param>
            <param name="speed">The speed.</param>
            <param name="rotationalSpeed">The rotational speed.</param>
            <param name="accel">The accel.</param>
            <param name="decel">The decel.</param>
            <param name="sCurveProfile">The s curve profile.</param>
            <param name="duration">The duration.</param>
            <exception cref="T:Ace.Communication.VPlusServer.TcpConnectionException">50</exception>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.CartesianMove(System.Int32,System.Int32,Ace.Communication.VpTransform,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Issues a carttesian move instruction.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="configFlags">The configuration flags.</param>
            <param name="location">The location.</param>
            <param name="flags">The motion flags.</param>
            <param name="settlePercent">The settle percent.</param>
            <param name="speed">The speed.</param>
            <param name="rotationalSpeed">The rotational speed.</param>
            <param name="accel">The accel.</param>
            <param name="decel">The decel.</param>
            <param name="sCurveProfile">The s curve profile.</param>
            <param name="duration">The duration.</param>
            <exception cref="T:Ace.Communication.VPlusServer.TcpConnectionException">50</exception>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.TrackingMove(System.Int32,System.Int32,System.Int32,Ace.Communication.VpTransform,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Issues a carttesian move instruction.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="encoderNumber">The encoder number.</param>
            <param name="configFlags">The configuration flags.</param>
            <param name="location">The location.</param>
            <param name="flags">The motion flags.</param>
            <param name="settlePercent">The settle percent.</param>
            <param name="speed">The speed.</param>
            <param name="rotationalSpeed">The rotational speed.</param>
            <param name="accel">The accel.</param>
            <param name="decel">The decel.</param>
            <param name="sCurveProfile">The s curve profile.</param>
            <param name="duration">The duration.</param>
            <exception cref="T:Ace.Communication.VPlusServer.TcpConnectionException">50</exception>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.Align(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Issues an align command for the specified robot number.
            </summary>
            <param name="robotNumber">The robot number.</param>
            <param name="speed">The speed.</param>
            <param name="accel">The acceleration.</param>
            <param name="decel">The deceleration.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.RobotWrapper.Server_RemoteEventRequested(System.Object,Ace.Communication.VPlusServer.TcpConnectionRemoteRequestEventArgs)">
            <summary>
            Handles the RemoteEventRequested event of the Server control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Ace.Communication.VPlusServer.TcpConnectionRemoteRequestEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Ace.Communication.VPlusServer.Abstraction.Wrappers.WrapperBase">
            <summary>
            Base class for all wrapper classes providing controller functionality access
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.Abstraction.Wrappers.WrapperBase.MaxRobotCount">
            <summary>
            The maximum number of robots allowed on a controller
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.WrapperBase.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            <c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.WrapperBase.ModelType">
            <summary>
            Gets the type of the model.
            </summary>
            <value>
            The type of the model.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.WrapperBase.ControllerType">
            <summary>
            Gets the type of the controller.
            </summary>
            <value>
            The type of the controller.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.WrapperBase.RobotCount">
            <summary>
            Gets the number of robots associated with the controller.
            </summary>
            <value>
            The robot count.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.WrapperBase.Server">
            <summary>
            Gets the server connection.
            </summary>
            <value>
            The server.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.WrapperBase.SupportsRemoteEvents">
            <summary>
            Gets a value indicating whether the underlying server connection supports remote events.
            </summary>
            <value>
            <c>true</c> if the server supports remote events; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.Abstraction.Wrappers.WrapperBase.IsEVPlus">
            <summary>
            Gets a value indicating whether this instance is ev+.
            </summary>
            <value>
            <c>true</c> if this instance is ev+; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.WrapperBase.#ctor(Ace.Communication.VPlusServer.ITcpConnectionMessageSupport)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.Abstraction.Wrappers.WrapperBase"/> class.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.WrapperBase.InitAfterRestart">
            <summary>
            Initializes the after restart.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.WrapperBase.GetId(System.Int32)">
            <summary>
            Issue an ID command
            </summary>
            <param name="select">The select.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.WrapperBase.GetId(System.Int32,System.Int32)">
            <summary>
            Issue an ID command
            </summary>
            <param name="component">The component.</param>
            <param name="device">The device.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.WrapperBase.GetRealValue(System.String)">
            <summary>
            Evaluate the expression as a real value.
            </summary>
            <param name="vPlusExpression">The v+ expression.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.WrapperBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.Abstraction.Wrappers.WrapperBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Ace.Communication.VPlusServer.ControllerLock">
            <summary>
            This class contains two locks that need to be obtained 
            by any thread to get a TCP connection to controller.
            One lock is to obtain exclusive access from the PC, 
            and another is to obtain exclusive access to the controller.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ControllerLock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.ControllerLock"/> class.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ControllerLock.getLock(Ace.Communication.Link.ActiveVLink)">
            <summary>
            Gets exclusive initialization (PC) and Controller locks.
            </summary>
            <param name="Link">The link.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ControllerLock.GetControllerLock">
            <summary>
            Gets the controller lock.  If not available it checks it once every 1.5 seconds.
            </summary>
            <exception cref="T:System.Exception">Controller is locked</exception>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ControllerLock.releaseLock">
            <summary>
            Releases controller and initialization locks 
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ControllerLock.ReleaseControllerLock">
            <summary>
            Releases the controller lock by setting $sv.client_lock to empty string ("")
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ControllerLock.WaitTimer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Check controller lock availability once every 1.5 seconds.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Timers.ElapsedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ControllerLock.isControllerLocked">
            <summary>
            It checks controller $sv.client_lock to determine if it is already locked.
            controller is locked if ListS returns 1 or -1.
            </summary>
            <returns>
              <c>true</c> if [is controller locked]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ControllerLock.setLock">
            <summary>
            It locks the controller access to other clients by setting
            $sv.client_lock to "1"
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ControllerLock.InitializeLock">
            <summary>
            Gets Initialization lock.
            This lock provides exclusive access to controller for downloading a.ace_srvr file and 
            starting the tcp server task on controller
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ControllerLock.InitializeUnlock">
            <summary>
            Releases Initialization lock.
            </summary>
        </member>
        <member name="T:Ace.Communication.VPlusServer.RemoteOperationEventCode">
            <summary>
            Allowed event codes received from V+.
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.RemoteOperationEventCode.Ping">
            <summary>
            A ping operation was requested
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.RemoteOperationEventCode.PowerStateChange">
            <summary>
            A power state has changed
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.RemoteOperationEventCode.CalibrationStateChange">
            <summary>
            The calibration state has change
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.RemoteOperationEventCode.MonitorSpeedChange">
            <summary>
            The monitor speed has changed
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.RemoteOperationEventCode.EStopStateChange">
            <summary>
            The e-stop state has changed
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.RemoteOperationEventCode.RemoteExecute">
            <summary>
             V+ Program Command to execute a method on the PC
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.RemoteOperationEventCode.RemoteRead">
            <summary>
            V+ Program command to read variables on the PC
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.RemoteOperationEventCode.RemoteWrite">
            <summary>
            V+ Program command to write variables to objects on the PC
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.RemoteOperationEventCode.RemoteFileCopy">
            <summary>
            V+ Program command to copy a file from the PC to the controller
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.RemoteOperationEventCode.RemoteFileDelete">
            <summary>
            V+ Program command to delete a file on the PC
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.RemoteOperationEventCode.RemoteFileAppendLines">
            <summary>
            V+ Program command to append lines to a file on the PC
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.RemoteOperationEventCode.RemoteFileDirectory">
            <summary>
            V+ Program command to perform a directory listing on the PC
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.RemoteOperationEventCode.RemoteAceServerLog">
            <summary>
            V+ Program command to append text to the AceServer log
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.RemoteOperationEventCode.RemoteApplicatonEvent">
            <summary>
            V+ Program command to generate application event
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.RemoteOperationEventCode.RemoteSave">
            <summary>
            V+ Program command to save the workspace
            </summary>
        </member>
        <member name="T:Ace.Communication.VPlusServer.ITcpConnectionMessage">
            <summary>
            Interface describing a class for storing and receiving messages to and from an
            Adept controller.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.ITcpConnectionMessage.SendTime">
            <summary>
            Gets a time stamp of when the message was sent in milliseconds.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.ITcpConnectionMessage.ReplyTime">
            <summary>
            Gets a time stamp of when the message reply was received in milliseconds.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.ITcpConnectionMessage.MessageNumber">
            <summary>
            Gets the unique message number associated with this message.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.ITcpConnectionMessage.VPlusProgramName">
            <summary>
            Gets the V+ program name that will be invoked.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.ITcpConnectionMessage.Queue">
            <summary>
            Gets or sets the queue on the V+ controller in which
            the message should be executed. There are numerous
            queues, with queue 0 being the actual task performing
            communication, other queues for each robot, etc.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.ITcpConnectionMessage.ReplyExpected">
            <summary>
            Gets or sets a flag indicating whether a reply is expected.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.ITcpConnectionMessage.SuppressTimeout">
            <summary>
            Gets or sets a flag indicating whether the timeout should be
            suppressed during this message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.ReplyReceived(System.Byte[],System.Int32)">
            <summary>
            Called to notify that a reply was received
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.ReadString">
            <summary>
            Reads a string from the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.ReadSingle">
            <summary>
            Reads a float from the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.ReadDouble">
            <summary>
            Reads a double from the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.ReadSingleArray">
            <summary>
            Reads a float array from the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.ReadDoubleArray">
            <summary>
            Reads a double array from the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.ReadStringArray">
            <summary>
            Reads a string array from the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.ReadShort">
            <summary>
            Reads a 16-bit integer from the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.ReadShortArray">
            <summary>
            Reads a short array from the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.ReadBytes">
            <summary>
            Reads a byte array from the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.ReadByte">
            <summary>
            Reads a byte from the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.ReadBoolean">
            <summary>
            Reads a boolean from the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.ReadVpTransform">
            <summary>
            Reads a Z-Y-Z transform from the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.WriteVpTransform(Ace.Communication.VpTransform)">
            <summary>
            Writes a Z-Y-Z transform to the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.WriteByte(System.Byte[])">
            <summary>
            Writes a sequence of byte to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.WriteBoolean(System.Boolean)">
            <summary>
            Writes a boolean to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.WriteBoolean(System.Boolean[])">
            <summary>
            Writes a sequence of boolean to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.WriteShort(System.Int32)">
            <summary>
            Writes a 16-bit integer to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.WriteShort(System.Int32[])">
            <summary>
            Writes a sequence of 16-bit integer to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.WriteString(System.String)">
            <summary>
            Writes a string to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.WriteString(System.String[])">
            <summary>
            Writes a sequence of string to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.WriteBytes(System.Byte[])">
            <summary>
            Writes the given byte array to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.WriteSingle(System.Double)">
            <summary>
            Writes a float to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.WriteSingle(System.Double[])">
            <summary>
            Writes a sequence of float to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.WriteDouble(System.Double)">
            <summary>
            Writes a double to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.WriteDouble(System.Double[])">
            <summary>
            Writes a sequence of double to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.WriteShortArray(System.Int32[])">
            <summary>
            Writes a short array to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.WriteSingleArray(System.Single[])">
            <summary>
            Writes a single array to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.WriteDoubleArray(System.Double[])">
            <summary>
            Writes a double array to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.WriteStringArray(System.String[])">
            <summary>
            Writes a string array to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.Write(System.IO.Stream)">
            <summary>
            Writes the message to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessage.WaitForReply">
            <summary>
            Waits for the reply to the message
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.ITcpConnectionMessage.ErrorCode">
            <summary>
            Gets any error code returned from V+, or 0 if no error.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.ITcpConnectionMessage.ErrorIndex">
            <summary>
            Gets the variable portion of the error code from V+.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.ITcpConnectionMessage.ErrorString">
            <summary>
            Gets the string interpretation of the error code from V+.
            Only valid if the error code is non-zero.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.ITcpConnectionMessage.ErrorDescription">
            <summary>
            Gets an additional user-specified error string from V+.
            Only valid if the error code is non-zero.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.ITcpConnectionMessage.ErrorStack">
            <summary>
            Gets an additional user-specified error string from V+.
            Only valid if the error code is non-zero.
            </summary>
        </member>
        <member name="T:Ace.Communication.VPlusServer.ITcpConnectionMessageSupport">
            <summary>
            Interface indicating the object supports the sending of messages
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.ITcpConnectionMessageSupport.EmulationMode">
            <summary>
            Gets a value indicating whether the instance is running in emulation mode.
            </summary>
            <value>
              <c>true</c> if the instance is running in emulation mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.ITcpConnectionMessageSupport.HostAddress">
            <summary>
            The host address identified for the network adapter communicating with V+.
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.ITcpConnectionMessageSupport.Link">
            <summary>
            Gets the link associated with the connection
            </summary>
            <value>
            The link.
            </value>
        </member>
        <member name="M:Ace.Communication.VPlusServer.ITcpConnectionMessageSupport.Send(Ace.Communication.VPlusServer.ITcpConnectionMessage)">
            <summary>
            Sends the message.
            </summary>
            <param name="msg">The message.</param>
            <returns>A handle to the received response message</returns>
        </member>
        <member name="T:Ace.Communication.VPlusServer.ITcpConnectionRemoteEventSupport">
            <summary>
            Interface indicating the object supports the receiving of remote event messages
            </summary>
        </member>
        <member name="E:Ace.Communication.VPlusServer.ITcpConnectionRemoteEventSupport.RemoteEventRequested">
            <summary>
            Event detailing when a remote V+ generate message is received
            </summary>
        </member>
        <member name="T:Ace.Communication.VPlusServer.TcpConnectionRemoteRequestEventArgs">
            <summary>
            Represents a remote request from the V+ TCP Server
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionRemoteRequestEventArgs.Code">
            <summary>
            Gets the type of message
            </summary>
            <value>
            The type of message.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionRemoteRequestEventArgs.Message">
            <summary>
            Gets the message containing the data
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionRemoteRequestEventArgs.#ctor(Ace.Communication.VPlusServer.RemoteOperationEventCode,Ace.Communication.VPlusServer.TcpConnectionMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.TcpConnectionRemoteRequestEventArgs" /> class.
            </summary>
            <param name="code">The event code.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:Ace.Communication.VPlusServer.TcpConnectionException">
            <summary>
            An base class for exceptions with error codes and optional
            associated AceObjects.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionException.#ctor(System.Int32)">
            <summary>
            Create an exception with the specified exception code.
            </summary>
            <param name="code">Error code</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionException.#ctor(System.Int32,System.String)">
            <summary>
            Create an exception with a specified description.
            </summary>
            <param name="code">Error code</param>
            <param name="description">String description.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Create an exception with a specified description.
            </summary>
            <param name="code">Error code</param>
            <param name="description">String description.</param>
            <param name="stack">String V+ program stack.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Holds all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of the serialized stream.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes data from this object, so that it can be restored later.
            </summary>
            <param name="info">Holds all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of the serialized stream.</param>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionException.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionException.ToString">
            <summary>
            Convert the exception to a readable string. 
            </summary>
            <returns>A string of the form "(-123) ErrorCode: ErrorMessage"</returns>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionException.StackTrace">
            <summary>
            Gets the stack trace associated with this exception. Drills down returning the inner exception's stack trace if one exists.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionException.ParseVPlusProgramStack(System.String)">
            <summary>
            Parse the V+ program stack string created by sv.task_stack().
            </summary>
            <param name="programStack"> String to be parsed.</param>
        </member>
        <member name="T:Ace.Communication.VPlusServer.TcpConnectionMessage">
            <summary>
            A class for storing and receiving messages to and from an
            Adept controller.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.TcpConnectionMessage"/> class.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.TcpConnectionMessage"/> class.
            </summary>
            <param name="vPlusProgramName">Name of the program.</param>
            <remarks>
            Creates a message that invokes the specified V+ program on the controller
            in message queue 1, and waits for a reply.
            </remarks>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionMessage.SendTime">
            <summary>
            Gets a time stamp of when the message was sent in milliseconds.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionMessage.ReplyTime">
            <summary>
            Gets a time stamp of when the message reply was received in milliseconds.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.Allocate(System.Int32)">
            <summary>
            Allocates the specified number of bytes.
            </summary>
            <param name="nBytes">The number of bytes.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.ToString">
            <summary>
            Returns a string version of this message, including V+ program name and whether
            it is actively waiting for a reply.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionMessage.MessageNumber">
            <summary>
            Gets the unique message number associated with this message.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionMessage.VPlusProgramName">
            <summary>
            Gets the V+ program name that will be invoked.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionMessage.Queue">
            <summary>
            Gets or sets the queue on the V+ controller in which
            the message should be executed. There are numerous
            queues, with queue 0 being the actual task performing
            communication, other queues for each robot, etc.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionMessage.ReplyExpected">
            <summary>
            Gets or sets a flag indicating whether a reply is expected.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionMessage.SuppressTimeout">
            <summary>
            Gets or sets a flag indicating whether the timeout should be
            suppressed during this message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.ReplyReceived(System.Byte[],System.Int32)">
            <summary>
            Called to notify that a reply was received
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.ReadString">
            <summary>
            Reads a string from the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.ReadSingle">
            <summary>
            Reads a float from the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.ReadDouble">
            <summary>
            Reads a double from the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.ReadSingleArray">
            <summary>
            Reads a float array from the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.ReadDoubleArray">
            <summary>
            Reads a double array from the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.ReadStringArray">
            <summary>
            Reads a string array from the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.ReadShort">
            <summary>
            Reads a 16-bit integer from the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.ReadShortArray">
            <summary>
            Reads a short array from the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.ReadBytes">
            <summary>
            Reads a byte array from the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.ReadByte">
            <summary>
            Reads a byte from the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.ReadBoolean">
            <summary>
            Reads a boolean from the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.ReadVpTransform">
            <summary>
            Reads a Z-Y-Z transform from the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.WriteVpTransform(Ace.Communication.VpTransform)">
            <summary>
            Writes a Z-Y-Z transform to the incoming message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.WriteByte(System.Byte[])">
            <summary>
            Writes a sequence of byte to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.WriteBoolean(System.Boolean)">
            <summary>
            Writes a boolean to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.WriteBoolean(System.Boolean[])">
            <summary>
            Writes a sequence of boolean to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.WriteShort(System.Int32)">
            <summary>
            Writes a 16-bit integer to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.WriteShort(System.Int32[])">
            <summary>
            Writes a sequence of 16-bit integer to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.WriteString(System.String)">
            <summary>
            Writes a string to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.WriteString(System.String[])">
            <summary>
            Writes a sequence of string to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.WriteBytes(System.Byte[])">
            <summary>
            Writes the given byte array to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.WriteSingle(System.Double)">
            <summary>
            Writes a float to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.WriteSingle(System.Double[])">
            <summary>
            Writes a sequence of float to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.WriteDouble(System.Double)">
            <summary>
            Writes a double to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.WriteDouble(System.Double[])">
            <summary>
            Writes a sequence of double to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.WriteShortArray(System.Int32[])">
            <summary>
            Writes a short array to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.WriteSingleArray(System.Single[])">
            <summary>
            Writes a single array to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.WriteDoubleArray(System.Double[])">
            <summary>
            Writes a double array to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.WriteStringArray(System.String[])">
            <summary>
            Writes a string array to the outgoing message.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.Write(System.IO.Stream)">
            <summary>
            Writes the message to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <exception cref="T:System.InvalidOperationException">The message is too long</exception>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessage.WaitForReply">
            <summary>
            Waits for the reply to the message
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionMessage.ErrorCode">
            <summary>
            Gets any error code returned from V+, or 0 if no error.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionMessage.ErrorIndex">
            <summary>
            Gets the variable portion of the error code from V+.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionMessage.ErrorString">
            <summary>
            Gets the string interpretation of the error code from V+.
            Only valid if the error code is non-zero.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionMessage.ErrorDescription">
            <summary>
            Gets an additional user-specified error string from V+.
            Only valid if the error code is non-zero.
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionMessage.ErrorStack">
            <summary>
            Gets an additional user-specified error string from V+.
            Only valid if the error code is non-zero.
            </summary>
        </member>
        <member name="T:Ace.Communication.VPlusServer.TcpConnectionManager">
            <summary>
            Manages the connection with a controller
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionManager.MessageHistory">
            <summary>
            Gets the message history buffer
            </summary>
            <value>
            The message history.
            </value>
        </member>
        <member name="F:Ace.Communication.VPlusServer.TcpConnectionManager.RemoteEventRequested">
            <summary>
            Event thrown when a remote V+ generate message is received
            </summary>
        </member>
        <member name="E:Ace.Communication.VPlusServer.TcpConnectionManager.CommunicationFailure">
            <summary>
            Occurs when a communication failure is detected.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionManager.#ctor(Ace.Communication.VPlusServer.TcpConnection,System.Net.Sockets.Socket)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.TcpConnectionManager"/> class.
            </summary>
            <param name="node">The node.</param>
            <param name="socket">The socket.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionManager.Initialize">
            <summary>
            Initializes the connection status.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionManager.Send(Ace.Communication.VPlusServer.ITcpConnectionMessage)">
            <summary>
            Sends the message.
            </summary>
            <param name="msg">The MSG.</param>
            <exception cref="T:Ace.Communication.VPlusServer.TcpConnectionException">
            Communication stopped
            or
            </exception>
            <exception cref="T:System.InvalidOperationException">Robot queue does not exist</exception>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="isDisposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionManager.CancelComm(System.Object)">
            <summary>
            Method called by the communications timer. It checks to see if the communications
            needs to be aborted. 
            </summary>
            <param name="state">Not used.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionManager.Read(System.Net.Sockets.NetworkStream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="buf">The buffer into which the data will be placed.</param>
            <param name="offset">The offset in the buffer array to start placing the data.</param>
            <param name="count">The number of data bytes to read from the stream.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionManager.DumpQueuedMessages">
            <summary>
            Prints all messages in the queue to the Console
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionManager.GetQueuedMessage(System.Int32)">
            <summary>
            Gets a specific message from thw queue
            </summary>
            <param name="messageNum">The message number.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionManager.ServiceThread">
            <summary>
            Background thread monitoring the messages from the comm handles
            </summary>
            <exception cref="T:System.IO.IOException">Bad message length " + length</exception>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionManager.ClearMessages">
            <summary>
            Clears the messages in the queue
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionManager.GetRealValue(System.String)">
            <summary>
            Read a real value from V+
            </summary>
            <param name="vPlusExpression">The v plus expression.</param>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionManager.GetId(System.Int32,System.Int32)">
            <summary>
            Issue an ID command
            </summary>
            <param name="component">The component.</param>
            <param name="device">The device.</param>
            <returns></returns>
        </member>
        <member name="T:Ace.Communication.VPlusServer.TcpConnectionMessageEventArgs">
            <summary>
            Event arguments detailing a message generated during the connection process
            </summary>
        </member>
        <member name="T:Ace.Communication.VPlusServer.TcpConnectionMessageEventArgs.MessageType">
            <summary>
            The types of messages
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.TcpConnectionMessageEventArgs.MessageType.LogMessage">
            <summary>
            The message is ment to be logged and not displayed to a user
            </summary>
        </member>
        <member name="F:Ace.Communication.VPlusServer.TcpConnectionMessageEventArgs.MessageType.StatusMessage">
            <summary>
            The message is a status update
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionMessageEventArgs.Type">
            <summary>
            Gets the type of the message.
            </summary>
            <value>
            The type of the message.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionMessageEventArgs.Message">
            <summary>
            Gets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionMessageEventArgs.PercentComplete">
            <summary>
            Gets the percentage complete for the overall connection status
            </summary>
            <value>
            The percent complete.
            </value>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessageEventArgs.#ctor(Ace.Communication.VPlusServer.TcpConnectionMessageEventArgs.MessageType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.TcpConnectionMessageEventArgs"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionMessageEventArgs.#ctor(Ace.Communication.VPlusServer.TcpConnectionMessageEventArgs.MessageType,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.TcpConnectionMessageEventArgs" /> class.
            </summary>
            <param name="type">The type.</param>
            <param name="message">The message.</param>
            <param name="percent">The percent.</param>
        </member>
        <member name="T:Ace.Communication.VPlusServer.TcpConnectionProperties">
            <summary>
            Properties associated with the connection of a V+ TCP Server
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionProperties.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected.
            </summary>
            <value>
            <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionProperties.IsConnecting">
            <summary>
            Gets a value indicating whether this instance is in the process of connecting.
            </summary>
            <value>
            <c>true</c> if this instance is connecting; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionProperties.IpAddress">
            <summary>
            Gets or sets the IP address used when connecting
            </summary>
            <value>
            The ip address.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionProperties.DefaultNetworkPort">
            <summary>
            Gets or sets the default network port.
            </summary>
            <value>
            The default network port.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionProperties.PortOffset">
            <summary>
            Gets or sets the port offset .
            </summary>
            <value>
            The default network port.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionProperties.HostAddress">
            <summary>
            The host address identified for the network adapter communicating with V+.
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionProperties.EmulationMode">
            <summary>
            Gets or sets a value indicating whether the connection is to an emulator.
            </summary>
            <value>
              <c>true</c> if the connection is to an emulator; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionProperties.CancelConnection">
            <summary>
            Gets or sets a value indicating whether the connection operation should be canceled.
            </summary>
            <value>
              <c>true</c> if the connection operation should be canceled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.TcpConnectionProperties"/> class.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionProperties.UpdateConnectionStatus(System.Boolean)">
            <summary>
            Resets the connection tracking values to indicate we are not connected
            </summary>
        </member>
        <member name="T:Ace.Communication.VPlusServer.TcpConnectionHelper">
            <summary>
            Helper class that contains logic for connecting to a server
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnectionHelper.ConnectionProperties">
            <summary>
            Gets the connection properties.
            </summary>
            <value>
            The connection properties.
            </value>
        </member>
        <member name="F:Ace.Communication.VPlusServer.TcpConnectionHelper.ConnectionMessage">
            <summary>
            Event detailing connection messages encountered in the connection process
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionHelper.#ctor(Ace.Communication.VPlusServer.TcpConnectionProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.TcpConnectionHelper" /> class.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionHelper.Open(System.Int32,Ace.Communication.Link.ActiveVLink)">
            <summary>
            Opens the specified maximum connection time.
            </summary>
            <param name="maxConnectionTime">The maximum amount of time to wait for a connection.</param>
            <param name="link">The link to use to establish communications.</param>
            <returns>A socket object that is connected to the controller V+ server</returns>
            <remarks>
            The ActiveVLink must already be connected to the controller
            </remarks>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionHelper.CheckPrerequisites(Ace.Communication.Link.ActiveVLink)">
            <summary>
            Checks the prerequisites to make sure we can connect to the controller
            </summary>
            <param name="link">The communications link.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionHelper.CheckCancelOperation">
            <summary>
            Checks to see if the operation has been canceled.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionHelper.GenerateError(System.String)">
            <summary>
            Generates an error and clear any handles associated with connection operation.
            </summary>
            <param name="message">The message to display.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionHelper.OnConnectionMessage(System.Int32,System.String)">
            <summary>
            Called when reporting a connection progress message.
            </summary>
            <param name="percent">The percent.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionHelper.OnConnectionLogMessage(System.String)">
            <summary>
            Called when reporting a connection error / log message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionHelper.PingForHardware">
            <summary>
            Issue a ping command and see if the controller hardware is available.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionHelper.SendCommand(Ace.Communication.Link.ActiveVLink,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sends a collection of commands command.
            </summary>
            <param name="link">The link.</param>
            <param name="commands">The commands.</param>
            <returns>The response associated with the last command</returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionHelper.SendCommand(Ace.Communication.Link.ActiveVLink,System.String)">
            <summary>
            Sends the command.
            </summary>
            <param name="link">The link.</param>
            <param name="command">The command.</param>
            <returns>The response associated with the last command</returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionHelper.CheckServerStatus(Ace.Communication.Link.ActiveVLink)">
            <summary>
            Make an initial server connection and get the status of the server program on the controller hardware
            </summary>
            <param name="link">The communication link.</param>
            <returns>
            The program status
            </returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionHelper.CheckServerFile(Ace.Communication.Link.ActiveVLink,Ace.Communication.ProgramStatus)">
            <summary>
            Checks the V+ server file on the controller.
            </summary>
            <param name="link">The communications link.</param>
            <param name="status">The status.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionHelper.CheckRemoteFile(Ace.Communication.Link.ActiveVLink,System.String,System.String)">
            <summary>
            Checks the remote file and see if it matches the local file.
            </summary>
            <param name="link">The communication link.</param>
            <param name="localFile">The local file.</param>
            <param name="remoteFile">The remote file.</param>
            <returns>
            Does the remote file match the local file
            </returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionHelper.CheckSeverVersionInMemory(Ace.Communication.Link.ActiveVLink,System.String)">
            <summary>
            Checks the version of the ace server V+ code in memory against what we expect.
            </summary>
            <param name="link">The link.</param>
            <param name="localFile">The local server V+ code file on the PC.</param>
            <returns>
            Returns true of the version is correct. Returns false if the version is incorrect.
            </returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionHelper.DownloadFile(Ace.Communication.Link.ActiveVLink,System.String,System.String)">
            <summary>
            Downloads the file to V+ OS.
            </summary>
            <param name="link">The communication link.</param>
            <param name="localFile">The local PC file.</param>
            <param name="remoteFile">The remote file to write to.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionHelper.CalculateHashFromFile(System.String)">
            <summary>
            Calculates the hash for a file.
            </summary>
            <param name="file">The file.</param>
            <returns>The calculated has value</returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionHelper.CalculateMd5Hash(System.String)">
            <summary>
            Calculates an MD5 Hash based on the specified input
            </summary>
            <param name="input">The input string.</param>
            <returns>The hash as a 32 character hexadecimal string.</returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionHelper.SendFileToVPlus(Ace.Communication.Link.ActiveVLink,System.String,System.String)">
            <summary>
            Sends the file to V plus.
            </summary>
            <param name="link">The communication link.</param>
            <param name="localPath">The local path of the file on the PC.</param>
            <param name="remotePath">The remote path of the file to copy to on the controller.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionHelper.InitializeVPlusServerTasks(Ace.Communication.Link.ActiveVLink)">
            <summary>
            Initializes the V+ server tasks.
            </summary>
            <param name="link">The communication link.</param>
            <returns>
            The task number for the V+ server
            </returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionHelper.WaitTaskCompletion(Ace.Communication.Link.ActiveVLink,System.Int32)">
            <summary>
            Waits for a task to complete and checks for a canceled connection attempt.
            </summary>
            <param name="link">The communication link.</param>
            <param name="taskNumber">The task number.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionHelper.WaitTaskCompletion(Ace.Communication.Link.ActiveVLink,System.Int32,System.Int32)">
            <summary>
            Waits for a task to complete and checks for a canceled connection attempt.
            </summary>
            <param name="link">The communication link.</param>
            <param name="taskNumber">The task number.</param>
            <param name="timeout">The maximum amount of time allowed for the operation, in milliseconds.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionHelper.StartVPlusServerTasks(Ace.Communication.Link.ActiveVLink,System.Int32)">
            <summary>
            Starts the V+ server tasks.
            </summary>
            <param name="link">The communication link.</param>
            <param name="taskNumber">The task number for the AceServer.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnectionHelper.CreateSocketConnection(Ace.Communication.Link.ActiveVLink)">
            <summary>
            Creates the socket connection upon connection to a hardware controller.
            </summary>
            <param name="link">The communication link.</param>
        </member>
        <member name="T:Ace.Communication.VPlusServer.TcpConnection">
            <summary>
            Class managing communications with a V+ TCP Server
            </summary>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnection.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            <c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnection.Link">
            <summary>
            Gets the link associated with the connection
            </summary>
            <value>
            The link.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnection.EmulationMode">
            <summary>
            Gets a value indicating whether the instance is running in emulation mode.
            </summary>
            <value>
              <c>true</c> if the instance is running in emulation mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnection.HostAddress">
            <summary>
            The host address identified for the network adapter communicating with V+.
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="P:Ace.Communication.VPlusServer.TcpConnection.ConnectionProperties">
            <summary>
            Gets the connection properties.
            </summary>
            <value>
            The connection properties.
            </value>
        </member>
        <member name="E:Ace.Communication.VPlusServer.TcpConnection.ConnectionMessage">
            <summary>
            Event detailing connection messages encountered in the connection process
            </summary>
        </member>
        <member name="E:Ace.Communication.VPlusServer.TcpConnection.RemoteEventRequested">
            <summary>
            Event detailing when a remote V+ generate message is received
            </summary>
        </member>
        <member name="E:Ace.Communication.VPlusServer.TcpConnection.ConnectionStateChanged">
            <summary>
            Event detailing when the connection state changes
            </summary>
        </member>
        <member name="E:Ace.Communication.VPlusServer.TcpConnection.ConnectionFailure">
            <summary>
            Event detailing when a connection failure occurs
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VPlusServer.TcpConnection" /> class.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnection.Open(System.Int32)">
            <summary>
            Opens the specified maximum connection time.
            </summary>
            <param name="maxConnectionTime">The maximum amount of time to wait for a connection.</param>
            <remarks>
            The ActiveVLink must already be connected to the controller
            </remarks>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnection.Send(Ace.Communication.VPlusServer.ITcpConnectionMessage)">
            <summary>
            Sends the specified message to V+.
            </summary>
            <param name="message">The message.</param>
            <returns>A handle to the received response message</returns>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnection.Close">
            <summary>
            Closes the connection
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnection.KillVPlusTasks">
            <summary>
            Kills the V+ server tasks.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnection.OnConnectionStateChanged">
            <summary>
            Called when a connection state changes.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnection.OnConnectionFailure(System.Object,System.EventArgs)">
            <summary>
            Called when a connection failure is detected.
            </summary>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnection.OnRemoteEvent(Ace.Communication.VPlusServer.RemoteOperationEventCode,System.Byte[],System.Int32)">
            <summary>
            Called when remote events are received
            </summary>
            <param name="code">The code.</param>
            <param name="message">The message.</param>
            <param name="errCode">The error code.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnection.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Ace.Communication.VPlusServer.TcpConnection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Ace.Communication.VpPrecisionPoint">
            <summary>
            Class to store joint values for a precision point.
            </summary>
        </member>
        <member name="F:Ace.Communication.VpPrecisionPoint.DEFAULT_SEPARATOR">
            <summary>
            Separator between each field for ToString
            </summary>
        </member>
        <member name="F:Ace.Communication.VpPrecisionPoint.NUMBER_FORMAT">
            <summary>
            Number formatter for display
            </summary>
        </member>
        <member name="F:Ace.Communication.VpPrecisionPoint.mAngles">
            <summary>
            The joint angles
            </summary>
        </member>
        <member name="M:Ace.Communication.VpPrecisionPoint.#ctor">
            <summary>
            Default constructor. Initialize to 6 values of 0.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpPrecisionPoint.#ctor(System.Int32)">
            <summary>
            Constructor that creates for a given number of joints
            with default values.
            </summary>
            <param name="pSize">Number of joints to allocate. Any value
            lower than 1 will be set to 1.</param>
        </member>
        <member name="M:Ace.Communication.VpPrecisionPoint.#ctor(Ace.Communication.VpPrecisionPoint)">
            <summary>
            Copy constructor.
            </summary>
            <param name="pSrc">Source point to copy from.</param>
        </member>
        <member name="M:Ace.Communication.VpPrecisionPoint.#ctor(System.Double[])">
            <summary>
            Construct a new object from an array of joint values.
            </summary>
            <param name="pSrc">Array of joint values.</param>
        </member>
        <member name="M:Ace.Communication.VpPrecisionPoint.#ctor(System.String)">
            <summary>
            Constructor that initialize the members from a string in the
            Adept format of precision point display.
            </summary>
            <param name="pSource">The source string in Adept format.</param>
        </member>
        <member name="M:Ace.Communication.VpPrecisionPoint.#ctor(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Constructor that initialize the members from a string in the
            Adept format of precision point display.
            </summary>
            <param name="pSource">The source string in Adept format.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:Ace.Communication.VpPrecisionPoint.ToArray">
            <summary>
            Returns the joint values in array format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VpPrecisionPoint.ToDoubleArray">
            <summary>
            Returns the joint values in array format.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ace.Communication.VpPrecisionPoint.Length">
            <summary>
            Access to the number of joints.
            </summary>
        </member>
        <member name="P:Ace.Communication.VpPrecisionPoint.J1">
            <summary>
            Access to first joint value. May throw an exception if
            less than 1 joint.
            </summary>
        </member>
        <member name="P:Ace.Communication.VpPrecisionPoint.J2">
            <summary>
            Access to first joint value. May throw an exception if
            less than 2 joints.
            </summary>
        </member>
        <member name="P:Ace.Communication.VpPrecisionPoint.J3">
            <summary>
            Access to first joint value. May throw an exception if
            less than 3 joints.
            </summary>
        </member>
        <member name="P:Ace.Communication.VpPrecisionPoint.J4">
            <summary>
            Access to first joint value. May throw an exception if
            less than 4 joints.
            </summary>
        </member>
        <member name="P:Ace.Communication.VpPrecisionPoint.J5">
            <summary>
            Access to first joint value. May throw an exception if
            less than 5 joints.
            </summary>
        </member>
        <member name="P:Ace.Communication.VpPrecisionPoint.J6">
            <summary>
            Access to first joint value. May throw an exception if
            less than 2 joints.
            </summary>
        </member>
        <member name="P:Ace.Communication.VpPrecisionPoint.Item(System.Int32)">
            <summary>
            Indexer for the joints.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpPrecisionPoint.CopyFrom(Ace.Communication.VpPrecisionPoint)">
            <summary>
            Assigning an object to another in C# just copies the pointer
            not the content of one object to another, so we need this
            function.
            </summary>
            <param name="pSrc">Source object to copy from</param>
        </member>
        <member name="M:Ace.Communication.VpPrecisionPoint.CopyFrom(System.Double[])">
            <summary>
            Fill the parameters from an array.
            </summary>
            <param name="pSrc">source array. Joint values array will be
            resized to same size.</param>
        </member>
        <member name="M:Ace.Communication.VpPrecisionPoint.GetJoint(System.Int32)">
            <summary>
            Access to a joint value by index. Exception thrown if
            invalid index is passed.
            </summary>
            <param name="pIndex">Index of joint value to return.</param>
            <returns>Requested value.</returns>
        </member>
        <member name="M:Ace.Communication.VpPrecisionPoint.SetJoint(System.Int32,System.Single)">
            <summary>
            Access to a joint value by index. Exception thrown if
            invalid index is passed.
            </summary>
            <param name="pIndex">Index of joint value to change.</param>
            <param name="pValue">New value.</param>
        </member>
        <member name="M:Ace.Communication.VpPrecisionPoint.ToString">
            <summary>
            Returns a string version of the point.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:Ace.Communication.VpPrecisionPoint.ToString(System.String)">
            <summary>
            Returns a string version of the point.
            </summary>
            <param name="separator">The separator between elements.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Ace.Communication.VpPrecisionPoint.ToString(System.Globalization.NumberFormatInfo)">
            <summary>
            Returns a string version of the point.
            </summary>
            <param name="format">The format.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Ace.Communication.VpPrecisionPoint.ToString(System.Globalization.NumberFormatInfo,System.String)">
            <summary>
            Returns a string version of the point.
            </summary>
            <param name="format">The format.</param>
            <param name="separator">The separator between elements.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Ace.Communication.VpPrecisionPoint.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Holds all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of the serialized stream.</param>
        </member>
        <member name="M:Ace.Communication.VpPrecisionPoint.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes data from this object, so that it can be restored later.
            </summary>
            <param name="info">Holds all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of the serialized stream.</param>		
        </member>
        <member name="M:Ace.Communication.VpPrecisionPoint.op_Equality(Ace.Communication.VpPrecisionPoint,Ace.Communication.VpPrecisionPoint)">
            <summary>
            Returns true the components of two precision points are identical.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpPrecisionPoint.op_Inequality(Ace.Communication.VpPrecisionPoint,Ace.Communication.VpPrecisionPoint)">
            <summary>
            Returns true the components of two precision points transforms are NOT identical.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpPrecisionPoint.Equals(System.Object)">
            <summary>
            Return true if the other object is the same as this object.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpPrecisionPoint.GetHashCode">
            <summary>
            Return a hash code for this precision point.
            </summary>
        </member>
        <member name="T:Ace.Communication.VpTransform">
            <summary>
            A "homogeneous transformation", which describes the offset and orientation of one XYZ coordinate
            system from another as a single entity. 
            </summary>
            <remarks>An affine, non-scaling transform may be written as
            <code>
                [ xAxis.X  yAxis.X  zAxis.X  offset.X ]
                [ xAxis.Y  yAxis.Y  zAxis.Y  offset.Y ]
                [ xAxis.Z  yAxis.Z  zAxis.Z  offset.Z ]
                [    0        0        0         1    ]
            </code>
            where xAxis, yAxis, and zAxis are unit vectors specifying the new XYZ axes in the coordinate
            system of the old XYZ axes, and offset specifies the offset of the new origin from the old
            origin, along the old axes.
            A V+ Transform is immutable--once defined, it cannot be changed. This makes it behave
            much as a value type.
            </remarks>
        </member>
        <member name="T:Ace.Communication.VpTransform.Euler">
            <summary>
            Defines the order of Euler angles that are supported 
            by the VpTransform class.
            </summary>
        </member>
        <member name="F:Ace.Communication.VpTransform.Euler.Xyz">
            <summary>
            X-Y-Z Euler angles, in which the order of rotations is a rotation about X, followed
            by a rotation about the "new" Y axis after the initial rotation, followed by a 
            rotation about the "new" Z axis.
            </summary>
        </member>
        <member name="F:Ace.Communication.VpTransform.Euler.Zyz">
            <summary>
            Z-Y-Z Euler angles, in which the order of rotations is a rotation about Z, followed
            by a rotation about the "new" Y axis after the initial rotation, followed by a 
            rotation about the "new" Z axis.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.GetLabels(Ace.Communication.VpTransform.Euler)">
            <summary>
            Returns a collection of labels associated with the array values returned by ToArray(Euler).
            </summary>
        </member>
        <member name="P:Ace.Communication.VpTransform.DefaultEulerAngles">
            <summary>
            Default Euler angles selection used when displaying and converting transforms.
            The default is "Z-Y-Z".
            </summary>
        </member>
        <member name="P:Ace.Communication.VpTransform.Identity">
            <summary>
            An identity transform.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.op_Equality(Ace.Communication.VpTransform,Ace.Communication.VpTransform)">
            <summary>
            Returns true the components of two transforms are identical.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.op_Inequality(Ace.Communication.VpTransform,Ace.Communication.VpTransform)">
            <summary>
            Returns true the components of two transforms are NOT identical.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.RX(System.Double)">
            <summary>
            Returns a new transform, rotated by specified degrees about the X axis from this transform.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.RY(System.Double)">
            <summary>
            Returns a new transform, rotated by specified degrees about the Y axis from this transform.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.RZ(System.Double)">
            <summary>
            Returns a transform representing a rotation about the Z axis.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.ToRadians(System.Double)">
            <summary>
            Convert degrees to radians.
            </summary>
            <param name="degrees">Number of degrees to convert.</param>
            <returns>Equivalent number of radians.</returns>
        </member>
        <member name="M:Ace.Communication.VpTransform.ToDegrees(System.Double)">
            <summary>
            Convert radians to degrees.
            </summary>
            <param name="radians">Number of radians to convert.</param>
            <returns>Equivalent number of degrees.</returns>
        </member>
        <member name="M:Ace.Communication.VpTransform.op_Multiply(Ace.Communication.VpTransform,Ace.Communication.VpVector)">
            <summary>
            Transforms the vector b by rotating it through transform A. Does NOT translate.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.TransformPoint(Ace.Communication.VpTransform,Ace.Communication.VpVector)">
            <summary>
            Transforms the coordinates of b into the base coordinate frame of a.
            Same as (a*b)+a.offset.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.op_Multiply(Ace.Communication.VpTransform,Ace.Communication.VpTransform)">
            <summary>
            Returns a new transform representing the product of two transforms.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.op_UnaryNegation(Ace.Communication.VpTransform)">
            <summary>
            Returns a inverse of a transform.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.Parse(System.String)">
            <summary>
            Convert a string into a transform.
            </summary>
            <param name="transform">Input string. Must have at least six double values, delimited by space.</param>
            <returns>A vector with values taken from elements of the string.</returns>
        </member>
        <member name="M:Ace.Communication.VpTransform.Parse(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Convert a string into a transform.
            </summary>
            <param name="transform">Input string. Must have at least six double values, delimited by space.</param>
            <param name="format">The format.</param>
            <returns>
            A vector with values taken from elements of the string.
            </returns>
        </member>
        <member name="M:Ace.Communication.VpTransform.Parse(Ace.Communication.VpTransform.Euler,System.String)">
            <summary>
            Convert a string into a transform.
            </summary>
            <param name="type">The type.</param>
            <param name="transform">Input string. Must have at least six double values, delimited by space.</param>
            <returns>
            A vector with values taken from elements of the string.
            </returns>
        </member>
        <member name="M:Ace.Communication.VpTransform.Parse(Ace.Communication.VpTransform.Euler,System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Convert a string into a transform.
            </summary>
            <param name="type">The type.</param>
            <param name="transform">Input string. Must have at least six double values, delimited by space.</param>
            <param name="format">The format.</param>
            <returns>
            A vector with values taken from elements of the string.
            </returns>
        </member>
        <member name="M:Ace.Communication.VpTransform.TryParse(System.String,Ace.Communication.VpTransform)">
            <summary>
            Convert a string into a transform.
            </summary>
            <param name="transform">Input string. Must have at least six double values, delimited by space.</param>
            <param name="defaultTransform">The default transform.</param>
            <returns>
            A vector with values taken from elements of the string.
            </returns>
        </member>
        <member name="M:Ace.Communication.VpTransform.ParseSafe(System.String)">
            <summary>
            Convert a string into a transform, checking for any "***" and convert it to NaN.
            </summary>
            <param name="transform">Input string. Must have at least six double values, delimited by space or comma.</param>
            <returns>A vector with values taken from elements of the string.</returns>
        </member>
        <member name="M:Ace.Communication.VpTransform.ParseSafe(Ace.Communication.VpTransform.Euler,System.String)">
            <summary>
            Convert a string into a transform, checking for any "***" and convert it to NaN.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.#ctor(Ace.Communication.VpVector)">
            <summary>
            Create a transform with the specified origin.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Sets the components of the transform with no identity orientation.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a transform using the default rotation selection.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.#ctor(Ace.Communication.VpTransform.Euler,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the components of the transform using the specified Euler angle definition.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.#ctor(Ace.Communication.VpTransform.Euler,System.Double[])">
            <summary>
            Sets the components of the transform using the specified Euler angle definition.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.#ctor(Ace.Communication.VpTransform,Ace.Communication.VpVector)">
            <summary>
            Create a transform from a frame composed of the origin, a point on the X axis, 
            and the Z-axis of the origin transformation.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.#ctor(Ace.Communication.VpVector,Ace.Communication.VpVector,Ace.Communication.VpVector)">
            <summary>
            Create a transform from a frame composed of the origin, a point on the X axis, 
            and a point in the positive-Y side of the XY plane.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.#ctor(Ace.Communication.VpVector,Ace.Communication.VpVector)">
            <summary>
            Set this transform using the specified origin and axis-angle representation.
            </summary>
            <param name="origin">The X-Y-Z position of the origin.</param>
            <param name="axis">The axis about which to rotate, with the magnitude of the vector
            giving the number of radians to rotate.</param>
        </member>
        <member name="M:Ace.Communication.VpTransform.#ctor(Ace.Communication.VpVector,Ace.Communication.VpVector,Ace.Communication.VpVector,Ace.Communication.VpVector)">
            <summary>
            Initializes a new instance of the <see cref="T:Ace.Communication.VpTransform"/> class.
            </summary>
            <param name="origin">The offset of the transformation.</param>
            <param name="xAxis">The vector defining the orientation of the X axis.</param>
            <param name="yAxis">The vector defining the orientation of the Y axis.</param>
            <param name="zAxis">The vector defining the orientation of the Z axis.</param>
        </member>
        <member name="M:Ace.Communication.VpTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Holds all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of the serialized stream.</param>
        </member>
        <member name="M:Ace.Communication.VpTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes data from this object, so that it can be restored later.
            </summary>
            <param name="info">Holds all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of the serialized stream.</param>		        
        </member>
        <member name="M:Ace.Communication.VpTransform.Equals(System.Object)">
            <summary>
            Return true if the other object is the same as this object.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.GetHashCode">
            <summary>
            Return a hash code for this transform.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.DistanceFrom(Ace.Communication.VpTransform)">
            <summary>
            Return the distance from this transform to the specified one.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.AlignZ">
            <summary>
            Returns a transformation with the Z axis aligned with the closest world axis,
            and minimal rotation.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.AlignZ(Ace.Communication.VpVector)">
            <summary>
            Returns a transformation with the Z axis aligned with the specified axis,
            with minimal rotation around Z. The X-axis change is minimized.
            </summary>
        </member>
        <member name="P:Ace.Communication.VpTransform.RotationAxisAngle">
            <summary>
            Gets the axis and magnitude of the rotation matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ace.Communication.VpTransform.ToArray(Ace.Communication.VpTransform.Euler)">
            <summary>
            Return a six-element array containing the X-Y-Z offsets and the specified
            angular representation of this transform.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.ToMatrix">
            <summary>
            Converts the transformation to a matrix form.
            </summary>
            <returns></returns>		
        </member>
        <member name="M:Ace.Communication.VpTransform.ToArray">
            <summary>
            Convert to an array of doubles using the default set of Euler angles.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.Scale(System.Double)">
            <summary>
            Returns a uniformly scaled version of this transform.
            </summary>
            <param name="scaleFactor">Scale factor by which to multiply this transform's offset.</param>
            <returns>Scaled transform.</returns>
        </member>
        <member name="M:Ace.Communication.VpTransform.Shift(System.Double,System.Double,System.Double)">
            <summary>
            Returns a transform equal to this transform shifted by the specified 
            x, y, and z distances in world coordinates (see V+ SHIFT function).
            "trans.Shift(dx, dy, dz)" is equivalent to "new Transform(dx, dy, dz) * trans".
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.Interpolate(Ace.Communication.VpTransform,System.Double)">
            <summary>
            Returns a transform equal to the specified fraction of the distance from this
            to the next transform.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Returns a scaled version of this transform, with different scale factors along each axis.
            </summary>
            <returns>Scaled transform.</returns>
        </member>
        <member name="P:Ace.Communication.VpTransform.Offset">
            <summary>
            Gets the XYZ offset associated with the transform.
            </summary>
            <value></value>
        </member>
        <member name="P:Ace.Communication.VpTransform.DX">
            <summary>
            Gets the X component of this transform.
            </summary>
        </member>
        <member name="P:Ace.Communication.VpTransform.DY">
            <summary>
            Gets the Y component of this transform.
            </summary>
        </member>
        <member name="P:Ace.Communication.VpTransform.DZ">
            <summary>
            Gets the Z component of this transform.
            </summary>
        </member>
        <member name="P:Ace.Communication.VpTransform.Yaw">
            <summary>
            Gets the Yaw component of this transformation.
            </summary>
            <value>The yaw.</value>
        </member>
        <member name="P:Ace.Communication.VpTransform.Pitch">
            <summary>
            Gets the Pitch component of this transformation.
            </summary>
            <value>The pitch.</value>
        </member>
        <member name="P:Ace.Communication.VpTransform.Roll">
            <summary>
            Gets the Roll component of this transformation.
            </summary>
            <value>The roll.</value>
        </member>
        <member name="P:Ace.Communication.VpTransform.XAxis">
            <summary>
            Gets the X-axis of this transform.
            </summary>
        </member>
        <member name="P:Ace.Communication.VpTransform.YAxis">
            <summary>
            Gets the Y-axis of this transform.
            </summary>
        </member>
        <member name="P:Ace.Communication.VpTransform.ZAxis">
            <summary>
            Gets the Z-axis of this transform.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.ToString(Ace.Communication.VpTransform.Euler)">
            <summary>
            Return a space-delimited string representation of this transform
            using the specified angular representation.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpTransform.ToString">
            <summary>
            Return a space-delimited string representation of this transform
            using the default angular representation.
            </summary>
        </member>
        <member name="T:Ace.Communication.VpVector">
            <summary>
            A 3D vector class. 
            A VpVector is defined as a struct to make it behave as a numeric (value) type.
            It is immutable--once defined, it cannot be changed. This makes it behave
            much like a value type.
            </summary>
        </member>
        <member name="P:Ace.Communication.VpVector.Identity">
            <summary>
            An identity vector (zero position).
            </summary>
        </member>
        <member name="M:Ace.Communication.VpVector.op_Equality(Ace.Communication.VpVector,Ace.Communication.VpVector)">
            <summary>
            Determines equality of two vectors. Each component must be equal.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpVector.op_Inequality(Ace.Communication.VpVector,Ace.Communication.VpVector)">
            <summary>
            Determines inequality of two vectors.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpVector.op_Multiply(Ace.Communication.VpVector,System.Double)">
            <summary>
            Multiplies each element of a vector by a scalar;
            </summary>
        </member>
        <member name="M:Ace.Communication.VpVector.op_Multiply(System.Double,Ace.Communication.VpVector)">
            <summary>
            Multiplies each element of a vector by a scalar;
            </summary>
        </member>
        <member name="M:Ace.Communication.VpVector.op_Addition(Ace.Communication.VpVector,Ace.Communication.VpVector)">
            <summary>
            Adds two vectors.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpVector.op_Subtraction(Ace.Communication.VpVector,Ace.Communication.VpVector)">
            <summary>
            Subtracts two vectors.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpVector.op_UnaryNegation(Ace.Communication.VpVector)">
            <summary>
            Negates a vector.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpVector.Parse(System.String)">
            <summary>
            Creates a vector from a space-delimited list of numbers.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpVector.Parse(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Creates a vector from a space-delimited list of numbers.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpVector.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a vector from the specified X, Y, and Z offsets.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpVector.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Holds all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of the serialized stream.</param>
        </member>
        <member name="M:Ace.Communication.VpVector.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes data from this object, so that it can be restored later.
            </summary>
            <param name="info">Holds all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of the serialized stream.</param>		
        </member>
        <member name="M:Ace.Communication.VpVector.Scale(System.Double)">
            <summary>
            Multiplies the elements of the vector by the specified value.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpVector.Normalize">
            <summary>
            Scales the vector to give it a length of 1.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpVector.Cross(Ace.Communication.VpVector)">
            <summary>
            Return the cross product 'this x r', a vector in the plane perpendicular to this and r,
            with magnitude equal to the products of the magnitudes and the sine of the angle between
            the vectors.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpVector.AngleBetween(Ace.Communication.VpVector)">
            <summary>
            Return the angle from this vector to the vector a, in degrees.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpVector.Dot(Ace.Communication.VpVector)">
            <summary>
            Returns the dot product of this vector and r, returning a scalar with value equal to the sum of the
            products of the components of the two vectors.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpVector.GetHashCode">
            <summary>
            Returns a hash code for this vector.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpVector.Equals(System.Object)">
            <summary>
            Return true if this is equal to the specified object.
            </summary>
        </member>
        <member name="P:Ace.Communication.VpVector.Length">
            <summary>
            Gets the length of this vector.
            </summary>
        </member>
        <member name="P:Ace.Communication.VpVector.LengthSquared">
            <summary>
            Gets the square of the length of this vector.
            </summary>
        </member>
        <member name="P:Ace.Communication.VpVector.DX">
            <summary>
            Gets the X component of this vector.
            </summary>
        </member>
        <member name="P:Ace.Communication.VpVector.DY">
            <summary>
            Gets the Y component of this vector.
            </summary>
        </member>
        <member name="P:Ace.Communication.VpVector.DZ">
            <summary>
            Gets the Z component of this vector.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpVector.ToArray">
            <summary>
            Returns a double array version of this vector, in the form [DX, DY, DZ].
            </summary>
        </member>
        <member name="M:Ace.Communication.VpVector.ToString">
            <summary>
            Returns a string representation of this vector, a space-delimited array of each element.
            </summary>
        </member>
        <member name="M:Ace.Communication.VpVector.ToString(System.Globalization.NumberFormatInfo)">
            <summary>
            Returns a string representation of this vector, a space-delimited array of each element.
            </summary>
        </member>
        <member name="T:ActiveV.ActiveVException">
            <summary>
            ActiveVException is the exception thrown from ActiveV library.  
            It usually has an error code and a description of the exception
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="P:ActiveV.ActiveVException.ErrorNumber">
            <summary>
            Gets the error number.
            </summary>
            <value>
            The error number.
            </value>
        </member>
        <member name="M:ActiveV.ActiveVException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.ActiveVException"/> class.
            </summary>
            <param name="errorNumber">The error number.</param>
        </member>
        <member name="M:ActiveV.ActiveVException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.ActiveVException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ActiveV.ActiveVException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.ActiveVException"/> class.
            </summary>
            <param name="errorNumber">The error number.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:ActiveV.ActiveVException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.ActiveVException"/> class.
            </summary>
            <param name="errorNumber">The error number.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ActiveV.ActiveVException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.ActiveVException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:ActiveV.ActiveVException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.ActiveVException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:ActiveV.BaseLink">
            <summary>
            Base class for UdpLink and TcpLink classes
            </summary>
        </member>
        <member name="F:ActiveV.BaseLink.ASYNC_PORT">
            <summary>
            The asynchronous port - Receive Async messages
            </summary>
        </member>
        <member name="F:ActiveV.BaseLink.BACK_TO_PC_PORT">
            <summary>
            The back to pc port - Receives Handshake from controller
            </summary>
        </member>
        <member name="F:ActiveV.BaseLink.BACK_TO_VP_PORT">
            <summary>
            The back to controller port. Send received message ACK to contoller 
            </summary>
        </member>
        <member name="F:ActiveV.BaseLink.PROG_INPUT_PORT">
            <summary>
            The prog input port
            </summary>
        </member>
        <member name="F:ActiveV.BaseLink.VP_MONITOR_PORT">
            <summary>
            The vp monitor port. All messages are sent and received from this port.
            </summary>
        </member>
        <member name="M:ActiveV.BaseLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.BaseLink"/> class.
            </summary>
        </member>
        <member name="P:ActiveV.BaseLink.Communication">
            <summary>
            Gets the communication object that uses link.
            </summary>
            <value>
            The communication.
            </value>
        </member>
        <member name="P:ActiveV.BaseLink.ControllerType">
            <summary>
            Gets the type of the controller.
            </summary>
            <value>
            The type of the controller.
            </value>
        </member>
        <member name="P:ActiveV.BaseLink.DelayClosed">
            <summary>
            Gets or sets a value indicating whether [delay closed].
            </summary>
            <value>
              <c>true</c> if [delay closed]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiveV.BaseLink.TimeOut">
            <summary>
            Gets the time out.  Time out in seconds for getting Handshake to a message sent to controller.
            </summary>
            <value>
            The time out.
            </value>
        </member>
        <member name="P:ActiveV.BaseLink.VpIpAddress">
            <summary>
            IpAddress of the controller.
            </summary>
            <value>
            The vp ip address.
            </value>
        </member>
        <member name="P:ActiveV.BaseLink.VpMonitorPortPlusOffset">
            <summary>
            Gets or sets the vp monitor port plus offset.
            </summary>
            <value>
            The vp monitor port plus offset.
            </value>
        </member>
        <member name="M:ActiveV.BaseLink.checkMessageforErrorNumber(System.String)">
            <summary>
            Checks the message for error number and returns 0 for no error.  The error has {errorNumber} pattern
            </summary>
            <param name="message"> The message from controller or any string to check for error.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveV.BaseLink.GetStringE(System.String@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Read one message from response buffer.  Same as GetString but reports Status
            </summary>
            <param name="ReceivedString">The received string.</param>
            <param name="Count">The count of characters in string read from response buffer.</param>
            <param name="Continue">The continue indicates if there are more responses associated with the command sent.</param>
            <param name="Status">The status indicate if response was an error .</param>
        </member>
        <member name="M:ActiveV.BaseLink.GetStringEL(System.Int32,System.String@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Retrieves number of lines from response equal to RequestedLines or all lines response have if less than RequestedLines.
            </summary>
            <param name="RequestedLines">The lines.</param>
            <param name="ReceivedString">The received string.</param>
            <param name="Count">The requested number of lines.</param>
            <param name="Continue">The continue.</param>
            <param name="Status">The status = 1 for success or error number.</param>
            <exception cref="T:ActiveV.ActiveVException"></exception>
        </member>
        <member name="M:ActiveV.BaseLink.GetStringEx(System.Int32,System.Int32,System.String,System.String@,System.Int32@,System.Int32@)">
            <summary>
            Returns a program output message for the given task number;
            </summary>
            <param name="Board">The board.</param>
            <param name="Task">The task.</param>
            <param name="Terminator">The terminator.</param>
            <param name="ReceivedString">The received string.</param>
            <param name="Count">The count.</param>
            <param name="Continue">The continue.</param>
        </member>
        <member name="M:ActiveV.BaseLink.IsValidIpAddr(System.String,System.Net.IPAddress@)">
            <summary>
            Determines whether an IP Address is valid and return a IPAddress equivalent.
            </summary>
            <param name="inputAddress">The input address.</param>
            <param name="ipAddress">The ip address.</param>
            <returns>
              <c>true</c> if [is valid ip addr] [the specified input address]; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:ActiveV.BaseLink.PutAsyncMessageInProgramOutputBuffer(System.SByte,System.String)">
            <summary>
            Puts the asynchronous message in program output buffer.
            </summary>
            <param name="taskNumber">The task number.</param>
            <param name="asyncMessage">The asynchronous message.</param>
        </member>
        <member name="M:ActiveV.BaseLink.ReadNumberOfLinesFromResponseReceivedString(System.Int32,System.String@)">
            <summary>
            Reads the number of lines from response received string.
            </summary>
            <param name="RequestedLines">The requested lines count.</param>
            <param name="ReceivedString">The received string.</param>
            <returns></returns>
        </member>
        <member name="T:ActiveV.Communications">
            <summary>
            All ActiveV communication to/from controller is handled by object of this class
            </summary>
            <seealso cref="T:ActiveV.ICommunications" />
        </member>
        <member name="F:ActiveV.Communications._pLock">
            <summary>
            The mutex to access communication to a controller
            </summary>
            
        </member>
        <member name="F:ActiveV.Communications.MAX_LOG_LENGTH">
            <summary>
            The maximum log length
            </summary>
        </member>
        <member name="M:ActiveV.Communications.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.Communications"/> class.
            </summary>
        </member>
        <member name="E:ActiveV.Communications.OnAsynchError">
            <summary>
            Events that ActiveVLink listens to.
            </summary>
        </member>
        <member name="P:ActiveV.Communications.ControllerIPAddress">
            <summary>
            Gets the controller ip address.
            </summary>
            <value>
            The controller ip address.
            </value>
        </member>
        <member name="P:ActiveV.Communications.ControllerType">
            <summary>
            Gets the type of the controller.
            </summary>
            <value>
            The type of the controller.
            </value>
        </member>
        <member name="P:ActiveV.Communications.IsGetc">
            <summary>
            For TCP it is set to false if packet OpCode = OpCodes.OP_READ_ and Set to true if packet OpCode = OpCodes.OP_GETC_
            for UDP it's set to false if Async message error code is ERRORS.VE_ACEINP and to true if error code is ERRORS.VE_ACEING
            </summary>
            <value>
            </value>
        </member>
        <member name="P:ActiveV.Communications.IsOnline">
            <summary>
            Gets a value indicating whether there is a link to controller is online.
            </summary>
            <value>
              <c>true</c> if this instance is online; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiveV.Communications.TimeOut">
            <summary>
            Gets or sets the time out.
            </summary>
            <value>
            The time out.
            </value>
        </member>
        <member name="M:ActiveV.Communications.Close">
            <summary>
            Closes communication link.
            </summary>
        </member>
        <member name="M:ActiveV.Communications.DisableError">
            <summary>
            Disables the error reporting from controller.
            </summary>
        </member>
        <member name="M:ActiveV.Communications.EnableError(System.Int32@)">
            <summary>
            Enables the error reporting from controller.
            </summary>
            <param name="Previous">The previous.</param>
        </member>
        <member name="M:ActiveV.Communications.EraseBios(System.String)">
            <summary>
            Erases the bios.  Not Implemented
            </summary>
            <param name="In">The in.</param>
        </member>
        <member name="M:ActiveV.Communications.EraseDisk(System.String@)">
            <summary>
            Erases the disk. Not Implemented
            </summary>
            <param name="Out">The out.</param>
        </member>
        <member name="M:ActiveV.Communications.get_Stats(System.Int32)">
            <summary>
            Gets the stats. For serial com and not implemented
            </summary>
            <param name="select">The select.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveV.Communications.GetLog">
            <summary>
            Gets Sent and Received messages log.  
            </summary>
        </member>
        <member name="M:ActiveV.Communications.GetString(System.String@,System.Int32@,System.Int32@)">
            <summary>
            Read one response.  
            </summary>
            <param name="ReceivedString">The received string.</param>
            <param name="Count">The count.</param>
            <param name="Continue">The continue.</param>
            <exception cref="T:ActiveV.ActiveVException"></exception>
        </member>
        <member name="M:ActiveV.Communications.GetString(System.String@,System.Int32@)">
            <summary>
            It reads complete responses to a Monitor command.
            </summary>
            <param name="Response">The received string.</param>
            <param name="Status">The status.</param>
        </member>
        <member name="M:ActiveV.Communications.GetString(System.String@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Read one message from response buffer and reports Status
            This routine is the same as GetStringE
            </summary>
            <param name="ReceivedString">The received string.</param>
            <param name="Count">The count.</param>
            <param name="Continue">The continue = 1 if there is more.</param>
            <param name="Status">The status = 1 for success or error number.</param>
        </member>
        <member name="M:ActiveV.Communications.GetStringE(System.String@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Read one message from response buffer and reports Status
            </summary>
            <param name="ReceivedString">The received string.</param>
            <param name="Count">The count.</param>
            <param name="Continue">The continue.</param>
            <param name="Status">The status.</param>
            <exception cref="T:ActiveV.ActiveVException"></exception>
        </member>
        <member name="M:ActiveV.Communications.GetStringEL(System.Int32,System.String@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Retrieves number of lines from response equal to RequestedLines or all lines response have if less than RequestedLines.
            </summary>
            <param name="RequestedLines">The requested lines.</param>
            <param name="ReceivedString">The received string.</param>
            <param name="Count">The requested number of lines.</param>
            <param name="Continue">The continue.</param>
            <param name="Status">The status = 1 for success or error number.</param>
            <exception cref="T:ActiveV.ActiveVException"></exception>
            <exception cref="T:ActiveV.ActiveVException"></exception>
        </member>
        <member name="M:ActiveV.Communications.GetStringEx(System.Int32,System.Int32,System.String,System.String@,System.Int32@,System.Int32@)">
            <summary>
            Get the last program Output for a Task
            </summary>
            <param name="Board">The board.</param>
            <param name="Channel">The channel.</param>
            <param name="Expected">The expected.</param>
            <param name="Response">The response.</param>
            <param name="Count">The count.</param>
            <param name="Continue">The continue.</param>
            <exception cref="T:ActiveV.ActiveVException"></exception>
        </member>
        <member name="M:ActiveV.Communications.LockController">
            <summary>
            Locks the controller.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ActiveV.Communications.NotifyOnAsynchError(System.Int32,System.Int32,System.Int32)">
            <summary>
            Notifies the on asynch error.
            </summary>
            <param name="BoardNumber">The board number.</param>
            <param name="TaskNumber">The task number.</param>
            <param name="ErrorCode">The error code.</param>
        </member>
        <member name="M:ActiveV.Communications.NotifyOnProgramOutput(System.Int32,System.Int32)">
            <summary>
            Notifies the on program output.
            </summary>
            <param name="BoardNumber">The board number.</param>
            <param name="TaskNumber">The task number.</param>
        </member>
        <member name="M:ActiveV.Communications.NotifyOnProgramStatusChange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Notifies the on program status change.
            </summary>
            <param name="BoardNumber">The board number.</param>
            <param name="TaskNumber">The task number.</param>
            <param name="ErrorCode">The error code.</param>
        </member>
        <member name="M:ActiveV.Communications.NotifyOnReadPosted(System.Int32,System.Int32)">
            <summary>
            Notifies the on read posted.
            </summary>
            <param name="BoardNumber">The board number.</param>
            <param name="TaskNumber">The task number.</param>
        </member>
        <member name="M:ActiveV.Communications.NotifyOnVGetLocation(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Notifies the on v get location.
            </summary>
            <param name="Sequence">The sequence.</param>
            <param name="Tool">The tool.</param>
            <param name="Instance">The instance.</param>
            <param name="Result">The result.</param>
            <param name="Index">The index.</param>
            <param name="Frame">The frame.</param>
        </member>
        <member name="M:ActiveV.Communications.NotifyOnVGetParam(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Notifies the on v get parameter.
            </summary>
            <param name="Sequence">The sequence.</param>
            <param name="Tool">The tool.</param>
            <param name="Param">The parameter.</param>
            <param name="ParamIndex">Index of the parameter.</param>
            <param name="ObjectIndex">Index of the object.</param>
        </member>
        <member name="M:ActiveV.Communications.NotifyOnVGetResult(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Notifies the on v get result.
            </summary>
            <param name="Sequence">The sequence.</param>
            <param name="Tool">The tool.</param>
            <param name="Instance">The instance.</param>
            <param name="Result">The result.</param>
            <param name="ResultIndex">Index of the result.</param>
            <param name="FrameIndex">Index of the frame.</param>
        </member>
        <member name="M:ActiveV.Communications.NotifyOnVRun(System.Int32)">
            <summary>
            Notifies the on v run.
            </summary>
            <param name="SequenceId">The sequence identifier.</param>
        </member>
        <member name="M:ActiveV.Communications.NotifyOnVSetParam(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Notifies the on v set parameter.
            </summary>
            <param name="Sequence">The sequence.</param>
            <param name="Tool">The tool.</param>
            <param name="Param">The parameter.</param>
            <param name="ParamIndex">Index of the parameter.</param>
            <param name="ObjectIndex">Index of the object.</param>
            <param name="Value">The value.</param>
        </member>
        <member name="M:ActiveV.Communications.Open(System.String,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            This method opens a communications channel to a V+ system.
            	mode2 parameter is not used
            </summary>
            <param name="protocolTypeName"></param>
            <param name="numberOfDevices"></param>
            <param name="ipAddress"></param>
            <param name="portOffset"></param>
            <param name="mode2"></param>
        </member>
        <member name="M:ActiveV.Communications.Open(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Opens a communications channel to a V+ system.
            </summary>
            <param name="protocolTypeName">Name of the protocol type.</param>
            <param name="numberOfDevices">The number of devices.</param>
            <param name="ipAddress">The ip address.</param>
            <param name="portOffse">The port offse.</param>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:ActiveV.ActiveVException"></exception>
        </member>
        <member name="M:ActiveV.Communications.QueryReadRequest(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Creates and sends a QueryReadRequest command to controller
            </summary>
            <param name="Board">The board.</param>
            <param name="TaskID">The task identifier.</param>
            <param name="Status">The status.</param>
        </member>
        <member name="M:ActiveV.Communications.RequestEvents(System.Int32,System.Int32@)">
             <summary>
            Creates and sends an AsyncCommand to controller
             </summary>
             <param name="requestActionType">Type of the request action.</param>
             <param name="Status">The status.</param>
        </member>
        <member name="M:ActiveV.Communications.SendString(System.String,System.Int32)">
            <summary>
            Sends the string.
            </summary>
            <param name="Message">The message.</param>
            <param name="uCount">The u count.</param>
            <exception cref="T:ActiveV.ActiveVException">
            </exception>
        </member>
        <member name="M:ActiveV.Communications.SendString(System.String)">
            <summary>
            Sends a message/command to controller
            </summary>
            <param name="Message">The message.</param>
        </member>
        <member name="M:ActiveV.Communications.SendStringEx(System.Int32,System.Int32,System.String)">
            <summary>
            ends a message/command to controller
            </summary>
            <param name="Board">The board.</param>
            <param name="Task">The task.</param>
            <param name="Message">The message.</param>
            <exception cref="T:ActiveV.ActiveVException"></exception>
        </member>
        <member name="M:ActiveV.Communications.SendCommandGetResponseAndStatus(System.String,System.String@)">
            <summary>
            Sends the command and gets response.  It returns status.  Status = 1 for success or equal to error number
            </summary>
            <param name="command">The command.</param>
            <param name="Response">The response.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveV.Communications.SendCommandGetResponseAndError(System.String,System.String@)">
            <summary>
            Sends the command get response.  Any error from controller will generate an exception
            </summary>
            <param name="command">The command.</param>
            <param name="Response">The response.</param>
            <returns></returns>
            <exception cref="T:ActiveV.ActiveVException"></exception>
        </member>
        <member name="M:ActiveV.Communications.SendCommandGetStatus(System.String)">
            <summary>
            Sends the command and returns status.
            </summary>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveV.Communications.SendCommandGetResponse(System.String,System.String@,System.Int32@)">
            <summary>
            Sends the command get response.
            </summary>
            <param name="command">The command.</param>
            <param name="Response">The response.</param>
            <param name="Status">The status.</param>
        </member>
        <member name="M:ActiveV.Communications.MakeContext(System.Int32,System.String)">
            <summary>
            Makes the context for command argument depending on task number and program name .
            </summary>
            <param name="TaskNumber">The task number.</param>
            <param name="ProgramName">Name of the program.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveV.Communications.UnlockController">
            <summary>
            UnLocks controller.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ActiveV.Communications.AppendLog(System.Boolean,System.String)">
            <summary>
            Appends Text to log of characters.
            </summary>
            <param name="direction">if true append -> means from PC to Controller, otherwise append </param>
            <param name="Text">The text.</param>
        </member>
        <member name="T:ActiveV.DebugUtil">
            <summary>
            It has utility to capture debug info.
            </summary>
        </member>
        <member name="M:ActiveV.DebugUtil.DebugInfo(System.String)">
            <summary>
            Writes to console the argument info, the method name where DebugInfo is placed, the calling method and class (type), Process and thread IDs
            </summary>
            <param name="info">The information.</param>
            
        </member>
        <member name="T:ActiveV.Editor">
            <summary>
            It's a collection of command for manipulating controller program
            </summary>
            <seealso cref="T:ActiveV.IEditor" />
        </member>
        <member name="M:ActiveV.Editor.CheckProgram(ActiveV.ICommunications,System.Int32@)">
            <summary>
            CheckProgram checks the V+ program to be edited for error and protection status.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="Status">Status = 1 for success or equals error number.</param>
        </member>
        <member name="M:ActiveV.Editor.DeleteLine(ActiveV.ICommunications,System.Int32,System.Int32,System.Int32@)">
            <summary>
            DeleteLine deletes a program line.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="LineNumber">The line number to start delete. It can be 0.</param>
            <param name="NumberOfLines">The number of lines to delete.</param>
            <param name="Status">Status = 1 for success or equals error number.</param>
        </member>
        <member name="M:ActiveV.Editor.Edit(ActiveV.ICommunications,System.String,System.Int32@)">
            <summary>
            Edits assigns program name that needs to be edited.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="ProgName">Name of the prog.</param>
            <param name="Status">Status = 1 for success or equals error number.</param>
        </member>
        <member name="M:ActiveV.Editor.InsertLine(ActiveV.ICommunications,System.Int32,System.String@,System.Int32@)">
            <summary>
            InsertLine inserts a new line int the current program.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="LineNumber">The line number.</param>
            <param name="LineText">The line text.</param>
            <param name="Status">Status = 1 for success or equals error number.</param>
        </member>
        <member name="M:ActiveV.Editor.filterResponseByErrorPosition(System.String)">
            <summary>
            Filters the response by error position.
            if the error is at the start of response then return empty string.
            Otherwise, remove the error and return the response.
            </summary>
            <param name="Response">The response.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveV.ErrorHandler.GetErrorString(System.Int32,System.String@)">
            <summary>
            Gets the error string for an error number.
            </summary>
            <param name="ErrorCode">The error code.</param>
            <param name="ErrorString">The error string.</param>
        </member>
        <member name="M:ActiveV.ErrorHandler.GetVErrorString(System.Int32,System.String@)">
            <summary>
            Returns a description for a V+ error code.
            </summary>
            <param name="VErrorCode">The V+ error code.</param>
            <param name="ErrorString">The error description.</param>
        </member>
        <member name="T:ActiveV.ErrorHandler.ActiveVerrorCodes">
            <summary>
            ActiveV error codes
            </summary>
        </member>
        <member name="M:ActiveV.Errors.GetErrorNumberFromDescription(System.String)">
            <summary>
            Gets the error number from description.
            </summary>
            <param name="errorDescription">The error description.</param>
            <returns></returns>
        </member>
        <member name="T:ActiveV.Errors.ERRORS">
            <summary>
            Error numbers returned by controller
            </summary>
        </member>
        <member name="T:ActiveV.Extensions">
            <summary>
            Container for Extension methods
            </summary>
        </member>
        <member name="M:ActiveV.Extensions.CheckAndThrowNullOrEmptyException(System.String,System.String)">
            <summary>
            Checks the string for null or empty and throws null or empty exception.
            </summary>
            <param name="stringArg">The string argument.</param>
            <param name="argName">Name of the argument.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">The string argument cannot be empty.</exception>
        </member>
        <member name="M:ActiveV.Extensions.CheckAndThrowNullException(System.String,System.String)">
            <summary>
            Checksthe the string for null and throw null exception.
            </summary>
            <param name="stringArg">The string argument.</param>
            <param name="argName">Name of the argument.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:ActiveV.Extensions.IsExceptionErrorCode(System.Exception,System.Int32)">
            <summary>
            Determines whether given Exception has [the specified error code].
            </summary>
            <param name="ex">The ex.</param>
            <param name="errorCode">The error code.</param>
            <returns>
              <c>true</c> if [is exception error code] [the specified error code]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:ActiveV.Files">
            <summary>
            It's a collection of commands to do file operations for controller
            </summary>
            <seealso cref="T:ActiveV.IFiles" />
        </member>
        <member name="M:ActiveV.Files.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.Files"/> class.
            </summary>
        </member>
        <member name="M:ActiveV.Files.FCopy(ActiveV.Communications,System.String,System.String,System.Int32@)">
            <summary>
            FCopy copies one file to another.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="SourceFile">The source file.</param>
            <param name="DestFile">The destination file.</param>
            <param name="Status">The status = 1 for success or set to error number.</param>
        </member>
        <member name="M:ActiveV.Files.FDelete(ActiveV.Communications,System.String,System.Int32@)">
            <summary>
            FDelete deletes a file.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="FileName">Name of the file.</param>
            <param name="Status">The status = 1 for success or set to error number.</param>
        </member>
        <member name="M:ActiveV.Files.FDirectory(ActiveV.Communications,System.String,System.Int32@,System.Array@,System.Array@,System.Array@,System.Array@)">
            <summary>
            FDirectory obtains a directory listing.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="PathName">Path use for FDIRECTORY.</param>
            <param name="Count">Number of filenames to return. When done it has th actual number of filenames returned</param>
            <param name="FileNameCollection">The file name collection.</param>
            <param name="FileAttributeCollection">The file attribute collection.
            							bit 0 set -> is a directory
            							bit 1 set -> is read-only
            							bit 2 set -> is a link
            							bit 3 set -> is protected
            							bit 4 set -> is a system file
            							bit 5 set -> is a volume label
            							</param>
            <param name="FileDateCollection">The file creation date collection.</param>
            <param name="FileSizeCollection">The file size collection.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ActiveV.Files.FRename(ActiveV.Communications,System.String,System.String,System.Int32@)">
            <summary>
            FRename renames a file to another.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="OldName">The old name.</param>
            <param name="NewName">The new name.</param>
            <param name="Status">The status = 1 for success or set to error number.</param>
        </member>
        <member name="M:ActiveV.Files.FSetProperties(ActiveV.Communications,System.String,System.String,System.Int32@)">
            <summary>
            FSetProperties sets file properties.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="FileName">Name of the file.</param>
            <param name="Properties">The properties.</param>
            <param name="Status">The status = 1 for success or set to error number.</param>
        </member>
        <member name="M:ActiveV.Files.NFSMounts(ActiveV.Communications,System.Int32@,System.Array@,System.Array@,System.Array@)">
            <summary>
            NFSMounts returns NFS mount info.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="RequestedCount">The requested count.</param>
            <param name="MountNameCollectin">The mount name collectin.</param>
            <param name="NodeCollection">The node collection.</param>
            <param name="PathNameCollection">The path name collection.</param>
        </member>
        <member name="T:ActiveV.ICommunications">
            <summary>
            Interface defines all properties and methods to be implemented by Communication class or any other class inheriting from ICommunications. 
            </summary>
        </member>
        <member name="T:ActiveV.IEditor">
            <summary>
            Interface defines all properties and methods to be implemented by Editor class or any other class inheriting from IEditor.
            </summary>
        </member>
        <member name="T:ActiveV.IErrorHandler">
            <summary>
            Interface defines all properties and methods to be implemented by ErrorHandler class or any other class inheriting from IErrorHandler
            </summary>
        </member>
        <member name="T:ActiveV.IFiles">
            <summary>
            Interface defines all properties and methods to be implemented by Files class or any other class inheriting from IFiles
            </summary>
        </member>
        <member name="T:ActiveV.IMiscControl">
            <summary>
            Interface defines all properties and methods to be implemented by MiscControl class or any other class inheriting from IMiscControl
            </summary>
        </member>
        <member name="T:ActiveV.IPrograms">
            <summary>
            Interface defines all properties and methods to be implemented by Programs class or any other class inheriting from IPrograms. 
            </summary>
        </member>
        <member name="T:ActiveV.IStatus">
            <summary>
            Interface defines all properties and methods to be implemented by Status class or any other class inheriting from IStatus. 
            </summary>
        </member>
        <member name="T:ActiveV.IVersion">
            <summary>
            Interface defines all properties and methods to be implemented by Version class or any other class inheriting from IVersion. 
            </summary>
        </member>
        <member name="M:ActiveV.MiscControl.Calibrate(ActiveV.ICommunications,System.Int32@)">
            <summary>
            Calibrates the Robot.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="Status">The status = 1 for success or set to error number.</param>
        </member>
        <member name="M:ActiveV.MiscControl.Jog(ActiveV.ICommunications,System.Int32,System.Int32,System.Array@,System.Int32@,System.Array@,System.Int32@,System.Array@,System.Int32@)">
            <summary>
            Jogs the specified comm.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="Mode">The mode. mode = -1 is to maintain the last commanded motion</param>
            <param name="ArgsCount">The arguments count in Speeds array.</param>
            <param name="Speeds">The speeds array.  Array of speed values for each joint/coordinate.  Speed value of -999 = don't jog that joint </param>
            <param name="CountJointCoords">The count of joint coordinates.</param>
            <param name="JointCoords">The joint coordinates collection.</param>
            <param name="CountWorldCoords">The count of world coordinates.</param>
            <param name="WorldCoords">The world coordinates collection.</param>
            <param name="Status">The status = 1 for success or set to error number.</param>
        </member>
        <member name="M:ActiveV.MiscControl.Jog3(ActiveV.ICommunications,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.String,System.String,System.Int32@,System.Array@,System.Int32@,System.Array@,System.Int32@,System.Int32@)">
            <summary>
            Jogs robot to specified location.
            </summary>
            <param name="Comm">The communication.</param>
            <param name="Robot">The robot.</param>
            <param name="Mode">The mode.</param>
            <param name="Joint">The joint.</param>
            <param name="Speed">The speed.</param>
            <param name="Task">The task.</param>
            <param name="Program">The program name.</param>
            <param name="LocationName">Name of the location.</param>
            <param name="CountJointCoords">The count joint coordinates.</param>
            <param name="JointCoords">The joint coordinates.</param>
            <param name="CountWorldCoords">The count world coordinates.</param>
            <param name="WorldCoords">The world coordinates.</param>
            <param name="Status">The status = 1 for success or set to error number.</param>
            <param name="VCode">The v code. Error code related or caused by jog</param>
        </member>
        <member name="M:ActiveV.MiscControl.Parameter(ActiveV.ICommunications,System.String,System.Single,System.Int32@)">
            <summary>
            Parameter sets a system parameter value.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="ParameterName">Name of the parameter.</param>
            <param name="Value">The parameter value.</param>
            <param name="Status">The status = 1 for success or set to error number.</param>
        </member>
        <member name="M:ActiveV.MiscControl.SetL(ActiveV.ICommunications,System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32@)">
            <summary>
            Sets  the value of a location V+ variable.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="Variable">The variable.</param>
            <param name="X">Location x.</param>
            <param name="Y">Location y.</param>
            <param name="Z">Location z.</param>
            <param name="Yaw">Location yaw.</param>
            <param name="Pitch">Location pitch.</param>
            <param name="Roll">Location roll.</param>
            <param name="Status">The status = 1 for success or set to error number.</param>
        </member>
        <member name="M:ActiveV.MiscControl.SetPP(ActiveV.ICommunications,System.String,System.Int32,System.Array@,System.Int32@)">
            <summary>
            Sets  the value of a precision point variable.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="Variable">The variable.</param>
            <param name="ValuesCount">The Values count.</param>
            <param name="Values">Values array.</param>
            <param name="Status">The status = 1 for success or set to error number.</param>
        </member>
        <member name="M:ActiveV.MiscControl.SetR(ActiveV.ICommunications,System.String,System.Double,System.Int32@)">
            <summary>
            Sets the value of a Real V+ variable.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="VariableName">Name of the variable.</param>
            <param name="Value">The value.</param>
            <param name="Status">The status = 1 for success or set to error number.</param>
            <exception cref="T:System.ArgumentException">Variable</exception>
        </member>
        <member name="M:ActiveV.MiscControl.SetS(ActiveV.ICommunications,System.String,System.String,System.Int32@)">
            <summary>
            Sets the value of a string V+ variable.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="VariableName">Name of the variable.</param>
            <param name="Value">The value.</param>
            <param name="Status">The status = 1 for success or set to error number.</param>
        </member>
        <member name="M:ActiveV.MiscControl.SignalOff(ActiveV.ICommunications,System.Int32)">
            <summary>
            SignalOff turns a DIO signal off
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="SignalNumber">The signal number.</param>
        </member>
        <member name="M:ActiveV.MiscControl.SignalOn(ActiveV.ICommunications,System.Int32)">
            <summary>
            SignalOn turns a DIO signal on
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="SignalNumber">The signal number.</param>
        </member>
        <member name="M:ActiveV.MiscControl.Speed(ActiveV.ICommunications,System.Single,System.Int32@)">
            <summary>
            Speed sets the robot speed.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="Speed">The speed.</param>
            <param name="Status">The status = 1 for success or set to error number.</param>
        </member>
        <member name="M:ActiveV.MiscControl.SwitchOff(ActiveV.ICommunications,System.String,System.Int32@)">
            <summary>
            SwitchOff disables a system switch.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="SwitchName">Name of the switch.</param>
            <param name="Status">The status = 1 for success or set to error number.</param>
        </member>
        <member name="M:ActiveV.MiscControl.SwitchOn(ActiveV.ICommunications,System.String,System.Int32@)">
            <summary>
            SwitchOff enables a system switch.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="SwitchName">Name of the switch.</param>
            <param name="Status">The status = 1 for success or set to error number.</param>
        </member>
        <member name="T:ActiveV.StateManager.Transitions">
            <summary>
            Represents a collection of transition objects.
            </summary>
        </member>
        <member name="M:ActiveV.StateManager.Transitions.Add(ActiveV.StateManager.Transition)">
            <summary>Adds the specified transition to the collection.</summary> 
            <param name="transition">Transition object</param>      
            <see cref="N:System.Collections.Generic"/>
            <exception cref="T:System.ArgumentNullException">Key is null</exception>
            <exception cref="T:System.ArgumentException">An transition with the same key already exists.</exception>
        </member>
        <member name="M:ActiveV.StateManager.Transitions.Remove(ActiveV.StateManager.State,ActiveV.StateManager.StateEventArgs)">
            <summary>
            Removes the specified transition by state and event.
            </summary>
            <param name="state">The state.</param>
            <param name="sevent">The <see cref="T:ActiveV.StateManager.StateEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="T:ActiveV.StateManager.StateEventArgs">
            <summary>
            Event argument that a process publishes
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:ActiveV.StateManager.StateEventArgs.Name">
            <summary>
            Gets the event name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:ActiveV.StateManager.StateEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.StateManager.StateEventArgs"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:ActiveV.StateManager.StateEventArgs.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.StateManager.StateEventArgs"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="info">The information.</param>
        </member>
        <member name="M:ActiveV.StateManager.StateEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.StateManager.StateEventArgs"/> class.
            </summary>
            <param name="info">The information.</param>
        </member>
        <member name="P:ActiveV.StateManager.StateEventArgs.Info">
            <summary>
            Gets or sets the information. Any object that could be appended and published by event.
            </summary>
            <value>
            The information.
            </value>
        </member>
        <member name="T:ActiveV.StateManager.State">
            <summary>
            State class.  Two way to use:  
            Make a class that Inherit from it and override DoAction method or instantiate this class and assign Action.
            </summary>
        </member>
        <member name="P:ActiveV.StateManager.State.StateEntryAction">
            <summary>
            States the action on entry.
            this method is usually used to initialize variables for the state the first time the state machine is run.
            if set to null StateActionOnEntry method won't be called by StateMachine anymore
            </summary>
        </member>
        <member name="P:ActiveV.StateManager.State.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="M:ActiveV.StateManager.State.#ctor(System.String,ActiveV.StateManager.StateAction)">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.StateManager.State"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:ActiveV.StateManager.State.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.StateManager.State"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="T:ActiveV.StateManager.StateMachine">
            <summary>
            StateMachine is used to define a process. 
            It has states that executes some task and transitions that defines how it transitions from one state to another.
            </summary>
        </member>
        <member name="M:ActiveV.StateManager.StateMachine.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.StateManager.StateMachine"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="T:ActiveV.StateManager.StateMachine.StateChangedEventHandler">
            <summary>
            State change event delegate
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The <see cref="T:ActiveV.StateManager.StateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:ActiveV.StateManager.StateMachine.StateChanged">
            <summary>
            Occurs when [state changed].
            </summary>
        </member>
        <member name="T:ActiveV.StateManager.StateMachine.Status">
            <summary>
            Assigned to status property of a state machine
            </summary>
        </member>
        <member name="P:ActiveV.StateManager.StateMachine.ActiveState">
            <summary>
            Sets the current state of the StateMachine.
            </summary>
            <value>
            The state of the active.
            </value>
        </member>
        <member name="P:ActiveV.StateManager.StateMachine.ErrorState">
            <summary>
            Sets the state in error.
            </summary>
            <value>
            The state of the error.
            </value>
        </member>
        <member name="P:ActiveV.StateManager.StateMachine.ProcessCompleteEvent">
            <summary>
            Gets the process complete event.
            </summary>
            <value>
            The process complete event.
            </value>
        </member>
        <member name="P:ActiveV.StateManager.StateMachine.Transitions">
            <summary>
            Gets the transitions collection.
            </summary>
            <value>
            The transitions.
            </value>
        </member>
        <member name="M:ActiveV.StateManager.StateMachine.AddProcessCompleteTransitionName(System.String)">
            <summary>
            Adds the name of the process complete transition.
            </summary>
            <param name="transitionName">Name of the transition.</param>
        </member>
        <member name="M:ActiveV.StateManager.StateMachine.AddState(ActiveV.StateManager.State)">
            <summary>
            Adds the state.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:ActiveV.StateManager.StateMachine.AddState(ActiveV.StateManager.State[])">
            <summary>
            Adds the states.
            </summary>
            <param name="states">The states.</param>
        </member>
        <member name="M:ActiveV.StateManager.StateMachine.AddTransition(ActiveV.StateManager.Transition)">
            <summary>
            Adds the transition.
            </summary>
            <param name="transition">The transition.</param>
        </member>
        <member name="M:ActiveV.StateManager.StateMachine.AddTransition(ActiveV.StateManager.Transition[])">
            <summary>
            Adds the transitions.
            </summary>
            <param name="transitions">The transitions.</param>
        </member>
        <member name="M:ActiveV.StateManager.StateMachine.ChangeState(System.Object,ActiveV.StateManager.StateEventArgs)">
            <summary>
            It changes the active state based on the eventArgs.  
            A transition is selected based on event and the active state.  
            The next state to be executed is the nextState property in the Transition object.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The <see cref="T:ActiveV.StateManager.StateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ActiveV.StateManager.StateMachine.CreateStatesAndTransitions">
            <summary>
            Creates the states and transitions and sets the initial state
            </summary>
        </member>
        <member name="M:ActiveV.StateManager.StateMachine.StartAction(System.Object,ActiveV.StateManager.StateEventArgs)">
            <summary>
            Starts the state machine cycle.
            </summary>
            <param name="sender">The sender.</param>
            <param name="stateArgs">The <see cref="T:ActiveV.StateManager.StateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ActiveV.StateManager.StateMachine.StopAction">
            <summary>
            Stops the state machine cycle.
            </summary>
        </member>
        <member name="T:ActiveV.StateManager.Transition">
            <summary>
            Defines state machine transition from one state to another
            </summary>
        </member>
        <member name="M:ActiveV.StateManager.Transition.#ctor(ActiveV.StateManager.State,ActiveV.StateManager.StateEventArgs,ActiveV.StateManager.State,ActiveV.StateManager.StateAction)">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.StateManager.Transition"/> class.
            </summary>
            <param name="CurrentState">State of the current.</param>
            <param name="stateEventArg">The <see cref="T:ActiveV.StateManager.StateEventArgs"/> instance containing the event data.</param>
            <param name="nextState">State of the next.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:ActiveV.StateManager.Transition.#ctor(ActiveV.StateManager.State,ActiveV.StateManager.StateEventArgs,ActiveV.StateManager.State)">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.StateManager.Transition"/> class.
            </summary>
            <param name="CurrentState">State of the current.</param>
            <param name="stateEventArg">The <see cref="T:ActiveV.StateManager.StateEventArgs"/> instance containing the event data.</param>
            <param name="nextState">State of the next.</param>
        </member>
        <member name="T:ActiveV.StateManager.NoActionState">
            <summary>
            Used to put a state machine in Idle state
            </summary>
            <seealso cref="T:ActiveV.StateManager.State" />
        </member>
        <member name="M:ActiveV.StateManager.NoActionState.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.StateManager.NoActionState"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:ActiveV.StateManager.NoActionState.DoAction(System.Object,ActiveV.StateManager.StateEventArgs)">
            <summary>
            Do nothing.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The <see cref="T:ActiveV.StateManager.StateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:ActiveV.TCP.ActiveVPacket">
            <summary>
            A packet has a header and byte array for data
            </summary>
        </member>
        <member name="T:ActiveV.TCP.Header">
            <summary>
            Packet Header
            </summary>
        </member>
        <member name="T:ActiveV.TCP.Communication.TcpBase">
            <summary>
            Base class for TCPClient and TCPServer classes
            </summary>
        </member>
        <member name="T:ActiveV.TCP.Communication.TCPClient">
            <summary>
            It's used to send and receive TCP message to/from controller
            </summary>
            <seealso cref="T:ActiveV.TCP.Communication.TcpBase" />
        </member>
        <member name="M:ActiveV.TCP.Communication.TCPClient.ConnectTo(System.Net.IPAddress,System.Int32)">
            <summary>
            Connects to controller.
            </summary>
            <param name="ipAddress">The ip address.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:ActiveV.TCP.Communication.TCPClient.ConnectTo(System.String,System.Int32)">
            <summary>
            Connects to controller.
            </summary>
            <param name="ipAddressInput">The ip address input.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:ActiveV.TCP.Communication.TCPClient.IsConnected">
            <summary>
            Determines whether this instance is connected.
            </summary>
            <returns>
              <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiveV.TCP.Communication.TCPClient.Receive(System.Net.Sockets.NetworkStream)">
            <summary>
            Reads from specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveV.TCP.Communication.TCPClient.Send(System.String)">
            <summary>
            Sends the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ActiveV.TCP.Communication.TCPClient.Send(System.Byte[])">
            <summary>
            Sends the specified byte data to controller.  
            </summary>
            <param name="byteData">The byte data.</param>
        </member>
        <member name="T:ActiveV.TCP.Communication.TCPServer">
            <summary>
            This class is used mainly for testing.  It is for setting up a TCP server
            </summary>
            <seealso cref="T:ActiveV.TCP.Communication.TcpBase" />
        </member>
        <member name="M:ActiveV.TCP.Communication.TCPServer.ListenLoop">
            <summary>
            Listens to client and receives byte[] Data
            </summary>
        </member>
        <member name="T:ActiveV.TCP.HandleOpCode_OP_ERROR">
            <summary>
            Handles packet with Opcode  OP_ERROR
            </summary>
            <seealso cref="T:ActiveV.TCP.PacketHandler" />
            <seealso cref="T:ActiveV.TCP.OpCodes" />
        </member>
        <member name="T:ActiveV.TCP.HandleOpCode_OP_GETC_">
            <summary>
            Handles packet with Opcode  OP_GETC_
            </summary>
            <seealso cref="T:ActiveV.TCP.OpCodes" />
            <seealso cref="T:ActiveV.TCP.PacketHandler" />
        </member>
        <member name="T:ActiveV.TCP.HandleOpCode_OP_KEEP_ALIVE">
            <summary>
            Handles packet with Opcode  OP_KEEP_ALIVE
            </summary>
            <seealso cref="T:ActiveV.TCP.OpCodes" />
            <seealso cref="T:ActiveV.TCP.PacketHandler" />
        </member>
        <member name="T:ActiveV.TCP.HandleOpCode_OP_QUERY_READ">
            <summary>
            Handles packet with Opcode  OP_QUERY_READ
            </summary>
            <seealso cref="T:ActiveV.TCP.OpCodes" />
            <seealso cref="T:ActiveV.TCP.PacketHandler" />
        </member>
        <member name="T:ActiveV.TCP.HandleOpCode_OP_READ_">
            <summary>
            Handles packet with Opcode  OP_READ_
            </summary>
            <seealso cref="T:ActiveV.TCP.OpCodes" />
            <seealso cref="T:ActiveV.TCP.PacketHandler" />
        </member>
        <member name="T:ActiveV.TCP.HandleOpCode_OUTPUT">
            <summary>
            Handles packet with Opcode  OP_OUTPUT 
            </summary>
            <seealso cref="T:ActiveV.TCP.OpCodes" />
            <seealso cref="T:ActiveV.TCP.PacketHandler" />
        </member>
        <member name="T:ActiveV.TCP.PacketHandler">
            <summary>
            Base class for handling TCP packets received from controller
            </summary>
        </member>
        <member name="M:ActiveV.TCP.TcpLink.Close">
            <summary>
            Closes the socket in TcpClient
            </summary>
        </member>
        <member name="M:ActiveV.TCP.TcpLink.convertBytesToOnePacket(System.Byte[])">
            <summary>
            Converts the packet bytes to one ActiveVPacket.
            </summary>
            <param name="packetBytes">The packet bytes.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveV.TCP.TcpLink.ConvertBytesToPackets(System.Byte[],System.Int32,System.Collections.Generic.List{System.Byte[]}@)">
            <summary>
            Breaks bytes received from TcpClient stream into to packet size byte chunks and return them in a List
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="currentIndex">Index of the current.</param>
            <param name="packetsByte">The packets byte.</param>
        </member>
        <member name="M:ActiveV.TCP.TcpLink.CreateTcpServer(System.String,System.Int32)">
            <summary>
            Creates the TCP server. Mainly used for testing
            </summary>
            <param name="ipAddressInput">The ip address input.</param>
            <param name="port">The port.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveV.TCP.TcpLink.CreateTcpServer(System.Net.IPAddress,System.Int32)">
            <summary>
            Creates the TCP server.  Mainly used for testing
            </summary>
            <param name="ipAddress">The ip address.</param>
            <param name="port">The port.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveV.TCP.TcpLink.Open(System.String,System.Int32)">
            <summary>
            Create a tcp client connection and listening on IP address and port VP_MONITOR_PORT (1997) + the offset 
            specified by portOffset
            </summary>
            <param name="ipAddressInput">The ip address input.</param>
            <param name="portOffset">The port offset.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveV.TCP.TcpLink.ProcessPacket(ActiveV.TCP.ActiveVPacket)">
            <summary>
            Processes the packet. Reads OpCode in the packet header and based on it calls proper handler.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:ActiveV.TCP.TcpLink.RequestEvents(System.Int32,System.Int32@)">
            <summary>
            Requests the events.
            Requests that the controller send async events.
            In TCP they are always sent. just respond sucess.
            </summary>
            <param name="requestActionType">Type of the request action.</param>
            <param name="Status">The status.</param>
        </member>
        <member name="M:ActiveV.TCP.TcpLink.convertPacketBytesToPackets(System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Each packet bytes is converted into a ActiveVPacket struct and returned in a list
            </summary>
            <param name="packetsInBytes">The packets in bytes.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveV.TCP.TcpLink.createPacketHandlers">
            <summary>
            Creates the packet handlers.
            </summary>
        </member>
        <member name="M:ActiveV.TCP.TcpLink.isItPacket(ActiveV.TCP.Header)">
            <summary>
            Determines whether a header is a packet header.  If all header struct memebers are zero then it is not a packet header
            </summary>
            <param name="packetHeader">The packet header.</param>
            <returns>
              <c>true</c> if [is it packet] [the specified packet header]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiveV.TCP.TcpLink.ListenLoop">
            <summary>
            In a continuous loop receives bytes from TcpClient stream and pushes into tcpReceiveBuffer for asynchronous processing
            </summary>
        </member>
        <member name="M:ActiveV.TCP.TcpLink.listernAndProcessReceivedPackets">
            <summary>
            start Listening Loop
            </summary>
        </member>
        <member name="M:ActiveV.TCP.TcpLink.processReceivedBytesToPackets">
            <summary>
            It extracts byte array from TCP receive buffer, separates bytes to packet sizes and converts packet bytes to packet struct.
            It start processing packets
            </summary>
        </member>
        <member name="T:ActiveV.TCP.OpCodes">
            <summary>
            TCP packet opcodes
            </summary>
        </member>
        <member name="F:ActiveV.TCP.OpCodes.OP_OUTPUT">
            <summary>
            The op output
            </summary>
        </member>
        <member name="F:ActiveV.TCP.OpCodes.OP_ERROR">
            <summary>
            The op error
            </summary>
        </member>
        <member name="F:ActiveV.TCP.OpCodes.OP_READ_">
            <summary>
            The op read
            </summary>
        </member>
        <member name="F:ActiveV.TCP.OpCodes.OP_GETC_">
            <summary>
            The op getc
            </summary>
        </member>
        <member name="F:ActiveV.TCP.OpCodes.OP_KEEP_ALIVE">
            <summary>
            The op keep alive
            </summary>
        </member>
        <member name="F:ActiveV.TCP.OpCodes.OP_QUERY_READ">
            <summary>
            The op query read
            </summary>
        </member>
        <member name="T:ActiveV.Programs">
            <summary>
            It's a collection of methods to manipulate or get information about V+ program
            </summary>
            <seealso cref="T:ActiveV.IPrograms" />
        </member>
        <member name="M:ActiveV.Programs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.Programs"/> class.
            </summary>
        </member>
        <member name="M:ActiveV.Programs.Abort(ActiveV.ICommunications,System.Int32,System.Int32@)">
            <summary>
            Aborts  a task.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="TaskNumber">The task number.</param>
            <param name="Status">Status = 1 for success or equals error number.</param>
        </member>
        <member name="M:ActiveV.Programs.ClearBreakpoint(ActiveV.ICommunications,System.String,System.Int32,System.Int32@)">
            <summary>
            Clears one or all breakpoints in a V+ program.
            </summary>
            <param name="Comm">The communication channel</param>
            <param name="ProgramName">Name of the program.</param>
            <param name="BreakpointLineNumber">The breakpoint line number. if 0 all breakpoints in the program are clreard</param>
            <param name="Status">Status = 1 for success or equals error number.</param>
        </member>
        <member name="M:ActiveV.Programs.Delete(ActiveV.ICommunications,System.String,System.Int32@)">
            <summary>
            Deletes a V+ program from system memory
            </summary>
            <param name="Comm">The communication channel</param>
            <param name="ProgName">Name of program to delete</param>
            <param name="Status">Status = 1 for success or equals error number.</param>
        </member>
        <member name="M:ActiveV.Programs.Deletem(ActiveV.ICommunications,System.String,System.Int32@)">
            <summary>
            Deletes a V+ Module from system memory
            </summary>
            <param name="Comm">The communication channel</param>
            <param name="ModuleName">Name of module to delete</param>
            <param name="Status">Status = 1 for success or equals error number.</param>
        </member>
        <member name="M:ActiveV.Programs.Deletep(ActiveV.ICommunications,System.String,System.Int32@)">
            <summary>
            Deletes a V+ program from system memory
            </summary>
            <param name="Comm">The communication channel</param>
            <param name="ProgName">Name of program to delete</param>
            <param name="Status">Status = 1 for success or equals error number.</param>
        </member>
        <member name="M:ActiveV.Programs.Directory(ActiveV.ICommunications,System.String,System.Int32@,System.Array@,System.Array@)">
            <summary>
            It sends a monitor command "DIRECTORY" and gets the list of programs loaded in V+
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="Filter">The filter.</param>
            <param name="RequestedCount">The requested count.</param>
            <param name="ProgramNames">Name of the programs</param>
            <param name="Attributes">Program attributes.</param>
        </member>
        <member name="M:ActiveV.Programs.Execute(ActiveV.ICommunications,System.String,System.Int32,System.Int32@)">
            <summary>
            Executes a V+ program.
            </summary>
            <param name="Comm">The communication channel</param>
            <param name="ProgramName">Name of the program.</param>
            <param name="TaskNumber">The task number.</param>
            <param name="Status">Successful Status = 1 or equals error number</param>
        </member>
        <member name="M:ActiveV.Programs.Kill(ActiveV.ICommunications,System.Int32,System.Int32@)">
            <summary>
            Kills a task stack.
            </summary>
            <param name="Comm">The communication channel</param>
            <param name="TaskNumber">The task number.</param>
            <param name="Status">Status = 1 for success or equals error number</param>
        </member>
        <member name="M:ActiveV.Programs.ListBreakpoints(ActiveV.ICommunications,System.String,System.Array@,System.Int32@,System.Int32@)">
            <summary>
            Lists all breakpoints in a V+ program.
            </summary>
            <param name="Comm">The comm.</param>
            <param name="ProgramName">Name of the program.</param>
            <param name="BreakpointsLineNumbers">The breakpoints line numbers array.</param>
            <param name="BreakpointsCount">The breakpoints count.</param>
            <param name="Status">Status = 1 for success or equals error number</param>
        </member>
        <member name="M:ActiveV.Programs.Listp(ActiveV.ICommunications,System.String,System.Int32@,System.Int32,System.Array@)">
            <summary>
            It sends monitor command Listp and returns the text of a requested program in V+ memeory  .
            </summary>
            <param name="Comm">The comm.</param>
            <param name="ProgramName">Name of the program.</param>
            <param name="LineCount">Number of lines read.</param>
            <param name="StartingLineNumber">The starting line number requested.</param>
            <param name="TextArray">The text array contains program lines starting from the starting line number requested.</param>
        </member>
        <member name="M:ActiveV.Programs.Load(ActiveV.ICommunications,System.String,System.Int32@,System.String@)">
            <summary>
            Loads programs and variables from a file.
            </summary>
            <param name="Comm">The communication object.</param>
            <param name="FileName">Name of the file.</param>
            <param name="Status">The status = 1 for success or error code.</param>
            <param name="ProgNameTriggeringError">The error string. Name of the program causing the error</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ActiveV.Programs.MDirectory(ActiveV.ICommunications,System.String,System.Int32@,System.Array@,System.Array@)">
            <summary>
             This routine lists the modules loaded in
             memory, or alternatively, the programs contained in a
             specified module. 
            </summary>
            <param name="Comm">The comm.</param>
            <param name="ModuleName">If empty, the method retrieves names of modules loaded, otherwise, gets name of programs for specific module</param>
            <param name="Count">Number of modules or programs names retrieved</param>
            <param name="Names">The name collection.</param>
            <param name="Attributes">The attributes collection.  bit 0 set means modified, bit 1 set means contains error</param>
        </member>
        <member name="M:ActiveV.Programs.Module(ActiveV.ICommunications,System.String,System.String,System.Int32@)">
            <summary>
            Uses MODULE command to move the program ProgramName into the module ModuleName
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="ModuleName">Name of the module.</param>
            <param name="ProgramName">Name of the program.</param>
            <param name="Status">Status = 1 for success or equals error number</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ActiveV.Programs.ModuleFile(ActiveV.ICommunications,System.String,System.String,System.Int32@)">
            <summary>
            Associates a file name with a module.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="ModuleName">Module name.</param>
            <param name="FileName">File name.</param>
            <param name="Status">Status = 1 for success or equals error number.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ActiveV.Programs.PCopy(ActiveV.ICommunications,System.String,System.String,System.Int32@)">
            <summary>
            PCopy: copies one V+ program to another
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="SourceName">Name of the source (old).</param>
            <param name="DestName">Name of the dest (new).</param>
            <param name="Status">Status = 1 for success or equals error number</param>
        </member>
        <member name="M:ActiveV.Programs.Prime(ActiveV.ICommunications,System.Int32,System.String,System.Int32@)">
            <summary>
            Prime will prepare a program in a given task.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="TaskNumber">The task number.</param>
            <param name="ProgramName">Name of the program.</param>
            <param name="Status">Status = 1 for success or equals error number.</param>
        </member>
        <member name="M:ActiveV.Programs.Proceed(ActiveV.ICommunications,System.Int32,System.Int32@)">
            <summary>
            Proceed sends PROCEED command.  To continue a program after an error.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="TaskNumber">The task number.</param>
            <param name="Status">Status = 1 for success or equals error number.</param>
        </member>
        <member name="M:ActiveV.Programs.Rename(ActiveV.ICommunications,System.String,System.String,System.Int32@)">
            <summary>
            Renames one V+ program to another.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="SourceName">Name of the source (old).</param>
            <param name="DestName">Name of the dest (new).</param>
            <param name="Status">Status = 1 for success or equals error number</param>
        </member>
        <member name="M:ActiveV.Programs.Retry(ActiveV.ICommunications,System.Int32,System.Int32@)">
            <summary>
            Sends RETRY command to retry the last executed line.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="TaskNumber">The task number.</param>
            <param name="Status">Status = 1 for success or equals error number</param>
        </member>
        <member name="M:ActiveV.Programs.SetBreakpoint(ActiveV.ICommunications,System.String,System.Int32,System.Int32@)">
            <summary>
            Sets a breakpoint in a V+ program.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="ProgramName">Name of the program.</param>
            <param name="LineNumber">The line number.</param>
            <param name="Status">Status = 1 for success or equals error number.</param>
        </member>
        <member name="M:ActiveV.Programs.SetStackSize(ActiveV.ICommunications,System.Int32,System.Single,System.Int32@)">
            <summary>
            Sets the size of the stack.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="TaskNumber">The task number.</param>
            <param name="StackSize">Size of the stack.</param>
            <param name="Status">Status = 1 for success or equals error number.</param>
        </member>
        <member name="M:ActiveV.Programs.SStep(ActiveV.ICommunications,System.Int32,System.Int32@)">
            <summary>
             Executes the next step of program task. Step over so does not go into a subroutine.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="TaskNumber">The task number.</param>
            <param name="Status">Status = 1 for success or equals error number.</param>
        </member>
        <member name="M:ActiveV.Programs.Store(ActiveV.ICommunications,System.String,System.String,System.Int32@)">
            <summary>
            Store saves a program to disk.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="ProgName">Name of the prog.</param>
            <param name="FileName">Name of the file.</param>
            <param name="Status">Status = 1 for success or equals error number.</param>
        </member>
        <member name="M:ActiveV.Programs.Storem(ActiveV.ICommunications,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Storem saves a module to a file on the controller.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="ModuleName">Name of the module.</param>
            <param name="FileName">Name of the file.</param>
            <param name="storeReals">If 1, real variables are stored in the file.</param>
            <param name="storeLocations">If 1, location variables are stored.</param>
            <param name="storeStrings">If 1, string variables are store.</param>
            <param name="Status">Status = 1 for success or equals error number.</param>
        </member>
        <member name="M:ActiveV.Programs.Storep(ActiveV.ICommunications,System.String,System.String,System.Int32@)">
            <summary>
            Storep saves a program and its dependencies to a file on the controller.
            Variables are not saved.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="ProgName">Name of the prog.</param>
            <param name="FileName">Name of the file.</param>
            <param name="Status">Status = 1 for success or equals error number.</param>
        </member>
        <member name="M:ActiveV.Programs.XStep(ActiveV.ICommunications,System.Int32,System.Int32@)">
            <summary>
            Executes the next step of program task.  if next step is a subroutine Step into subroutine
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="TaskNumber">The task number.</param>
            <param name="Status">Status = 1 for success or equals error number.</param>
        </member>
        <member name="M:ActiveV.Programs.XStep2(ActiveV.ICommunications,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Moves execution to a specific line
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="TaskNumber">The task number.</param>
            <param name="LineNumber">The line number.</param>
            <param name="Status">Status = 1 for success or equals error number.</param>
        </member>
        <member name="M:ActiveV.Programs.ZERO(ActiveV.ICommunications,System.Int32@)">
            <summary>
            ZERO Clears V+ memory.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="Status">Status = 1 for success or equals error number</param>
        </member>
        <member name="T:ActiveV.FileAttributes">
            <summary>
            File attributes
            </summary>
        </member>
        <member name="M:ActiveV.Status.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.Status"/> class.
            </summary>
        </member>
        <member name="M:ActiveV.Status.Evaluate(ActiveV.ICommunications,System.Int32,System.String,System.String,System.Int32@,System.String@,System.Int32@)">
            <summary>
            Evaluates a returned expression from V+
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="TaskNumber">The task number. -1 = no task</param>
            <param name="ProgramName">Name of the program. Can be empty</param>
            <param name="Expression">The expression.</param>
            <param name="ExpressionType">Type of the expression. Real = 1, String = 2, Trans = 1, PPoint = 4, Invalid = 0</param>
            <param name="ResultingExpressionValue">The resulting expression value.</param>
            <param name="Status">Status = 1 for success or equals error number.</param>
        </member>
        <member name="M:ActiveV.Status.Free(ActiveV.ICommunications,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Returns the amount of available memory on controller.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="ProgramMemory">The program memory.</param>
            <param name="GraphicMemory">The graphic memory.</param>
            <param name="VisionMemory">The vision memory.</param>
            <param name="ModelMemory">The model memory.</param>
        </member>
        <member name="M:ActiveV.Status.get_NumberOfRobots(ActiveV.ICommunications)">
            <summary>
            Gets the number of robots configured.
            </summary>
            <param name="Comm">The communication channel.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveV.Status.get_SelectedRobot(ActiveV.ICommunications)">
            <summary>
            Gets currently selected robot.
            </summary>
            <param name="Comm">The communication channel.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveV.Status.Here(ActiveV.ICommunications,System.Int32,System.String)">
            <summary>
            Set VariableName to current location of selected RobotNumber.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="RobotNumber">The robot number.</param>
            <param name="VariableName">Name of the variable.</param>
        </member>
        <member name="M:ActiveV.Status.IO(ActiveV.ICommunications,System.Int32,System.Array@,System.Array@)">
            <summary>
            IO check status of IOs.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="IoGroupNumber">The io group number. 
            			0 means get signals from 0 to 999
            			1 means get signals from 1001 to 1999
            			2 means get signals from 2001 to 2999
            			3 means get signals from 3001 to 3999
            </param>
            <param name="ValidStatus">The valid status. Element value > 0 means valid</param>
            <param name="OnOffState">State of the on/off. Element value > 0 means ON otherwise OFF</param>
        </member>
        <member name="M:ActiveV.Status.Listl(ActiveV.ICommunications,System.Int32,System.String,System.String,System.Int32@,System.Array@,System.Int32@)">
            <summary>
            Listl returns the value of a location variable.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="TaskNumber">The task number.</param>
            <param name="ProgramName">Name of the program.</param>
            <param name="LocationName">Name of the location.</param>
            <param name="Count">The count.</param>
            <param name="Location">The location is an array of coordinate/joint values.</param>
            <param name="Status">The status = 1 for success or set to error number.</param>
        </member>
        <member name="M:ActiveV.Status.Listr(ActiveV.ICommunications,System.Int32,System.String,System.String,System.Int32@,System.Array@,System.Array@,System.Int32@)">
            <summary>
            Listr gets value of a variable or expression.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="TaskNumber">The task number.</param>
            <param name="ProgramName">Name of the program. It can be empty string</param>
            <param name="VariableName">Name of the variable. If empty string return all V+ variables</param>
            <param name="VariablesCount">Requested Count.</param>
            <param name="VariableNameCollection">The variable name collection.</param>
            <param name="VariableValueCollection">The variable value collection.</param>
            <param name="Status">The status = 1 for success or set to error number.</param>
        </member>
        <member name="M:ActiveV.Status.Lists(ActiveV.ICommunications,System.Int32,System.String,System.String,System.Int32@,System.Array@,System.Array@,System.Int32@)">
            <summary>
            ListS  returns values (RequestedCount) of string V+ variables (VariableName).su
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="TaskNumber">The task number. -1 = no task specified</param>
            <param name="ProgramName">Name of the program. Can be empty string</param>
            <param name="VariableName">Name of variable to retrieve. Can be name of a function or be an expression</param>
            <param name="RequestedCount">The requested response count. if zero, it returns all</param>
            <param name="VariableNameCollection">The variable name collection.</param>
            <param name="VariableContentCollection">The variable content collection.</param>
            <param name="Status">The status = 1 for success or set to error number r.</param>
        </member>
        <member name="M:ActiveV.Status.Lvariables(ActiveV.ICommunications,System.Int32,System.String,System.String,System.Int32@,System.Array@)">
            <summary>
            Lvariables gets a list of location variable names..
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="TaskNumber">The task number.</param>
            <param name="ProgramName">Name of the program.</param>
            <param name="Name">The name. Name may contain wildcards or empty string to get the names of all variables</param>
            <param name="RequestedNameCount">The requested Location name count. if zero, it returns all names in the response from controller</param>
            <param name="NameCollection">The name collection.</param>
        </member>
        <member name="M:ActiveV.Status.Parameter(ActiveV.ICommunications,System.String,System.Int32@,System.Array@,System.Array@,System.Array@)">
            <summary>
            Parameter gets information about V+ PARAMETERs.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="ParameterName">Name of the parameter or or empty string for all parameters</param>
            <param name="RequestedCount">The requested count. It sets the count for return count if different than Requested count</param>
            <param name="ParameterNameCollection">The parameter name collection.</param>
            <param name="ParameterIndexCollection">The parameter index collection.</param>
            <param name="ParameterValueCollection">The parameter value collection.</param>
        </member>
        <member name="M:ActiveV.Status.set_SelectedRobot(ActiveV.ICommunications,System.Int32)">
            <summary>
            Sets the selected robot.
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="RobotNumber">The robot number.</param>
        </member>
        <member name="M:ActiveV.Status.StackContents(ActiveV.ICommunications,System.Int32,System.Int32@,System.Int32@,System.Array@,System.Array@,System.Single@,System.Single@,System.Single@,System.Int32@)">
            <summary>
            Stacks: state of the stack for a given task..
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="TaskNumber">The task number.</param>
            <param name="RequestedProgramsOnStackCount">The requested number of programs on stack.</param>
            <param name="TaskState">State of the task. TaskState = 0 if task is idle and 1 if active</param>
            <param name="CurrentProgNamesCollection">The current prog names on stack collection.</param>
            <param name="ProgramStepsCollection">The program steps collection associated with a program name.</param>
            <param name="CurrentStackSize">Size of the current stack.</param>
            <param name="StackMaxUsedSize">Size of the stack maximum used.</param>
            <param name="StackLimit">The stack limit.</param>
            <param name="Status">The status = 1 for success or set to error number.</param>
        </member>
        <member name="M:ActiveV.Status.ActiveV#IStatus#Status(ActiveV.ICommunications,System.Int32@,System.Array@,System.Array@,System.Array@,System.Array@,System.Array@,System.Array@)">
            <summary>
            Status returns system task/program execution status
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="RequestedCount">The requested count/limit.</param>
            <param name="Tasks">The array of task numbers.</param>
            <param name="TasksStateCollection">The tasks state collection.  TaskState = 0 for idle tasks and 1 for active ones</param>
            <param name="MainProgsCollection">The main progs collection.</param>
            <param name="CurrentProgNamesCollection">The current prog names collection.</param>
            <param name="ProgramsCurrentStepCollection">The programs current step collection.</param>
            <param name="CurrentStackSizeCollection">The current stack size collection.</param>
        </member>
        <member name="M:ActiveV.Status.Switch(ActiveV.ICommunications,System.String,System.Int32@,System.Array@,System.Array@,System.Array@)">
            <summary>
            Switch returns the state of system switches.
            </summary>
            <param name="Comm">The comm.</param>
            <param name="SwitchName">Name of the switch. Return all if Name is empty string</param>
            <param name="RequestedCount">The count.  Number of array elements to return. At the end of query it returns number of array elements</param>
            <param name="SwitchNameCollection">The switch name collection.</param>
            <param name="SwitchNumberIndexCollection">The switch number index collection.</param>
            <param name="SwitchStateCollection">The switch state collection.</param>
        </member>
        <member name="M:ActiveV.Status.Where(ActiveV.ICommunications,System.Int32,System.Int32@,System.Array@,System.Array@)">
            <summary>
            Where returns the robot position.
            </summary>
            <param name="Comm">The comm.</param>
            <param name="RobotNumber">The robot number.</param>
            <param name="NumberOfJoints">The number of joints.</param>
            <param name="WorldCoordinateCollection">The world coordinate collection. It has six numbers representing x, y, z, y, p, r</param>
            <param name="JointCoordinateCollection">The joint coordinate collection. joints angles</param>
        </member>
        <member name="M:ActiveV.Status.initializeExpressionTypes">
            <summary>
            Initializes the expression types. It is used in Evaluate method
            </summary>
        </member>
        <member name="M:ActiveV.Status.initializeMemoryTypeToValue">
            <summary>
            Initializes the memory type to value. It is used in Free method
            </summary>
        </member>
        <member name="T:ActiveV.UDP.Communication.UdpBase">
            <summary>
            Base class for UDPClient and UDPServer classes
            </summary>
            <seealso cref="T:System.MarshalByRefObject" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:ActiveV.UDP.Communication.UdpBase.Close">
            <summary>
            Closes underlying socket.
            </summary>
        </member>
        <member name="M:ActiveV.UDP.Communication.UdpBase.Receive">
            <summary>
            Receives byte data from UdpClient and returns it in ReceiveInfo struct.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ActiveV.UDP.Communication.UdpBase.Receive(System.Int32)">
            <summary>
            Same as Receive method but time out is specified.
            </summary>
            <param name="Timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="T:ActiveV.UDP.Communication.UDPClient">
            <summary>
            It used for sending and receiving UDP messages to controller (CX)
            </summary>
            <seealso cref="T:ActiveV.UDP.Communication.UdpBase" />
        </member>
        <member name="M:ActiveV.UDP.Communication.UDPClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.UDP.Communication.UDPClient"/> class.
            </summary>
        </member>
        <member name="M:ActiveV.UDP.Communication.UDPClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.UDP.Communication.UDPClient"/> class.
            </summary>
            <param name="ChannelName">Name of the channel. "Handshake" or "Async"</param>
        </member>
        <member name="P:ActiveV.UDP.Communication.UDPClient.LocalSendPort">
            <summary>
            Gets the local send port.
            </summary>
            <value>
            The local send port.
            </value>
        </member>
        <member name="M:ActiveV.UDP.Communication.UDPClient.ConnectTo(System.String,System.Int32)">
            <summary>
            Connects to controller.
            </summary>
            <param name="ipAddress">The ip address.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:ActiveV.UDP.Communication.UDPClient.Send(System.String)">
            <summary>
            Sends the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ActiveV.UDP.Communication.UDPClient.Send(System.Byte[])">
            <summary>
            Sends the specified message bytes.
            </summary>
            <param name="messageBytes">The message bytes.</param>
        </member>
        <member name="T:ActiveV.UDP.Communication.UDPServer">
            <summary>
            UDP Server used to listen on a port
            </summary>
            <seealso cref="T:ActiveV.UDP.Communication.UdpBase" />
        </member>
        <member name="P:ActiveV.UDP.Communication.UDPServer.ListeningToClients">
            <summary>
            Gets a value indicating whether [listening to clients].
            </summary>
            <value>
              <c>true</c> if [listening to clients]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiveV.UDP.Communication.UDPServer.Name">
            <summary>
            Gets the channel name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:ActiveV.UDP.Communication.UDPServer.SourceIpAddress">
            <summary>
            Gets the controller ip address.
            </summary>
            <value>
            The source ip address.
            </value>
        </member>
        <member name="M:ActiveV.UDP.Communication.UDPServer.Close">
            <summary>
            Closes this channel and unsubscribe from Udp Dispatch Service.
            </summary>
        </member>
        <member name="M:ActiveV.UDP.Communication.UDPServer.GetLocalIpAddress">
            <summary>
            Gets this pc ip address.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ActiveV.UDP.Communication.UDPServer.listenForClientMessages">
            <summary>
            Receive message from UdpClient and dispatch it.
            </summary>
        </member>
        <member name="M:ActiveV.UDP.Communication.UDPServer.Receive">
            <summary>
            Receives byte data from UdpClient and returns it in ReceiveInfo struct.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ActiveV.UDP.Communication.UDPServer.Send(System.String,System.Net.IPEndPoint)">
            <summary>
            Sends the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="endpoint">The endpoint.</param>
        </member>
        <member name="M:ActiveV.UDP.Communication.UDPServer.startListeningToClients">
            <summary>
            Starts the listening to clients task.
            </summary>
        </member>
        <member name="M:ActiveV.UDP.Communication.UDPServer.SubscribeToReceiveMessage(System.String,UdpDispatchService.QueueWithEnqueueEvent{UdpDispatchService.ReceivedInfo})">
            <summary>
            Subscribes to receive message.
            </summary>
            <param name="ipAddress">The controller IP address.</param>
            <param name="buffer">Client object buffer.</param>
        </member>
        <member name="M:ActiveV.UDP.Communication.UDPServer.UnsubscribeFromReceivingMessage(System.String)">
            <summary>
            Unsubscribes from receiving message.
            </summary>
            <param name="ipAddress">The controller IP address.</param>
        </member>
        <member name="T:ActiveV.UDP.UdpReceive.ReceiveResponseProcess">
            <summary>
            Creates states, transitions and event for receiving message from controller
            </summary>
            <seealso cref="T:ActiveV.StateManager.StateMachine" />
        </member>
        <member name="M:ActiveV.UDP.UdpReceive.ReceiveResponseProcess.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.UDP.UdpReceive.ReceiveResponseProcess"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:ActiveV.UDP.UdpReceive.ReceiveResponseProcess.CreateStatesAndTransitions">
            <summary>
            Creates the states and transitions and sets the initial state for receive process
            </summary>
        </member>
        <member name="T:ActiveV.UDP.UdpReceive.ReceiveResponseState">
            <summary>
            Receive from UDP channel
            </summary>
            <seealso cref="T:ActiveV.StateManager.State" />
        </member>
        <member name="M:ActiveV.UDP.UdpReceive.ReceiveResponseState.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.UDP.UdpReceive.ReceiveResponseState"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:ActiveV.UDP.UdpReceive.ReceiveResponseState.StateActionOnEntry(System.Object,ActiveV.StateManager.StateEventArgs)">
            <summary>
            States the action on entry.
            this method is usually used to initialize variables for the state the first time the state machine is run.
            if set to null StateActionOnEntry method won't be called by StateMachine anymore
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The <see cref="T:ActiveV.StateManager.StateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:ActiveV.UDP.UdpReceive.ValidateReceivedMessageState">
            <summary>
            Validate message and enque it in response buffer
            </summary>
            <seealso cref="T:ActiveV.StateManager.State" />
        </member>
        <member name="M:ActiveV.UDP.UdpReceive.ValidateReceivedMessageState.StateActionOnEntry(System.Object,ActiveV.StateManager.StateEventArgs)">
            <summary>
            States the action on entry.
            this method is usually used to initialize variables for the state the first time the state machine is run.
            if set to null StateActionOnEntry method won't be called by StateMachine anymore
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The <see cref="T:ActiveV.StateManager.StateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ActiveV.UDP.UdpSend.SendState.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.UDP.UdpSend.SendState"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:ActiveV.UDP.UdpSend.SendState.DoAction(System.Object,ActiveV.StateManager.StateEventArgs)">
            <summary>
            A message is dequeued from send queue and sent.  
            If the state event is "WrongSequenceNumberReceived" then the response to last message was invalid and the last message is sent again.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The <see cref="T:ActiveV.StateManager.StateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ActiveV.UDP.UdpSend.SendState.StateActionOnEntry(System.Object,ActiveV.StateManager.StateEventArgs)">
            <summary>
            States the action on entry.
            this method is usually used to initialize variables for the state the first time the state machine has run.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The <see cref="T:ActiveV.StateManager.StateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:ActiveV.UDP.UdpSend.ValidateSequencState">
            <summary>
            Examines the response to sent message and validates it with sequence number.
            </summary>
            <seealso cref="T:ActiveV.StateManager.State" />
        </member>
        <member name="M:ActiveV.UDP.UdpSend.ValidateSequencState.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.UDP.UdpSend.ValidateSequencState"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:ActiveV.UDP.UdpSend.ValidateSequencState.DoAction(System.Object,ActiveV.StateManager.StateEventArgs)">
            <summary>
            Examines the response to sent message and validates it with sequence number.
            if the response is not ACK it will initiate retry by publishing wrongSeqenceNumberEventArg event.
            for cases where it does not receive ACK after retries or it times out (no response), it will notify with an error event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The <see cref="T:ActiveV.StateManager.StateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ActiveV.UDP.UdpSend.ValidateSequencState.receiveHandshakeHandler(UdpDispatchService.ReceivedInfo)">
            <summary>
            Get message byte array and validates the response
            </summary>
            <param name="receiveInfo">The receive information.</param>
        </member>
        <member name="M:ActiveV.UDP.UdpSend.ValidateSequencState.retry">
            <summary>
            Retry initiates sending the message again.  The process moves to Send state
            </summary>
        </member>
        <member name="M:ActiveV.UDP.UdpSend.ValidateSequencState.GetHandShakeInResponse(System.Byte[],System.Byte@)">
            <summary>
            Gets the hand shake in response.  Interested in sequence number
            </summary>
            <param name="vpResponse">The vp response.</param>
            <param name="responseSequenceNumber">The response sequence number.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveV.UDP.UdpSend.ValidateSequencState.StateActionOnEntry(System.Object,ActiveV.StateManager.StateEventArgs)">
            <summary>
            States the action on entry.
            this method is usually used to initialize variables for the state the first time the state machine is run.
            if set to null StateActionOnEntry method won't be called only once.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The <see cref="T:ActiveV.StateManager.StateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:ActiveV.UDP.UdpSend.SendProcess">
            <summary>
            Creates states, transitions and events for send process
            </summary>
            <seealso cref="T:ActiveV.StateManager.StateMachine" />
        </member>
        <member name="M:ActiveV.UDP.UdpSend.SendProcess.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ActiveV.UDP.UdpSend.SendProcess"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:ActiveV.UDP.UdpSend.SendProcess.CreateStatesAndTransitions">
            <summary>
            Creates the states and transitions.
            </summary>
        </member>
        <member name="M:ActiveV.UDP.UdpSend.SendProcess.StartAction(System.Object,ActiveV.StateManager.StateEventArgs)">
            <summary>
            This method starts the send process state machine cycle.
            </summary>
            <param name="sender">The sender.</param>
            <param name="stateArgs">The <see cref="T:ActiveV.StateManager.StateEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:ActiveV.UDP.UdpDispatcherConnection">
            <summary>
            Provides connection to DispatchService and implemented as singleton
            </summary>
        </member>
        <member name="M:ActiveV.UDP.UdpDispatcherConnection.getRemoteDispatcher">
            <summary>
            Gets the remote dispatcher.  This uses remoting convention to get a dispatcher.
            </summary>
        </member>
        <member name="P:ActiveV.UDP.UdpDispatcherConnection.Instance">
            <summary>
            Gets the instance of dispatcher
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="T:ActiveV.UdpLink">
            <summary>
            It manages all UDP connections for communicating with controller.
            </summary>
            <seealso cref="T:ActiveV.BaseLink" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:ActiveV.UdpLink.ACK">
            <summary>
            The acknowledge
            </summary>
        </member>
        <member name="F:ActiveV.UdpLink.ASYNC">
            <summary>
            Request V+ asynchronous output
            </summary>
        </member>
        <member name="F:ActiveV.UdpLink.BSY">
            <summary>
            Inquire V+ about busy state
            </summary>
        </member>
        <member name="F:ActiveV.UdpLink.QRRQ">
            <summary>
            Query V+ about presence of read requests
            </summary>
        </member>
        <member name="F:ActiveV.UdpLink.SIZMAX">
            <summary>
            Max number of bytes in a controller message
            </summary>
        </member>
        <member name="M:ActiveV.UdpLink.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:ActiveV.UdpLink.Close">
            <summary>
            Closes all UDP connections
            </summary>
        </member>
        <member name="M:ActiveV.UdpLink.ConfirmLicense(System.String)">
            <summary>
            Confirms the license.
            server that receives controllers handshake: ACK, NAK, BSY
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ActiveV.UdpLink.convertBytesToAsyncInfo(System.Byte[],System.String@)">
            <summary>
            Converts the bytes to asynchronous information.
            </summary>
            <param name="asyncBytes">The asynchronous bytes.</param>
            <param name="message">The message.</param>
            <returns>VpAsyncOutput struct value</returns>
        </member>
        <member name="M:ActiveV.UdpLink.ConvertStructToBytes``1(``0)">
            <summary>
            Converts the structure to bytes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataStruct">The data structure.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveV.UdpLink.EnqueueMonitorResponseMessageInResponseBuffer(System.String)">
            <summary>
            Enqueues the monitor response message from controller in response buffer.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ActiveV.UdpLink.GetNextMessageToSend">
            <summary>
            Gets the next message from send queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ActiveV.UdpLink.GetString(System.String@,System.Int32@,System.Int32@)">
            <summary>
            Read one message from response buffer.  Responses to Monitor commands are in response buffer
            </summary>
            <param name="ReceivedString">The received string.</param>
            <param name="Count">The count of characters in string read from response buffer.</param>
            <param name="Continue">The continue indicates if there are more responses associated with the command sent.</param>
        </member>
        <member name="M:ActiveV.UdpLink.Open(System.String,System.Int32)">
            <summary>
            Initializes all UDP connections, sends a dummy message to verify connection is UDP (for CX controller) or 
            returns "Error Wrong Protocol" if it is a TCP.
            </summary>
            <param name="ipAddress">The ip address.</param>
            <param name="portOffset">The port offset.</param>
        </member>
        <member name="M:ActiveV.UdpLink.QueryReadRequest(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Creates and sends a QueryReadRequest command to controller.
            Query V+ about presence of read requests
            </summary>
            <param name="Board">The board.</param>
            <param name="TaskID">The task identifier.</param>
            <param name="Status">The status.</param>
        </member>
        <member name="M:ActiveV.UdpLink.RequestEvents(System.Int32,System.Int32@)">
            <summary>
            Creates and sends an AsyncCommand to controller
            </summary>
            <param name="requestActionType">Type of the request action.</param>
            <param name="Status">The status.</param>
        </member>
        <member name="M:ActiveV.UdpLink.Send(System.String)">
            <summary>
            Sends the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ActiveV.UdpLink.SendDummyMessage">
            <summary>
            This method is called from Open method and Sends a dummy message to controller to test connection protocol. 
            Dummy message uses UDP to send "" to controller.  
            If it is a EX controller (uses TCP) then controller will return an error -533.
            For this error number, this method will return "Invalid hardware configuration" to Open method
            </summary>
            <returns></returns>
        </member>
        <member name="M:ActiveV.UdpLink.StartDispatchServer">
            <summary>
            Starts the dispatch server (DispatchServiceHost.exe).
            </summary>
            <returns></returns>
        </member>
        <member name="M:ActiveV.UdpLink.ConvertBytesToStruct``1(System.Byte[])">
            <summary>
            Converts the bytes to its struct equivalent.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bytes">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveV.UdpLink.createAsyncCommandBytes(System.Int32)">
            <summary>
            Returns byte array equivalent of a AsyncCommand struct.
            </summary>
            <param name="requestActionType">Type of the request action.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveV.UdpLink.createQueryReadRequestCommandBytes(System.Int32,System.Int32)">
            <summary>
            Returns byte array equivalent of a QueryReadRequestCommand struct.
            </summary>
            <param name="Board">The board.</param>
            <param name="TaskID">The task identifier.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveV.UdpLink.createReceiveResponseProcess">
            <summary>
            Creates the receive response process (state machine).  
            In the process, it receives a message from controller, validates the message and sends validation message to controller.
            </summary>
        </member>
        <member name="M:ActiveV.UdpLink.createSendProcess">
            <summary>
            Creates the send process where it sends a message and validates handshake response from controller.
            </summary>
        </member>
        <member name="M:ActiveV.UdpLink.isProcessRunning(System.String)">
            <summary>
            Determines whether processName is running.
            </summary>
            <param name="processName">Name of the process.</param>
            <returns>
              <c>true</c> if [is process running] [the specified process name]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ActiveV.Version.GetVplusVersion(ActiveV.Communications,System.Int32@,System.Int32@,System.String@,System.String@)">
            <summary>
            Gets the V+ version.
            The version appears in the form of:
            	[version].revision] [edit] example: 14.1 A1
            </summary>
            <param name="Comm">The communication channel.</param>
            <param name="Version">The version.</param>
            <param name="Revision">The revision.</param>
            <param name="Edit">The edit.</param>
            <param name="EditString">The entire edit string. Example: "14.1 (Edit A1, 30-Sep-2001)" </param>
        </member>
    </members>
</doc>
